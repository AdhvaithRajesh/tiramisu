<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="/static/styles/feed.xsl" type="text/xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
   <title>HSP</title>
   <link>https://hsp-test.netlify.app/</link>
   <description>Recent content on HSP</description>
   <language>en-IN</language>
   <webMaster>HSP</webMaster>
   <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International.</copyright>
   <lastBuildDate>Mon, 24 Jun 2024 01:06:31 +0530</lastBuildDate>
   <atom:link href="https://hsp-test.netlify.app/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Homebrew | hackerspace PESUECC</title>
      <link>https://hsp-test.netlify.app/homebrew/index.html/</link>
      <pubDate>Sun, 23 Jun 2024 05:30:00 +0530</pubDate>
      <author>HSP</author>
      <guid>https://hsp-test.netlify.app/homebrew/index.html</guid>
      <description>&lt;h1 id=&#34;homebrew-foss-by-hackerspace-pesuecc&#34;&gt;Homebrew FOSS by HackerSpace PESUECC&lt;/h1&gt;&#xA;&lt;p&gt;Celebrate the Spirit of Free and Open Source Software with Homebrew, PESU ECC&#39;s First FOSS Community!&lt;/p&gt;&#xA;&lt;p&gt;All are welcome. Click &lt;a href=&#34;/getstarted/&#34;&gt;Here&lt;/a&gt; to join us!&lt;/p&gt;&#xA;</description>
    </item>
    <item>
      <title>Federated Learning</title>
      <link>https://hsp-test.netlify.app/blog/FederatedLearning.html/</link>
      <pubDate>Sun, 09 Jun 2024 05:30:00 +0530</pubDate>
      <author>HSP</author>
      <guid>https://hsp-test.netlify.app/blog/FederatedLearning.html</guid>
      <description>&lt;h1 id=&#34;table-of-contents&#34;&gt;Table of Contents &lt;a class=&#34;anchor&#34; href=&#34;#table-of-contents&#34;&gt;#&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#introduction-to-federated-learning&#34;&gt;Introduction to Federated Learning&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#how-federated-learning-works&#34;&gt;How Federated Learning Works&lt;/a&gt;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#federated-averaging&#34;&gt;Federated Averaging&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#advantages-of-federated-learning&#34;&gt;Advantages of Federated Learning&lt;/a&gt;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#challenges-and-limitations&#34;&gt;Challenges and Limitations&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#applications-of-federated-learning&#34;&gt;Applications of Federated Learning&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#future-of-federated-learning&#34;&gt;Future of Federated Learning&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#conclusion&#34;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;introduction-to-federated-learning&#34;&gt;Introduction to Federated Learning &lt;a class=&#34;anchor&#34; href=&#34;#introduction-to-federated-learning&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Federated Learning is an approach to train the machine learning models across multiple decentralized devices or servers that hold local data samples. Instead of sharing sensitive data, what each device does is - it trains a model locally and only shares the learned parameters (like gradients or weights) with a central server. This ensures data privacy and efficient model training across a distributed network.&lt;/p&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;https://cdn.aglty.io/fortanix/blog/data-privacy.jpg&#34; alt=&#34;Data Privacy Meme&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;Fun Fact:&lt;/strong&gt; Federated Learning was first introduced by Google in 2016 to improve the predictive text on smartphones without compromising user privacy.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;In today&#39;s digital age, data privacy is more important than ever. With massive amounts of data generated daily, ensuring that personal information remains confidential is crucial. Federated Learning addresses this need by enabling collaborative model training without sharing raw data.&lt;/p&gt;&#xA;&lt;h2 id=&#34;how-federated-learning-works&#34;&gt;How Federated Learning Works &lt;a class=&#34;anchor&#34; href=&#34;#how-federated-learning-works&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;Key Components:&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Local Devices:&lt;/strong&gt; Train the model using local data, ensuring that sensitive information remains on the device.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Central Server:&lt;/strong&gt; Aggregates updates without accessing local data, combining the knowledge from each device to improve the overall model.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Communication Protocols:&lt;/strong&gt; Ensure secure transmission of updates, preventing any leakage of sensitive information during the process.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Let&#39;s break down the process:&lt;/p&gt;&#xA;&lt;p&gt;Federated Learning (FL) enables collaborative model training across multiple devices while preserving data privacy. SO, let us now explore the detailed mechanics and the rationale behind each step involved in FL.&lt;br&gt;&#xA;&lt;img src=&#34;https://media.geeksforgeeks.org/wp-content/uploads/20230717153929/Federated-Learning-(1).png&#34; alt=&#34;Federated Learning Diagram&#34;&gt;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;Model Initialization&lt;/strong&gt;:&#xA;A global model is initialized on the central server. This model is typically a neural network with a defined architecture but with untrained weights.The global model is created based on the desired task. Finally in this stage, the server then distributes this model to all participating devices, ensuring each device starts with the same initial parameters.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Initialize the global model&#xA;global_model = initialize_model()&#xA;# Distribute the global model to all devices&#xA;for device in devices:&#xA;    send_model_to_device(global_model, device)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;ol start=&#34;2&#34;&gt;&#xA;&lt;li&gt;&lt;strong&gt;Local Training&lt;/strong&gt;:&#xA;Each device trains the model on its local dataset. This step allows the model to learn from the data available on the device.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Local training function&#xA;def train_locally(model, data):&#xA;    # Training loop&#xA;    for epoch in range(local_epochs):&#xA;        for batch in data:&#xA;            # Forward pass&#xA;            predictions = model.forward(batch.inputs)&#xA;            # Compute loss&#xA;            loss = compute_loss(predictions, batch.labels)&#xA;            # Backward pass and update weights&#xA;            model.backward(loss)&#xA;            model.update_weights()&#xA;    return model.get_weights()&#xA;&#xA;# Train model locally on each device&#xA;local_updates = []&#xA;for device in devices:&#xA;    local_data = load_data(device)&#xA;    local_weights = train_locally(global_model, local_data)&#xA;    local_updates.append(local_weights)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;ol start=&#34;3&#34;&gt;&#xA;&lt;li&gt;&lt;strong&gt;Model Updates&lt;/strong&gt;:&#xA;Devices send their model updates (typically the gradients or weight changes) to the central server instead of the raw data. The updates contain only the changes in the model&#39;s weights, which are much smaller in size compared to the raw data. This step ensures data privacy and reduces the risk of sensitive data exposure.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Send local model updates to the central server&#xA;for update in local_updates:&#xA;    send_update_to_server(update)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;ol start=&#34;4&#34;&gt;&#xA;&lt;li&gt;&lt;strong&gt;Aggregation&lt;/strong&gt;:&#xA;The central server aggregates the received updates using techniques like Federated Averaging to create an improved global model. Federated Averaging (FedAvg): This is the most common aggregation method where the server averages the weights from all the updates. Averaging the weights is effective because it combines the learning from diverse data distributions across devices, leading to a more generalized model.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Federated Averaging function&#xA;def federated_averaging(global_model, local_updates):&#xA;    num_devices = len(local_updates)&#xA;    new_weights = [0] * len(global_model.weights)&#xA;&#xA;    for update in local_updates:&#xA;        for i, weight in enumerate(update):&#xA;            new_weights[i] += weight / num_devices&#xA;&#xA;    global_model.set_weights(new_weights)&#xA;    return global_model&#xA;&#xA;# Aggregate the local updates to update the global model&#xA;global_model = federated_averaging(global_model, local_updates)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;ol start=&#34;5&#34;&gt;&#xA;&lt;li&gt;&lt;strong&gt;Iteration&lt;/strong&gt;:&#xA;Steps 2-4 are repeated for multiple rounds until the model converges or reaches the desired level of accuracy. Iterative training allows the model to improve incrementally, benefiting from new data and continual learning. Each round of training and aggregation reduces the global model&#39;s loss, gradually enhancing its performance.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Main federated learning loop&#xA;def federated_learning(server_model, devices, num_rounds):&#xA;    for round in range(num_rounds):&#xA;        local_updates = []&#xA;        for device in devices:&#xA;            local_model = train_locally(server_model, device.data)&#xA;            local_updates.append(local_model.get_weights())&#xA;        server_model = federated_averaging(server_model, local_updates)&#xA;    return server_model&#xA;&#xA;# Execute the federated learning process&#xA;global_model = federated_learning(global_model, devices, num_rounds)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;federated-averaging&#34;&gt;Federated Averaging &lt;a class=&#34;anchor&#34; href=&#34;#federated-averaging&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/1/11/Centralized_federated_learning_protocol.png&#34; alt=&#34;Federated Learning Diagram&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;This is a common algorithm that is used in Federated Learning. The updates from each device are averaged to update the global model, ensuring that each device contributes to the learning process. But why does this averaging work and what does it actually do?&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;Linear Combination of Functions&lt;/strong&gt;:&#xA;The weights of a neural network can be seen as coefficients of a very high-dimensional function. By averaging the weights, we effectively create a new function that is a linear combination of the individual functions trained on each device&#39;s data. This linear combination often captures the general trend of the data distribution better than any single model trained on local data.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Convergence and Stability&lt;/strong&gt;:&#xA;Averaging helps in smoothing out the noise in the gradient updates. Each device&#39;s data might have some noise, but when averaged across many devices, the noise tends to cancel out, leading to more stable and reliable updates. This is particularly important in non-IID (Independent and Identically Distributed) settings, where data distributions can vary significantly across devices.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Generalization&lt;/strong&gt;:&#xA;By aggregating updates from multiple devices, the global model is exposed to a more diverse set of data points, which improves its ability to generalize to unseen data. This diversity helps in creating a more robust model that performs well across different data distributions.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;Here&#39;s a sample pseudo-code for Federated Averaging:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Sample pseudo-code for Federated Averaging&#xA;def federated_averaging(global_model, local_updates):&#xA;    num_devices = len(local_updates)&#xA;    new_weights = [0] * len(global_model.weights)&#xA;&#xA;    for update in local_updates:&#xA;        for i, weight in enumerate(update.weights):&#xA;            new_weights[i] += weight / num_devices&#xA;&#xA;    global_model.set_weights(new_weights)&#xA;    return global_model&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;advantages-of-federated-learning&#34;&gt;Advantages of Federated Learning &lt;a class=&#34;anchor&#34; href=&#34;#advantages-of-federated-learning&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Federated Learning brings several benefits to the table, making it a revolutionary approach in the field of machine learning:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Data Privacy:&lt;/strong&gt; Sensitive data never leaves the device, ensuring that personal information remains confidential.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Reduced Latency:&lt;/strong&gt; Local training minimizes delays, making the process more efficient.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Personalized Models:&lt;/strong&gt; Models can be customized for individual devices, improving performance and user satisfaction.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Scalability:&lt;/strong&gt; Federated Learning can easily scale to millions of devices, making it ideal for applications like mobile phones and IoT devices.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Energy Efficiency:&lt;/strong&gt; By leveraging local computation, Federated Learning can reduce the energy consumption associated with centralized data processing.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;challenges-and-limitations&#34;&gt;Challenges and Limitations &lt;a class=&#34;anchor&#34; href=&#34;#challenges-and-limitations&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;p&gt;However, Federated Learning has a couple of challenges which is quite note-worthy. A few of them are:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Data Heterogeneity:&lt;/strong&gt; Variability in data quality and quantity across devices can affect the model&#39;s performance. Different devices may have different data distributions, making it difficult to create a one-size-fits-all model.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Communication Overhead:&lt;/strong&gt; Frequent updates can be bandwidth-intensive, especially in environments with limited connectivity. Ensuring efficient communication protocols is essential to mitigate this issue.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Security Risks:&lt;/strong&gt; Potential vulnerabilities in the aggregation process can pose security risks. Ensuring secure and robust aggregation methods is crucial to prevent malicious attacks.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Device Resource Constraints:&lt;/strong&gt; Limited computational and storage resources on devices can hinder the training process. Optimizing the training process to accommodate these constraints is necessary.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;applications-of-federated-learning&#34;&gt;Applications of Federated Learning &lt;a class=&#34;anchor&#34; href=&#34;#applications-of-federated-learning&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Federated Learning is making waves in various industries, transforming how data-driven decisions are made:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Healthcare:&lt;/strong&gt; Enhancing diagnostic models without compromising patient data. For instance, hospitals can collaboratively train models to detect diseases like cancer without sharing sensitive patient records.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Finance:&lt;/strong&gt; Improving fraud detection while keeping financial data secure. Banks can collaborate to develop better fraud detection algorithms without exposing customer data.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;IoT:&lt;/strong&gt; Optimizing smart home devices through collective learning. Smart devices can improve their performance by learning from each other without sharing user data.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Telecommunications:&lt;/strong&gt; Enhancing network optimization by analyzing user behavior patterns. Telecom companies can improve network quality by understanding usage patterns without accessing individual user data.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Autonomous Vehicles:&lt;/strong&gt; Improving safety features through collaborative learning. Autonomous vehicles can share insights to enhance their decision-making capabilities without sharing raw data.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;https://blogs.nvidia.com/wp-content/uploads/2019/10/federated_learning_animation_still_white.png&#34; alt=&#34;Healthcare FL&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;h2 id=&#34;future-of-federated-learning&#34;&gt;Future of Federated Learning &lt;a class=&#34;anchor&#34; href=&#34;#future-of-federated-learning&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;The future of Federated Learning is bright and promising. As technology advances, FL could revolutionize industries by ensuring privacy and efficiency in AI applications.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Enhanced Privacy Mechanisms:&lt;/strong&gt; Future developments could focus on improving privacy mechanisms, making Federated Learning even more secure.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Better Communication Protocols:&lt;/strong&gt; Innovations in communication protocols could reduce the bandwidth required for model updates, making the process more efficient.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Integration with Edge Computing:&lt;/strong&gt; Combining Federated Learning with edge computing could further enhance data privacy and reduce latency.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Broader Industry Adoption:&lt;/strong&gt; As more industries recognize the benefits of Federated Learning, its adoption is likely to increase, leading to more robust and secure AI applications.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;https://media.licdn.com/dms/image/D4E10AQEnr19WqWyLwA/image-shrink_1280/0/1699373941278?e=2147483647&amp;amp;v=beta&amp;amp;t=CwWNSv21gOc5ZDdtq44tMDnv5nF_jfp6Ji7NmCC3sNQ&#34; alt=&#34;Future AI Meme&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion &lt;a class=&#34;anchor&#34; href=&#34;#conclusion&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Federated Learning is a game-changer in the world of AI, offering a perfect blend of privacy and efficiency. As more industries adopt this technology, we&#39;re likely to see a significant impact on how data-driven decisions are made. From healthcare to finance to IoT, the potential applications are vast and varied.&lt;/p&gt;&#xA;&lt;h2 id =&#34;next-steps&#34;&gt;Next Steps and Resources&lt;/h2&gt;&#xA;&lt;br/&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;An amazing Github repo with super cool resources : &lt;a href=&#34;https://github.com/weimingwill/awesome-federated-learning&#34;&gt;Federated Learning&lt;/a&gt;.&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=X8YYWunttOY&amp;amp;pp=ygUSZmVkZXJhdGVkIGxlYXJuaW5n&#34;&gt;Google Cloud Tech : What is Federated Learning&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=89BGjQYA0uE&amp;amp;pp=ygUSZmVkZXJhdGVkIGxlYXJuaW5n&#34;&gt;Federated Learning : Machine Learning on Decentralized Data (Google I/O&#39;19)&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=j5e7bZLTMH0&amp;amp;pp=ygUSZmVkZXJhdGVkIGxlYXJuaW5n&#34;&gt;Federated Learning at Scale, EPFL&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;Go through these resources throughly and ofc, &lt;code&gt;BUILD&lt;/code&gt; folks!&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;</description>
    </item>
    <item>
      <title>Docker Undocked</title>
      <link>https://hsp-test.netlify.app/homebrew/workshop_posts/Docker_Undocked.html/</link>
      <pubDate>Fri, 09 Feb 2024 05:30:00 +0530</pubDate>
      <author>HSP</author>
      <guid>https://hsp-test.netlify.app/homebrew/workshop_posts/Docker_Undocked.html</guid>
      <description>&lt;h2 id=&#34;welcome-aboard&#34;&gt;Welcome aboard!&lt;/h2&gt;&#xA;&lt;p&gt;Ever faced issues while running or managing multiple versions of software, or with your code failing on another machine? What if there was a way to package up your code to ensure it runs smoothly in any environment, allowing you to ship it across any platform? Well, &lt;code&gt;Docker&lt;/code&gt; is here to make your life easier 🐋.&lt;/p&gt;&#xA;&lt;p&gt;This article is associated with the &lt;code&gt;Docker Undocked&lt;/code&gt; workshop, through which we will be trying to understand what Docker is and how it works before we dive right into a few examples and get our hands dirty to familiarise ourselves with its fundamentals.&lt;/p&gt;&#xA;&lt;h2 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h2&gt;&#xA;&lt;br/&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href = &#34;#prerequisites&#34;&gt;Preqrequisites&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href = &#34;#virtualisation&#34;&gt;Virtualisation and the Cloud&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href = &#34;#hands-dirty&#34;&gt;Getting our hands dirty&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href = &#34;#containerization&#34;&gt;Containerization and Docker&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href = &#34;#images-vs-containers&#34;&gt;Docker images vs containers&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href = &#34;#dockerfile&#34;&gt;Can we create our own Docker images?&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href = &#34;#cheatsheet&#34;&gt;Docker Cheatsheet 🤩&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href = &#34;#compose&#34;&gt;Docker Compose and Multicontainer applications&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href = &#34;#internals&#34;&gt;Docker internals&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href = &#34;#next-steps&#34;&gt;Next steps and resources&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id = &#34;prerequisites&#34;&gt; Prerequisites &lt;/h2&gt;&#xA;&lt;p&gt;Before we start do make sure that you are done with either one of the following steps:&lt;/p&gt;&#xA;&lt;p&gt;Create an account on &lt;a href=&#34;https://hub.docker.com&#34;&gt;Docker Hub&lt;/a&gt; to follow along with the workshop on the &lt;a href=&#34;https://labs.play-with-docker.com/&#34;&gt;Docker Playground&lt;/a&gt; or,&lt;/p&gt;&#xA;&lt;p&gt;Install Docker on your local machine:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/desktop/install/windows-install/&#34;&gt;Install for Windows&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/desktop/install/linux-install/&#34;&gt;Install for Linux&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/desktop/install/mac-install/&#34;&gt;Install for Mac&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;A note for Windows users:&lt;/strong&gt; To run Linux Docker containers on a Windows 10 or 11 64-bit Home version, you will need to install and setup wsl version 2 with your preferred Linux distribution of choice. Before doing this make sure you have enabled the &lt;code&gt;Windows Subsystem For Linux&lt;/code&gt; and &lt;code&gt;Virtual Machine Platform&lt;/code&gt; in the Windows Features Control Panel. Also make sure virtualization is enabled by checking your Task Manager (if this is not enabled, you will have to enable it through your BIOS). Once this is done, run &lt;code&gt;wsl --install&lt;/code&gt; on your powershell and after successful installation of the default Ubuntu subsystem, proceed to install Docker Desktop on your host.&lt;/p&gt;&#xA;&lt;p&gt;Also, all the code for this workshop can be found in this repo:&#xA;&lt;a href=&#34;https://github.com/achyuthcodes30/Docker-Undocked-Code&#34;&gt;https://github.com/achyuthcodes30/Docker-Undocked-Code&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Before delving into Docker, let&#39;s explore some of the related technologies and foundational concepts that set the stage for containerization and Docker&#39;s inception and growth.&lt;/p&gt;&#xA;&lt;h2 id=&#34;virtualisation&#34;&gt; Virtualisation and the Cloud &lt;/h2&gt;&#xA;&lt;p&gt;Let us take a look at the state of things back in the 80s and 90s, back when organisations hosted and managed their applications and services on dedicated physical servers or hosts in on-premises data centers. IBM was a big player and mainframe computers were prominent for hosting centralized applications.&lt;/p&gt;&#xA;&lt;p&gt;The term &lt;code&gt;server&lt;/code&gt; here refers to a physical system or machine, but can also mean, in modern technology, a piece of software that is responsible for providing resources,services or some functionalities to other machines or clients requesting them over a network.&lt;/p&gt;&#xA;&lt;p&gt;Say we are a small organisation that wants to set up and maintain our own traditional physical server. To host services and applications on our own dedicated phyiscal server that we want to maintain, we would be responsible for configuring and monitoring the necessary hardware components like CPU, memory (RAM) and external storage (HDDs and SSDs), power supply, network interfaces and ports, circuitry etc.&lt;/p&gt;&#xA;&lt;p&gt;Next, we set up a host operating system of our choice with a set of device drivers (disk IO, audio, display etc.) and most importantly, the operating system kernel to manage physical resource allocation and facilitate interaction between software components and the server&#39;s hardware. Then, we install the required dependencies and libraries for each of our services/applications and start working with them.&lt;/p&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;https://i.ibb.co/tsLs3rQ/image.png&#34; alt=&#34;Physical Server Architecture&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;Now, what happens when application dependencies clash, or disruption in one application causes hiccups in another resulting in multiple applications going down, or what if we have to run multiple flavours and versions of operating systems?&lt;/p&gt;&#xA;&lt;p&gt;We could provision multiple such physical servers, each dedicated to hosting and running a single service or application along with its dependencies or its own host operating system and scale out in this fashion as well. However, this wouldn&#39;t be cost efficient and we may not have the space to house these servers either. Also, while we are in complete control of the server, the complete responsibility for maintenance, security and scalability rests upon us.&lt;/p&gt;&#xA;&lt;p&gt;So what if, instead, there was a way to isolate each of these applications and their dependencies in a separate environment or operating system of its own, making efficient utilization of one server&#39;s resources and compute. This is exactly what we try to accomplish with the help of virtualisation.&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;Virtualisation&lt;/code&gt; is a technology that abstracts and decouples physical resources, such as CPU, memory, storage, and network, from the underlying physical hardware and present them in a way that allows multiple isolated virtual environments to coexist on a single physical system. Some common types include application, network, desktop and storage virtualisation and server virtualisation which allows us to run multiple isolated virtual servers running their own guest operating system and a set of applications and their dependencies on a single physical server.&lt;/p&gt;&#xA;&lt;p&gt;Each virtual instance in this case, or &lt;code&gt;virtual machine&lt;/code&gt;, operates as a self-contained entity with its own virtualized CPU, memory, storage, and network interfaces, which is essentially abstracted away and allocated from the physical host machine. These VMs can also have access to devices for display, audio etc. This is all possible with the help of a &lt;code&gt;hypervisor&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;A &lt;code&gt;Hypervisor&lt;/code&gt; is a piece of software or firmware that creates and manages virtual instances, manages the allocation of physical resources to each one and ensures their isolation. The hypervisor virtualizes the physical resources (CPU, memory, networking, storage) of the host machine and presents them to each VM as if they were dedicated resources.&lt;/p&gt;&#xA;&lt;p&gt;There are two types of hypervisors that achieve the same in slightly different ways.&lt;/p&gt;&#xA;&lt;p&gt;A &lt;code&gt;Type-1 hypervisor&lt;/code&gt; or &lt;code&gt;Bare-Metal hypervisor&lt;/code&gt; directly interacts with the underlying physical resources without the need for an operating system. It is more performant as it eliminates the overhead of an OS layer while making decisions like scheduling and storage access on it own and therefore provides a more streamlined and efficient virtualization environment. It is commonly used in data centers, cloud infrastructure, and server virtualization environments. Examples include VMware ESXi, Bare Metal Microsoft Hyper-V, XenServer and open source KVM.&lt;/p&gt;&#xA;&lt;p&gt;A &lt;code&gt;Type-2 hypervisor&lt;/code&gt; or &lt;code&gt;Hosted hypervisor&lt;/code&gt; is generally less performant as the hypervisor relies on a host operating system layer. When an application or the guest OS in the VM issues a system call or requests access to a physical resource, the hypervisor intercepts these requests. The hypervisor communicates with the host OS to manage the sharing and allocation of physical resources among VMs. These are commonly used for development, testing, and desktop virtualization scenarios where optimal performance is not a primary concern. Examples include Oracle VirtualBox and VMWare Workstation.&lt;/p&gt;&#xA;&lt;p&gt;Let us go ahead and try out a VM for ourselves. Visit the &lt;a href=&#34;https://labs.play-with-docker.com/&#34;&gt;Docker Playground&lt;/a&gt;, login and click on the &lt;code&gt;Start&lt;/code&gt; option. Once your session is ready add a new instance and you will have your very own Linux Virtual Machine to play around with (it also has a Docker set up).&lt;/p&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;https://i.ibb.co/CKKtG7w/image.png&#34; alt=&#34;Virtualisation Architecture&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;Next, let us talk about the Cloud. What exactly is it?&lt;/p&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;https://i.ibb.co/92Khp8c/image.png&#34; alt=&#34;Cloud&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;While it does share the name with what you see above, when people refer to &amp;quot;the cloud,&amp;quot; they are talking about a vast, interconnected network of servers and services accessible over the internet, with the specific details of the infrastructure hidden behind a metaphorical cloud. Users can utilize computing resources over a network or the internet on-demand without worrying about managing the underlying hardware and configuration.&lt;/p&gt;&#xA;&lt;p&gt;The cloud market continues to grow rapidly, with organizations increasingly adopting cloud services for flexibility, scalability, and cost-effectiveness. A few major cloud service providers include Amazon Web Services, Microsoft Azure and Google Cloud Platform.&lt;/p&gt;&#xA;&lt;h2 id=&#34;hands-dirty&#34;&gt; Getting our hands dirty &lt;/h2&gt;&#xA;&lt;p&gt;Let us explore the Docker Hub Registry and pull our first Docker image. We will try to run an Ubuntu environment on your host machine (If you are on the Docker Playground, we will be doing this on your Linux Virtual Machine). Let&#39;s see how we can achieve this:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Go to &lt;a href=&#34;https://hub.docker.com/&#34;&gt;Docker Hub&lt;/a&gt;. This is a popular cloud based container registry where developers can find and share container images.&lt;/li&gt;&#xA;&lt;li&gt;Search for &#39;Ubuntu&#39; in the search bar and click on the Ubuntu image.&lt;/li&gt;&#xA;&lt;li&gt;The &lt;code&gt;tags&lt;/code&gt; field specifies human readable identifiers for specific version or variants of an image.&lt;/li&gt;&#xA;&lt;li&gt;Following the command provided on the page, let us run &lt;code&gt;docker pull ubuntu&lt;/code&gt; on our host.&lt;/li&gt;&#xA;&lt;li&gt;We can verify that the image was build successfully by using the &lt;code&gt;docker images&lt;/code&gt; command to list all the Docker images on our local respository.&lt;/li&gt;&#xA;&lt;li&gt;Next, we spin up a container from this Ubuntu image by running &lt;code&gt;docker run -it --name ubuntu_container ubuntu&lt;/code&gt;. The -it flags combine the &amp;quot;interactive&amp;quot; and &amp;quot;pseudo-tty&amp;quot; options to provide us with an interactive terminal emulation within the container which will then allow us to interact with its processes.&lt;/li&gt;&#xA;&lt;li&gt;That was simple wasn&#39;t it? We were able to set up an Ubuntu environment on our host machine in just a couple of minutes.&lt;/li&gt;&#xA;&lt;li&gt;Now, exit the container using &lt;code&gt;Ctrl + c&lt;/code&gt; or &lt;code&gt;Ctrl + p Ctrl + q&lt;/code&gt; and run &lt;code&gt;docker stop &amp;lt;container_id_or_container_name&amp;gt;&lt;/code&gt; to stop the container and &lt;code&gt;docker start&lt;/code&gt; to start it again. Note that in the case of no-name containers, providing just the first few unique characters of the container ID will suffice.&lt;/li&gt;&#xA;&lt;li&gt;Run the &lt;code&gt;docker ps -a&lt;/code&gt; command to list all containers on your machine regardless of their state. The &lt;code&gt;docker ps&lt;/code&gt; command by itself returns information of only those containers that are alive/running.&lt;/li&gt;&#xA;&lt;li&gt;We can now easily spin up multiple containers from the Ubuntu image using the &lt;code&gt;docker run&lt;/code&gt; command.&lt;/li&gt;&#xA;&lt;li&gt;We can also use the &lt;code&gt;docker exec &amp;lt;container_name_or_id&amp;gt;&lt;/code&gt; command to run a new command inside the specified running container.&lt;/li&gt;&#xA;&lt;li&gt;We can also just run &lt;code&gt;docker run&lt;/code&gt; without running &lt;code&gt;docker pull&lt;/code&gt; and Docker will pull the image from the registry service as it will not be able to find the image on the local respository.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id =&#34;containerization&#34;&gt;Containerization and Docker&lt;/h2&gt;&#xA;&lt;p&gt;In a traditional Infrastructure as a Service (IaaS) model, applications are deployed on virtual machines on the cloud. Each VM consists of a complete operating system, along with the application and its dependencies. While this approach provides isolation and flexibility, it comes with overhead in terms of resource consumption, as each VM carries its own OS. Scaling applications requires scaling entire VMs, even if the changes are minimal.&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;Containerization&lt;/code&gt; addresses these challenges by encapsulating an application and its dependencies into a lightweight, standalone unit known as a &lt;code&gt;container&lt;/code&gt;. Containers share the host OS kernel, making them more efficient and faster to deploy than VMs.&lt;/p&gt;&#xA;&lt;p&gt;You can actually see container processes running on your machine with the &lt;code&gt;ps&lt;/code&gt; command or the &lt;code&gt;pstree&lt;/code&gt; command as opposed to processess running on a guest OS inside a Virtual Machine which are completely isolated.&lt;/p&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;https://i.ibb.co/fDHnfyC/image.png&#34; alt=&#34;VM vs Container&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;But what is &lt;code&gt;Docker&lt;/code&gt; and how is it related to any of this?&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;Docker&lt;/code&gt; is a popular open-source container platform consisting of a set of tools designed to simplify the development, deployment, and operation of applications using containers.&lt;/p&gt;&#xA;&lt;p&gt;But why is it so popular? How is it relevant in today&#39;s industry?&lt;/p&gt;&#xA;&lt;p&gt;Docker is instrumental in the &lt;code&gt;microservices&lt;/code&gt; architecture, where applications are composed of small, independent services. Each microservice can run in its own Docker container, enabling isolation, scalability, and easy management of microservices. This allows developers to package and deploy microservices independently, making it easier to update and scale specific components without affecting the entire application.&lt;/p&gt;&#xA;&lt;p&gt;Docker&#39;s containerization technology provides consistency across different environments on the &lt;code&gt;Cloud&lt;/code&gt;. Docker containers are also integral to &lt;code&gt;DevOps&lt;/code&gt; teams as they are consistent, portable and resource efficient, making them a viable solution for more reliable and stable releases through &lt;code&gt;Continuous Integration&lt;/code&gt; and &lt;code&gt;Continuous Deployment&lt;/code&gt; (CI/CD) pipelines.&lt;/p&gt;&#xA;&lt;p&gt;Now, type in the following commands in the docker playground VM - &lt;code&gt;apk add neofetch&lt;/code&gt; followed by &lt;code&gt;neofetch&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;We see that we are running an &lt;code&gt;Alpine Linux&lt;/code&gt; instance (as you might have inferred from the &lt;code&gt;apk&lt;/code&gt; package manager). However, when you check &lt;code&gt;pstree&lt;/code&gt; you can see that it was inited by &lt;code&gt;dockerd&lt;/code&gt;, the &lt;code&gt;Docker daemon&lt;/code&gt;, which is a background process responsible for managing various services related to Docker and &lt;code&gt;containerd&lt;/code&gt;, a high level container runtime responisble for actually managing and pulling images and spinning up containers. This means we are inside an Alpine Linux Docker container in a VM! A lot of virtualization indeed and this is slowly becoming the norm.&lt;/p&gt;&#xA;&lt;p&gt;We will explore this further in the &lt;a href = &#34;#internals&#34;&gt;Docker Internals&lt;/a&gt; section. But now that we have a basic understanding of what Docker is and why we use it, let us learn more about it&#39;s fundamentals.&lt;/p&gt;&#xA;&lt;h2 id =&#34;images-vs-containers&#34;&gt;Docker images vs containers&lt;/h2&gt;&#xA;&lt;p&gt;The process of containerising an application with Docker involves pulling and building &lt;code&gt;images&lt;/code&gt; and spinning up &lt;code&gt;containers&lt;/code&gt;. But what exactly is an &lt;code&gt;image&lt;/code&gt; and what do we mean by the term &lt;code&gt;container&lt;/code&gt;?&lt;/p&gt;&#xA;&lt;p&gt;A &lt;code&gt;Docker image&lt;/code&gt; is a read-only, executable template containing a set of instructions, libraries, dependencies, configurations and files packaged together to create a runtime instance or a container environment. It is a snapshot that references a set of read-only or immutable layers with a base layer that defines the environment or the minimal operating system. These layers are stacked on top of each other to form the container&#39;s root file system. Docker images can be shared and stored in multiple locations and can be pulled from/ pushed to a public or private repository (The Docker Hub Registry for example).&lt;/p&gt;&#xA;&lt;p&gt;A &lt;code&gt;Docker container&lt;/code&gt; is a lightweight, isolated, running instance of an image. Docker images become containers when they run on the Docker engine. The instructions and code, dependencies and libraries that were packaged up as read-only, shared layers during the build process of the image form the base of the containers file system as mentioned earlier. Docker containers create a thin, top writeable layer on top of its base to perform modifications to the container file system and data. Now we can run commands in this container, assign and bind it to a port and perform other actions as opposed to a Docker image which is just a snapshot.&lt;/p&gt;&#xA;&lt;p&gt;If you are familiar with Object Oriented Programming, you can think of a &lt;code&gt;Docker image&lt;/code&gt; as a &lt;code&gt;class&lt;/code&gt; and a &lt;code&gt;container&lt;/code&gt; as an &lt;code&gt;instance&lt;/code&gt; of a class or a &lt;code&gt;Docker image&lt;/code&gt;, or you can think of &lt;code&gt;Docker images&lt;/code&gt; as &lt;code&gt;cookie cutters&lt;/code&gt;, using which one can prepare multiple &lt;code&gt;cookies&lt;/code&gt; or &lt;code&gt;containers&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;https://i.ibb.co/nnpDHLn/image.png&#34; alt=&#34;Docker cookie&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;&lt;code&gt;Docker containers&lt;/code&gt; can be made lightweight thanks to &lt;code&gt;Union mounts/UnionFS&lt;/code&gt; and the &lt;code&gt;Copy-On-Write&lt;/code&gt; strategy. &lt;code&gt;Union mount&lt;/code&gt; is a type of a filesystem that can create an illusion of merging contents of several directories into one without modifying its original (physical) sources. This can be useful as we might have related sets of files stored in different locations or media, and yet we want to show them in single, merged view. In our case, we want to present the Container&#39;s writeable layer and the read-only layers of the image as a merged view giving the writeable layer more priority.&lt;/p&gt;&#xA;&lt;p&gt;Many images that we use to spin up our containers are quite bulky whether it&#39;s ubuntu with size of 72MB or nginx with size of 133MB. It would be quite expensive to allocate that much space every time we&#39;d like to create a container from these images. Thanks to &lt;code&gt;union filesystem&lt;/code&gt;, Docker only needs to create thin layer on top of the image and rest of it can be shared between all the containers. This also provides the added benefit of reduced start time, as there&#39;s no need to copy the image files and data.&lt;/p&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;https://i.ibb.co/BCrsqHx/image.png&#34; alt=&#34;Docker UFS&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;But what happens when we want to make changes to files in the read-only layer? That&#39;s where the &lt;code&gt;Copy-On-Write&lt;/code&gt; strategy comes to play. The contents of the read-only layer are not copied into the container writeable layer until the first attempt to write to it. The files can then be modified safely and the changes are visible in the writeable layer.&lt;/p&gt;&#xA;&lt;h2 id =&#34;dockerfile&#34;&gt;Can we create our own images?&lt;/h2&gt;&#xA;&lt;p&gt;YES! That is exactly what we are going to explore now by dockerising a simple Node + Express server.&lt;/p&gt;&#xA;&lt;p&gt;Before we start though, let us make sure we have installed version of NodeJS that is &amp;gt;=16. Run the &lt;code&gt;node -v&lt;/code&gt; command on your shell to check the version of NodeJS running on your system and make a note of it. If your system does not have NodeJS installed, you can visit the &lt;a href=&#34;https://nodejs.org/en&#34;&gt;NodeJS Website&lt;/a&gt; to install NodeJS and npm or simply run &lt;code&gt;apk add nodejs npm&lt;/code&gt; if you are on the Docker playground. You can also run &lt;code&gt;apt install nodejs npm&lt;/code&gt; if you are running a Debian based Linux distribution like Ubuntu.&lt;/p&gt;&#xA;&lt;p&gt;Once you have the necessary installations, create a project directory with the &lt;code&gt;mkdir&lt;/code&gt; command and switch directories using the &lt;code&gt;cd&lt;/code&gt; command.&lt;/p&gt;&#xA;&lt;p&gt;Once you are inside the project directory, run &lt;code&gt;npm init -y&lt;/code&gt; to initialize a new project and create the package.json file. Then run the following command &lt;code&gt;npm install express&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;Now open the project on your preferred editor of choice and create a file called &lt;code&gt;index.js&lt;/code&gt; (You can also do this with the &lt;code&gt;touch&lt;/code&gt; command if you are on a Linux machine).&lt;/p&gt;&#xA;&lt;p&gt;Type in the following code inside &lt;code&gt;index.js&lt;/code&gt;:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const app = require(&amp;quot;express&amp;quot;)();&#xA;&#xA;app.get(&amp;quot;/&amp;quot;, (req, res) =&amp;gt; {&#xA;  res.json({ Page: &amp;quot;This is the homepage&amp;quot; });&#xA;});&#xA;&#xA;app.get(&amp;quot;/first&amp;quot;, (req, res) =&amp;gt; {&#xA;  res.json({ Page: &amp;quot;This is the first page.&amp;quot; });&#xA;});&#xA;&#xA;app.get(&amp;quot;/second&amp;quot;, (req, res) =&amp;gt; {&#xA;  res.json({ Page: &amp;quot;This is the second page.&amp;quot; });&#xA;});&#xA;&#xA;app.all(&amp;quot;*&amp;quot;, (req, res) =&amp;gt; {&#xA;  res.status(404).send(&amp;quot;Oops! Cannot find that page&amp;quot;);&#xA;});&#xA;&#xA;app.listen(3000, () =&amp;gt; {&#xA;  console.log(&amp;quot;Listening on port 3000&amp;quot;);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Now, to make sure this works locally, type in &lt;code&gt;node index.js&lt;/code&gt; in the terminal inside the project directory. Then either visit &lt;code&gt;localhost:3000&lt;/code&gt; on a browser or run &lt;code&gt;curl localhost:3000&lt;/code&gt; on the command line. To check if this works from the Docker Playground, expose the port 3000 of the VM with the &lt;code&gt;OPEN PORT&lt;/code&gt; option provided above and follow the link that is generated to verify that our code works.&lt;/p&gt;&#xA;&lt;p&gt;Once we have confirmed that the app works fine locally, we will proceed towards containerizing this app by creating our own custom image. To do this, go ahead and create a file called &lt;code&gt;Dockerfile&lt;/code&gt; in the project directory.&lt;/p&gt;&#xA;&lt;p&gt;A &lt;code&gt;Dockerfile&lt;/code&gt; is a text file inside which we list instructions for the &lt;code&gt;Docker daemon&lt;/code&gt; to follow when building Docker images. Each &lt;code&gt;layer&lt;/code&gt; of a Docker image can be thought of as the byproduct of the execution of an instruction inside this file. It can be thought of as a &lt;code&gt;recipe&lt;/code&gt; required to prepare a &lt;code&gt;Paneer sandwich&lt;/code&gt; one layer at a time.&lt;/p&gt;&#xA;&lt;p&gt;Inside the &lt;code&gt;Dockerfile&lt;/code&gt;, type in the following:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;FROM node:latest&#xA;WORKDIR /app&#xA;COPY . /app&#xA;RUN npm install&#xA;EXPOSE 3000&#xA;CMD [&amp;quot;node&amp;quot;,&amp;quot;index.js&amp;quot;]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Let&#39;s talk about what each line in this code does:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;FROM &lt;code&gt;&amp;lt;base_image:tag&amp;gt;&lt;/code&gt;: This line specifies a base image to build our custom image from. It does the work of building the node environment for us.&lt;/li&gt;&#xA;&lt;li&gt;WORKDIR &lt;code&gt;&amp;lt;directory&amp;gt;&lt;/code&gt;: This directive specifies the working directory for the subsequent instructions in the Dockerfile and inside the containers that we spin off of the image built.&lt;/li&gt;&#xA;&lt;li&gt;COPY &lt;code&gt;&amp;lt;path_to_copy_from&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;lt;path_to_copy_to&amp;gt;&lt;/code&gt;: This line copies the contents of directory to the specified directory while building the image and inside the container. In this case we copy everything from our current directory to the working directory &lt;code&gt;/app&lt;/code&gt; inside our container.&lt;/li&gt;&#xA;&lt;li&gt;RUN &lt;code&gt;&amp;lt;command&amp;gt;&lt;/code&gt;: Here we specify the command to run while building the image and the results of this command will be reflected inside of any container we spin up from this image.&lt;/li&gt;&#xA;&lt;li&gt;CMD &lt;code&gt;&amp;lt;command&amp;gt;&lt;/code&gt;: The default command to run when we start ant container that we spin up from our custom image.&lt;/li&gt;&#xA;&lt;li&gt;EXPOSE &lt;code&gt;&amp;lt;port&amp;gt;&lt;/code&gt;: This line informs docker that all derived containers listen on the specified network port at runtime.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Next, create a &lt;code&gt;.dockerignore&lt;/code&gt; file in the same directory that excludes certain files/directories from the built image and its containers. Before the build context for an image is sent to the &lt;code&gt;Docker daemon&lt;/code&gt;, it searches for this file in the root directory of the build context so it knows which paths to ignore during the build process. This helps in reducing the size of containers. It is pretty similar to the &lt;code&gt;.gitignore&lt;/code&gt; file for Git.&lt;/p&gt;&#xA;&lt;p&gt;Inside the &lt;code&gt;.dockerignore&lt;/code&gt; file, type in the following:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;node_modules&#xA;Dockerfile&#xA;.dockerignore&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;We do this to ensure &lt;code&gt;node_modules&lt;/code&gt; is not unnecessarily copied each time we build the image and so that we can hide the Dockerfile and .dockerignore file from others building our image and also prevent them from taking up unnecessary space inside our containers.&lt;/p&gt;&#xA;&lt;p&gt;Once that is done, run the following command in the project directory:&#xA;&lt;code&gt;docker build -t &amp;lt;image_name&amp;gt;:&amp;lt;image_tag&amp;gt; .&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;Where we specify the image name and tag after the &lt;code&gt;-t&lt;/code&gt; flag and the directory inside which our Dockerfile resides to build our custom image.&lt;/p&gt;&#xA;&lt;p&gt;We can then check if the image was created by running &lt;code&gt;docker images&lt;/code&gt; to list all images present on our machine or the specified repository.&lt;/p&gt;&#xA;&lt;p&gt;To spin up a container from this image, we need to run the command &lt;code&gt;docker run --name &amp;lt;container_name&amp;gt; -p &amp;lt;host_port&amp;gt;:&amp;lt;container_port&amp;gt; &amp;lt;image_name&amp;gt;:&amp;lt;image_tag&amp;gt;&lt;/code&gt; which tells Docker what the container name should be and which network port of the host machine should point to the specified network port of the container and what image should be used to spin up the container.&lt;/p&gt;&#xA;&lt;p&gt;Then either visit &lt;code&gt;localhost:&amp;lt;host_port&amp;gt;&lt;/code&gt; on a browser or run &lt;code&gt;curl localhost:&amp;lt;host_port&amp;gt;&lt;/code&gt; on the command line and verify that you have successfully containerized and run your own application. If you are on the Docker playground follow the same steps as we did before dockerising our web server and expose the host port that we mapped to the container port 3000 using the &lt;code&gt;OPEN PORT&lt;/code&gt; option and follow the link to verify that our container works fine.&lt;/p&gt;&#xA;&lt;p&gt;Voila! We have successfully containerised a Node + Express server and it can now be run in any environment without any hiccups.&lt;/p&gt;&#xA;&lt;p&gt;But let us try something else here. In the index.js file add another route with the following code:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;app.get(&amp;quot;/third&amp;quot;, (req, res) =&amp;gt; {&#xA;  res.json({ Page: &amp;quot;This is the third page.&amp;quot; });&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Now, check the result on &lt;code&gt;localhost:&amp;lt;host_port&amp;gt;&lt;/code&gt;. You will notice that there is no change and we get the 404 message when we try to view &lt;code&gt;localhost:3000/third&lt;/code&gt;. This is because Docker images are read-only as you read earlier and once built they are locked in and their contents cannot be changed.&lt;/p&gt;&#xA;&lt;p&gt;So to view these changes, build the image again using the same command as before with a new name. We can see that the image is being built with the exact same steps as before and &lt;code&gt;npm install&lt;/code&gt; runs again to install packages even though we did not install any new packages. This is unnecessary and inefficient.&lt;/p&gt;&#xA;&lt;p&gt;All or most instructions in a &lt;code&gt;Dockerfile&lt;/code&gt; create a &lt;code&gt;layer&lt;/code&gt; in the build process of an image and these layers are &lt;code&gt;shared&lt;/code&gt; and &lt;code&gt;cacheable&lt;/code&gt;. This means that if nothing has been changed in the &lt;code&gt;context&lt;/code&gt; of a certain instruction, that layer does not have to rebuilt and the &lt;code&gt;cached&lt;/code&gt; result of &lt;code&gt;previous&lt;/code&gt; build can be reused. The instructions in a Dockerfile are executed &lt;code&gt;sequentially&lt;/code&gt; from top to bottom and this is the order in which &lt;code&gt;layers&lt;/code&gt; are built. Therefore, only the instruction for which the context has been &lt;code&gt;modified&lt;/code&gt;, and &lt;code&gt;subsequent&lt;/code&gt; instructions, need to be executed again and hence only those layers need to be &lt;code&gt;rebuilt&lt;/code&gt;. The layers before this point can reuse their respective &lt;code&gt;caches&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;To exploit this feature and optimize our build, we can rewrite our &lt;code&gt;Dockerfile&lt;/code&gt; like this:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;FROM node:21-alpine3.19&#xA;WORKDIR /app&#xA;COPY package*.json /app&#xA;RUN npm install&#xA;COPY . /app&#xA;EXPOSE 3000&#xA;CMD [&amp;quot;node&amp;quot;,&amp;quot;index.js&amp;quot;]&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;This ensures that we do not unnecessarily reinstall packages each time we build the image making the build process quicker and more efficient. We also specifiy a tag/version for our node environment instead of the &amp;quot;latest&amp;quot; tag to ensure that our app remains stable regardless of any updates to the base image. We also run &lt;code&gt;npm ci&lt;/code&gt; instead of &lt;code&gt;npm install&lt;/code&gt; for a clean installation of the exact versions of dependencies in the &lt;code&gt;package-lock.json&lt;/code&gt; file.&lt;/p&gt;&#xA;&lt;h2 id =&#34;cheatsheet&#34;&gt;Some more Docker commands&lt;/h2&gt;&#xA;&lt;p&gt;Here is a cheatsheet containing some useful Docker commands:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;docker version&lt;/code&gt;: Version of the Docker Engine running on your host. -&lt;code&gt;docker --help &amp;lt;command&amp;gt;&lt;/code&gt;: Provides more information for a particular command.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;docker images&lt;/code&gt;: Lists all images that are available locally.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;docker rmi &amp;lt;image_id_or_name&amp;gt;&lt;/code&gt;: Deletes the specified image.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;docker image prune&lt;/code&gt;: Removes all unused images i.e. images not being used by any containers.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;docker build&lt;/code&gt;: To build an image from a Dockerfile. Use the &lt;code&gt;-t&lt;/code&gt; flag to specify an image name and tag and provide the path to the Dockerfile.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;docker pull&lt;/code&gt;: Pull an image from Docker hub or a specified registry.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;docker push&lt;/code&gt;: Push an image to Docker hub or a specified regsitry.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;docker search&lt;/code&gt;: Search Docker hub for an image.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;docker start|stop|restart &amp;lt;container_id_or_name&amp;gt;&lt;/code&gt;: Start/stop/restart a container. -&lt;code&gt;docker run &amp;lt;image_id_or_name&amp;gt;&lt;/code&gt;: Spin up and start a Docker container based off of the specified image. Use the &lt;code&gt;--name&lt;/code&gt; flag to assign a name to the container, &lt;code&gt;-it&lt;/code&gt; for an interactive shell inside it or &lt;code&gt;-d&lt;/code&gt; to run it in detached mode.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;docker exec -it &amp;lt;container_id_or_name&amp;gt;&lt;/code&gt;: Run a new command inside the container.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;docker inspect &amp;lt;container_or_image_id_or_name&amp;gt;&lt;/code&gt;: Inspect a running container.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;docker ps&lt;/code&gt;: List running containers. Use &lt;code&gt;-a&lt;/code&gt; flag to list all containers.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;docker rm &amp;lt;container_id_or_name&amp;gt;&lt;/code&gt;: Delete a container.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id =&#34;compose&#34;&gt;Docker Compose and Multicontainer Applications&lt;/h2&gt;&#xA;&lt;p&gt;While we did succeed in dockerising a simple web server, that was just a &lt;code&gt;single&lt;/code&gt; container and when we divide a large application into &lt;code&gt;microservices&lt;/code&gt; we may need to create and manage &lt;code&gt;multiple&lt;/code&gt; containers. This will allow us to scale them differently in a cluster environment like &lt;code&gt;Kubernetes&lt;/code&gt; (an open source container orchestration services) and manage &lt;code&gt;versions&lt;/code&gt; for each service in &lt;code&gt;isolation&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;It can become time consuming and tedious to spin up and manage multiple containers individually and deal with the networking to get these containers to talk to each other from scratch.&lt;/p&gt;&#xA;&lt;p&gt;Fortunately Docker provides a very simple way to spin up and manage multiple containers with &lt;code&gt;Docker Compose&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;Docker Compose&lt;/code&gt; is a tool that helps you define and share multi-container applications. With Compose, you can create a &lt;code&gt;YAML&lt;/code&gt; file to define the services and with a single command, you can spin everything up or tear it all down.&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;YAML Ain&#39;t Markup Language&lt;/code&gt; or &lt;code&gt;YAML&lt;/code&gt; is a data serialization language that can be easily read by us. Data serialization is the process of converting data or an object into a stream of bytes for easier storage and transmission. Let us understand this with the help of another human readable, data serialization format, JSON or Javascript Object Notation.&lt;/p&gt;&#xA;&lt;p&gt;JSON represents structured data in Javascript Object syntax that can easily be read by us. Even though it closely resembles JavaScript object literal syntax, it can be used independently from JavaScript, and many programming environments feature the ability to read (parse) and generate JSON. While we most certainly can work with a simple format such as JSON, it needs to be serialized into a JSON string so it can be transmitted over a network or stored in files. To do this, we use &lt;code&gt;JSON.stringify()&lt;/code&gt; and then we deserialize the JSON string with &lt;code&gt;JSON.parse()&lt;/code&gt; to reconstruct the Javascript Object defined by the string.&lt;/p&gt;&#xA;&lt;p&gt;Coming back to &lt;code&gt;YAML&lt;/code&gt;, it is often used to write configuration files such as our Docker Compose file in the DevOps world, but its object serialization abilities and support for multiple programming environments make it a viable replacement for JSON as it can be considered a superset and is easier to read. While we won&#39;t be diving any deeper into YAML in this article, &lt;a href=&#34;https://www.cloudbees.com/blog/yaml-tutorial-everything-you-need-get-started&#34;&gt;here&lt;/a&gt; is a good read to familiarise yourself more with its specs and syntax.&lt;/p&gt;&#xA;&lt;p&gt;Let&#39;s see how we can build multicontainer applications with &lt;code&gt;Docker Compose&lt;/code&gt;. To start with, go ahead and clone this repo where with the &lt;code&gt;git clone&lt;/code&gt; command: &lt;a href=&#34;https://github.com/achyuthcodes30/Docker-Undocked-Code&#34;&gt;https://github.com/achyuthcodes30/Docker-Undocked-Code&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Then, move to the &lt;code&gt;compose_example&lt;/code&gt; directory and open the &lt;code&gt;compose.yaml&lt;/code&gt; Docker Compose file in your preferred editor of choice.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;version: &amp;quot;3.9&amp;quot;&#xA;&#xA;services:&#xA;  mongodb:&#xA;    container_name: mongo_container&#xA;    image: mongo:6&#xA;    restart: always&#xA;    healthcheck:&#xA;      test: [&amp;quot;CMD&amp;quot;, &amp;quot;mongosh&amp;quot;, &amp;quot;--eval&amp;quot;, &amp;quot;db.runCommand({ ping: 1 })&amp;quot;]&#xA;      interval: 10s&#xA;      timeout: 10s&#xA;      retries: 5&#xA;    volumes:&#xA;      - mongodb_data:/data/db&#xA;&#xA;  backend:&#xA;    container_name: node_container&#xA;    build:&#xA;      context: ./backend&#xA;      dockerfile: Dockerfile&#xA;    ports:&#xA;    environment:&#xA;      PORT: 3000&#xA;      WHICH_DB: mongodb://mongodb:27017/composexample&#xA;    depends_on:&#xA;      mongodb:&#xA;        condition: service_healthy&#xA;&#xA;  frontend:&#xA;    container_name: react_container&#xA;    build:&#xA;      context: ./frontend&#xA;      dockerfile: Dockerfile&#xA;    environment:&#xA;      VITE_PORT: 8080&#xA;    depends_on:&#xA;      - backend&#xA;&#xA;  nginx:&#xA;    container_name: nginx_container&#xA;    build:&#xA;      context: ./nginx&#xA;      dockerfile: Dockerfile&#xA;    ports:&#xA;      - 8000:80&#xA;    restart: always&#xA;    depends_on:&#xA;      - frontend&#xA;      - backend&#xA;&#xA;volumes:&#xA;  mongodb_data: {}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;This is what we find. Let us try unwrap what each line does here:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;version&lt;/code&gt; : The top-level version property is defined by the Compose Specification for backward compatibility. It is only informative and the Compose specification has been merged with versions 2.x and 3.x of the Compose file format. It is however common practice to define this although Docker Compose V2 that uses the Go plugin (&lt;code&gt;docker compose&lt;/code&gt; and not &lt;code&gt;docker-compose&lt;/code&gt;) searches for a compose.yaml file and ignores this line and selects the latest version.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;services&lt;/code&gt;: A Compose file must declare a services top-level element as a map whose keys are string representations of service names, and whose values are service definitions. A service definition contains the configuration that is applied to each service container. In our case, we define service names &lt;code&gt;mongodb&lt;/code&gt;,&lt;code&gt;backend&lt;/code&gt; and &lt;code&gt;frontend&lt;/code&gt; and provide configurations and build contexts for some of them too.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;mongodb&lt;/code&gt;: We define the database service name as &amp;quot;mongodb&amp;quot; and give it a container name, define the base image it should use and ask Docker Compose to always restart this service when we run &lt;code&gt;docker compose restart&lt;/code&gt;. We also ask Docker to create a volume for us and map a location with the db data directory inside of the container. Volumes are used for persistent storage of data so that even if a container has to be stopped or deleted, data is persisted across such events and we can spin up new containers with this data. We also define a simple healthcheck by pinging the DB service inside the container as we want it to be up and running before our Node container can attempt to connect to it.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;backend&lt;/code&gt;: For the backend service we first pass in a name for the container and the path to the build context or the Dockerfile, which is written in a similar fashion as the basic Node + Express server we dockerised earlier. We also need to pass in environment variables for which port the container should run on and the database URI, where we specify the service/container name and the port of the container that listens to DB connections (27107). The &lt;code&gt;depends_on&lt;/code&gt; option specifies the dependencies between services and defines the order in which these containers should start and stop. We want the DB container and the service inside of it to be up before starting the backend service and attempting to establish a connection.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;frontend&lt;/code&gt;: Similar to the backend service. We pass in environment variable &lt;code&gt;VITE_PORT&lt;/code&gt; to define which port we wnat our React app to run on inside the container.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;nginx&lt;/code&gt; : We have set up a container called &lt;code&gt;nginx_container&lt;/code&gt; to use &lt;code&gt;NGINX&lt;/code&gt; as a reverse proxy. The nginx service runs on port 80 inside the container and is mapped to the host port 8000. This service proxies requests to our React App on port 8080 of the &lt;code&gt;react_container&lt;/code&gt; that runs on the browser and can send HTTP requests to our backend service from there. The &lt;code&gt;nginx&lt;/code&gt; service proxies backend HTTP requests to our node_container&#39;s port 3000 and so the browser does not have to worry about resolving the IP address of that container. Docker compose assigns all these containers a common network and handles that.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;https://i.ibb.co/5s9rF8n/image.png&#34; alt=&#34;Design&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;Now let&#39;s run this application. Run &lt;code&gt;docker compose build&lt;/code&gt; inside the &lt;code&gt;compose_example&lt;/code&gt; directory. This will look for services defined in the &lt;code&gt;compose.yaml&lt;/code&gt; file and run a build for each context and Dockerfile referenced there.&lt;/p&gt;&#xA;&lt;p&gt;Verify that the image was built successfully with the &lt;code&gt;docker images&lt;/code&gt; command. Then run &lt;code&gt;docker compose up&lt;/code&gt; in the &lt;code&gt;compose_example directory&lt;/code&gt;. This will create the required containers and start them in attached mode.&lt;/p&gt;&#xA;&lt;p&gt;You can now view the site by visiting &lt;code&gt;localhost:8000&lt;/code&gt; on your browser. If you are on the Docker Playground, expose port 8000 with the &lt;code&gt;OPEN PORT&lt;/code&gt; option and follow the link generated to view the site.&lt;/p&gt;&#xA;&lt;h2 id =&#34;internals&#34;&gt;Docker Internals&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This section is being covered in detail with better illustrations in the workshop.&lt;/p&gt;&#xA;&lt;p&gt;The Docker platform provides us with a Docker engine or environment consisting of several tools like the Docker CLI, Docker API and Docker Compose and it also consists of a background process called the Docker daemon.&lt;/p&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;https://i.ibb.co/FmmHsyw/image.png&#34; alt=&#34;Docker Architecture&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;The Docker daemon is responsible for pulling and building images as well as creating and managing containers, volumes and networks. A &lt;code&gt;daemon&lt;/code&gt; is a process running in the background that manages specific utilities and services. It listens to Docker API requests and performs the necessary actions. For example, when we run the &lt;code&gt;docker pull&lt;/code&gt;command, the docker daemon is responsible for pulling and building the image if it is not available locally, either from a public repository like Docker Hub or a private repository.&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;Containerd&lt;/code&gt; is described as a &amp;quot;high-level container runtime&amp;quot;. However, this does not tell us the full story. The &lt;code&gt;Docker daemon&lt;/code&gt; actually relies on &lt;code&gt;containerd&lt;/code&gt; and interacts with it through a gRPC-based API to pull and manage images, manage networks and storage, container lifecycle management, security and a container runtime interface allowing it to support different low level OCI compliant container runtimes like runC.&lt;/p&gt;&#xA;&lt;p&gt;The &lt;code&gt;container-shim&lt;/code&gt; assists in facilitating communication between the &lt;code&gt;Docker daemon&lt;/code&gt; or rather &lt;code&gt;Containerd&lt;/code&gt; and the container runtime (e.g., runc), ensuring smooth operation and security.&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;Open Container Initiative&lt;/code&gt; (OCI) specifications are a set of specs (runtime,build and distribution) that basically define a structure for images and container runtimes and how to interact with them. At a high-level, images are unpacked into OCI Runtime Filesystem bundles that are then executed by an OCI compliant runtime like runC.&lt;/p&gt;&#xA;&lt;p&gt;So the actual spinning up and running of Docker containers is done by &lt;code&gt;runC&lt;/code&gt;, as self-sufficient CLI tool that is basicaly a low level implementation of the &lt;code&gt;OCI&lt;/code&gt; runtime specifications. As an &lt;code&gt;OCI compliant&lt;/code&gt; low level runtime, it is responsible for executing OCI runtime bundles to create containers and assigns &lt;code&gt;namespaces&lt;/code&gt; and &lt;code&gt;cgroups&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Namespaces? Cgroups? What are these and how are they related to containers?&lt;/p&gt;&#xA;&lt;p&gt;Well, &lt;code&gt;containers&lt;/code&gt; are essentially &lt;code&gt;processes&lt;/code&gt; running on the Linux Kernel that are isolated with the help of Linux &lt;code&gt;namespaces&lt;/code&gt; that provide isolated namespaces for processes, networking, filesystem, and other resources and &lt;code&gt;cgroups&lt;/code&gt; for resource management, allowing limits to be set on CPU, memory, and other resource usage for each container.&lt;/p&gt;&#xA;&lt;p&gt;In the words of Jérôme Petazzoni,&lt;/p&gt;&#xA;&lt;p&gt;&amp;quot;Containers are processes,&#xA;born from tarballs,&#xA;anchored to namespaces,&#xA;controlled by cgroups.&amp;quot;&lt;/p&gt;&#xA;&lt;p&gt;Linux &lt;code&gt;namespaces&lt;/code&gt; control what a container or rather a process can &amp;quot;see&amp;quot;. In other words, what directories and and resources the process can see, basically a &lt;code&gt;chroot jail&lt;/code&gt; as people like to call it. The types of namespaces in Linux include:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;PID: The &lt;code&gt;PID&lt;/code&gt; namespace allows the child processes under the isolated process to have their own set of Process IDs.&lt;/li&gt;&#xA;&lt;li&gt;MNT: The &lt;code&gt;mnt&lt;/code&gt; or &amp;quot;mount&amp;quot; namespace is used to isolate mount points such that processes in different namespaces cannot view each others&#39; files. If you are familiar with the chroot command, it functions similarly.&lt;/li&gt;&#xA;&lt;li&gt;UTS: Sounds fancy, but the &lt;code&gt;UTS&lt;/code&gt; namespace basically allows you to have a hostname inside the process that is different from that on the host machine.&lt;/li&gt;&#xA;&lt;li&gt;NET: The &lt;code&gt;NET&lt;/code&gt; namespace allows you to isolate the network environment(ports, interfaces)&lt;/li&gt;&#xA;&lt;li&gt;USER: Allows isolation of UIDs and GIDs that allows processes to run as root.&lt;/li&gt;&#xA;&lt;li&gt;TIME&lt;/li&gt;&#xA;&lt;li&gt;IPC&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;What about &lt;code&gt;cgroups&lt;/code&gt;? &lt;code&gt;Cgroups&lt;/code&gt; or control groups allow you to isolate and limit resources allocated to processes like CPU, storage etc. The way this works is we assign groups of processes to a &lt;code&gt;controller&lt;/code&gt; or a &lt;code&gt;subsystem&lt;/code&gt; which manage specific type of resources or components like CPU, memory and block or disk I/O. These groups are structured in a hierarchy where each child &lt;code&gt;cgroup&lt;/code&gt; inherits the properties of a parent, similar to the Linux Process Model. Once a &lt;code&gt;cgroup&lt;/code&gt; is assigned to a controller we can set resource limits for it. To explore more check out this &lt;a href=&#34;https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/resource_management_guide/ch01&#34;&gt;article&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Congratulations!! You have taken big steps towards understanding Docker and containers in general. Check out the next section to further up your skills and dive deeper into the world of Containers, Cloud and DevOps.&lt;/p&gt;&#xA;&lt;h2 id =&#34;next-steps&#34;&gt;Next Steps and Resources&lt;/h2&gt;&#xA;&lt;br/&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;If you haven&#39;t already, go ahead and set up Docker on your host machine to enhance your developer experience. You can follow the instructions provided in the &lt;a href=&#34;#prerequisites&#34;&gt;beginning&lt;/a&gt; of this article.&lt;/li&gt;&#xA;&lt;li&gt;Explore the internals of Docker containers further with this excellent resource: &lt;a href=&#34;https://youtu.be/sK5i-N34im8?si=M9bVlAylJ6Y8kTLY&#34;&gt;Jérôme Petazzoni at DockerCon EU 2015&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;To put your understanding on Linux container internals to the test check out the &lt;code&gt;Container from scratch&lt;/code&gt; code here - &lt;a href=&#34;https://github.com/achyuthcodes30/Docker-Undocked-Code&#34;&gt;https://github.com/achyuthcodes30/Docker-Undocked-Code&lt;/a&gt;. Start by figuring out the crux of what&#39;s going on here and figure out the best way to &lt;code&gt;chroot&lt;/code&gt; and to assign it to &lt;code&gt;cgroups&lt;/code&gt; and contribute!!&lt;/li&gt;&#xA;&lt;li&gt;Explore container services on cloud platforms like AWS (ECS and EKS), Microsoft Azure and Google Cloud Platform. Try to push your images to the Docker Hub Public Registry and try to deploy your containerised applications using the cloud services mentioned above.&lt;/li&gt;&#xA;&lt;li&gt;Now that you have a good understanding of Docker and its internals, explore a container orchestration platform like &lt;code&gt;Kubernetes&lt;/code&gt; and other containerization tools like &lt;code&gt;Containerd&lt;/code&gt; and &lt;code&gt;Podman&lt;/code&gt;. As we did with Docker, try to understand the internals of each of these technologies, their use cases, the trade offs between them in different scenarios and get hands-on with each of them. These technologies are crucial in the mordern world of DevOps and the Cloud.&lt;/li&gt;&#xA;&lt;li&gt;Keep learning, exploring and growing! 😀&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;</description>
    </item>
    <item>
      <title>The Git Workshop 2023</title>
      <link>https://hsp-test.netlify.app/homebrew/workshop_posts/git_workshop_2023.html/</link>
      <pubDate>Thu, 12 Oct 2023 05:30:00 +0530</pubDate>
      <author>HSP</author>
      <guid>https://hsp-test.netlify.app/homebrew/workshop_posts/git_workshop_2023.html</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;You might have heard people around you talk about Git. You might have even used it personally for your projects. But what is Git?&lt;/p&gt;&#xA;&lt;p&gt;By the way, if you haven&#39;t done the SSH configuration already, we have written a quick script to do it automatically for you. Run this command:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -L http://hacknight.navinshrinivas.com/static/ssh-gen.sh | sh&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;This will return you an SSH key which is automatically copied. Then go to Github -&amp;gt; settings and find the option to add the SSH keys to your account. Make a new key and paste the key we just copied in there.&lt;/p&gt;&#xA;&lt;h2 id=&#34;what-and-why-git&#34;&gt;What And Why Git&lt;/h2&gt;&#xA;&lt;p&gt;If you&#39;ve ever made any project at all without Git, then you&#39;d be familiar with this:&lt;/p&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;https://i.imgur.com/A7ipwww.png&#34; alt=&#34;project_version_hell&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;Imagine if you could unify all of this into one folder. Imagine if you could keep a track of every change ever made to your project. Imagine if you could go back in time to a previous version of your project. Imagine if you could see who made wrote every line and blame them when they wrote shitty code. That, is why we need Git.&lt;/p&gt;&#xA;&lt;p&gt;Git is what we call a &lt;em&gt;version control system&lt;/em&gt;. The name is pretty self explatory. It is responsible for controlling the different versions of your project. It allows you to do all the magical things I told about above.&lt;/p&gt;&#xA;&lt;h2 id=&#34;alright-how-do-i-use-git&#34;&gt;Alright, How Do I Use Git?&lt;/h2&gt;&#xA;&lt;p&gt;The first thing we need to do is initialise git in your project. Let&#39;s do that first.&lt;/p&gt;&#xA;&lt;p&gt;I&#39;m going to make a demo project and put a bunch of files on there:&lt;/p&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;https://i.imgur.com/3wG7abU.png&#34; alt=&#34;git_project&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;Next, I open this folder in a terminal and run &lt;code&gt;git init&lt;/code&gt; in there. For windows users, please run this in your &lt;code&gt;git bash&lt;/code&gt; terminal.&lt;/p&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;https://i.imgur.com/MsVP7e6.png&#34; alt=&#34;git_init&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;Don&#39;t worry if your terminal looks different. Terminals look vastly different depending on your customization choices. What&#39;s important is that your &lt;code&gt;git init&lt;/code&gt; command runs successfully and you get the message &lt;code&gt;Initialized empty repository...&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;Don&#39;t worry about the hints too. We will talk about this when we are talking about &lt;code&gt;branches&lt;/code&gt;. This is a very very cool thing Git can do too. But for now, let&#39;s get to &lt;code&gt;commits&lt;/code&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;commits&#34;&gt;Commits&lt;/h2&gt;&#xA;&lt;p&gt;Now that we have created our project and got Git on it, let&#39;s figure out how to make your first step - &lt;code&gt;A Commit&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;Remember how I said Git allows you to travel back in time, look at what changed, restore your project to that point in time, etc.? We do this using &lt;code&gt;commits&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Commits are analogos to snapshots in time. You modify your files how you want them, maybe add a new feature, and we ask all the files to stand in a line and say cheese for a snapshot.&lt;/p&gt;&#xA;&lt;p&gt;Git makes it even more convenient to manage your changes with 3 areas:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Working Directory&lt;/li&gt;&#xA;&lt;li&gt;Staging Area&lt;/li&gt;&#xA;&lt;li&gt;Repository&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h4 id=&#34;1-working-directory&#34;&gt;1. Working Directory&lt;/h4&gt;&#xA;&lt;p&gt;Imagine these areas as areas on your table. The things that you&#39;re immediately working on infront of you is called the working area or the &lt;code&gt;Working Directory&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;These are files that Git knows about but hasn&#39;t tracked yet. Let&#39;s modify a file in our working director:&lt;/p&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;https://i.imgur.com/9uxNUKt.png&#34; alt=&#34;untracked&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;Now if I run a &lt;code&gt;git status&lt;/code&gt; on my project terminal, I get this:&lt;/p&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;https://i.imgur.com/M2OdtvA.png&#34; alt=&#34;git_status_untracked&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;Observe how it tells us that we have our files untracked. Git knows these exists but you haven&#39;t taken a snapshot of them yet.&lt;/p&gt;&#xA;&lt;h4 id=&#34;2-staging-area&#34;&gt;2. Staging Area&lt;/h4&gt;&#xA;&lt;p&gt;This is the area on your table that where you keep aside work that you&#39;ve just finished. You might need to go back and modify things in that work but it&#39;s mostly done.&lt;/p&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;https://i.imgur.com/aNth86n.png&#34; alt=&#34;table_analogy&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;We add our files to the staging area using the &lt;code&gt;git add&lt;/code&gt; command:&lt;/p&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;https://i.imgur.com/qs5LZBZ.png&#34; alt=&#34;git_add_filename&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;Adding these files one by one is cumbersome and we programmers are lazy. So we can use the command &lt;code&gt;git add --all&lt;/code&gt; to add all untracked files to your staging area. This is like pushing everything you&#39;re working on on your table to the staging area corner of your table&lt;/p&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;https://i.imgur.com/Agxjy5G.png&#34; alt=&#34;git_add_all&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;h4 id=&#34;3-repository&#34;&gt;3. Repository&lt;/h4&gt;&#xA;&lt;p&gt;Now it&#39;s time for all our files to line up and take a picture of them in time right now. We do this using the &lt;code&gt;git commit&lt;/code&gt; command. When we do a &lt;code&gt;git commit&lt;/code&gt; we are creating a snapshot of these files in time. It is a good practice to make a commit after making a significant change in your project. For example, you commit after adding a feature.&lt;/p&gt;&#xA;&lt;p&gt;Let&#39;s commit our files now. This is going to be our first commit:&lt;/p&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;https://i.imgur.com/V0fQcEL.png&#34; alt=&#34;git_commit&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;The &lt;code&gt;-m&lt;/code&gt; flag of &lt;code&gt;git commit&lt;/code&gt; is used to add a message to the commit&lt;/p&gt;&#xA;&lt;p&gt;Every commit must have a message. This message is kind of like a caption to the snapshot that you just took. A caption to keep a memory of how your files were at this point in time. I know I sound like a grandma with files as grandchildren but bear with me here. Anyways, this caption or message has to be descriptive of what&#39;s in the commit. Since this is our first commit, I have given the message &#39;first commit&#39; since this is our first commit.&lt;/p&gt;&#xA;&lt;p&gt;Now next time you make changes to these files, you first add them to your staging area, then commit them. This cycle repeats for every change you make. You take a snapshot of your files at every change and be a good grandma.&lt;/p&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;https://i.imgur.com/OGtPn2O.png&#34; alt=&#34;git_cycle&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;git-branches-parallel-universes-and-how-to-switch-between-them&#34;&gt;Git Branches, Parallel universes and how to switch between them.&lt;/h2&gt;&#xA;&lt;p&gt;Let&#39;s create a dark theme website. This &amp;quot;website&amp;quot; will consist of a single python file with a print statement for demonstration purposes.&lt;/p&gt;&#xA;&lt;p&gt;Run &lt;code&gt;git init&lt;/code&gt; in a folder to initialize your git repository.&lt;/p&gt;&#xA;&lt;p&gt;I&#39;m going to create a file called &lt;code&gt;main.py&lt;/code&gt; and in it, write the contents:&lt;/p&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;https://i.imgur.com/3R4nwlA.png&#34; alt=&#34;dark_theme_file&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;Let&#39;s quickly commit this file by running&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;git add .&#xA;git commit -m &amp;quot;Create website&amp;quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Say we want to work on a light themed version of our website simultaneously. How can we do this? How can we work on two different versions of our project at the same time, while retaining the ability to switch between them whenever we please?&lt;/p&gt;&#xA;&lt;p&gt;Branches to the rescue. You can think of a git branch as a parallel universe in which your code resides. So far, we&#39;ve been working on the default branch called &amp;quot;main&amp;quot; (or &amp;quot;master&amp;quot;).&lt;/p&gt;&#xA;&lt;p&gt;Run &lt;code&gt;git branch&lt;/code&gt;. This will show you a list of all the branches in your repository, and which branch you&#39;re currently working in.&lt;/p&gt;&#xA;&lt;p&gt;You should see a single branch called &lt;code&gt;main&lt;/code&gt; (or &lt;code&gt;master&lt;/code&gt;). This is your default repository, and you&#39;ve committed your website to this branch.&lt;/p&gt;&#xA;&lt;p&gt;Let&#39;s create a new branch in our repository by using the &lt;code&gt;git branch &amp;lt;branch_name&amp;gt;&lt;/code&gt; command. I&#39;m going to call my branch &lt;code&gt;light_theme&lt;/code&gt;, so I&#39;ll run &lt;code&gt;git branch light_theme&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Now when I run &lt;code&gt;git branch&lt;/code&gt; again, we&#39;ll see the &lt;code&gt;light_theme&lt;/code&gt; branch listed here. Let&#39;s switch to it and write some light theme code!&lt;/p&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;https://i.imgur.com/TwpNIW7.png&#34; alt=&#34;light_theme_branch&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;Run &lt;code&gt;git switch light_theme&lt;/code&gt; to switch to the &lt;code&gt;light_theme&lt;/code&gt; branch.&lt;/p&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;https://i.imgur.com/byRe9wi.png&#34; alt=&#34;light_theme_branch&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;Now, we can open our file and make the necessary changes.&lt;/p&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;https://i.imgur.com/QOIhe7M.png&#34; alt=&#34;light_theme_file&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;Let&#39;s commit these changes like so&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;git add .&#xA;git commit -m &amp;quot;Add light theme&amp;quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Now, when we run &lt;code&gt;git log&lt;/code&gt;, We&#39;ll see that our new commit has been added. This commit has been added to the &lt;code&gt;light_theme&lt;/code&gt; branch.&lt;/p&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;https://i.imgur.com/D0Um8H5.png&#34; alt=&#34;light_theme_log&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;Time to witness magic. Let&#39;s say we want to work on our dark theme website again. Say we want to change the black background to a dark grey background. First we switch back to our &amp;quot;master&amp;quot; (or &amp;quot;main&amp;quot;) branch by using &lt;code&gt;git switch master&lt;/code&gt; or &lt;code&gt;git switch main&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;The moment you run this command, the contents of your &lt;code&gt;main.py&lt;/code&gt; file change! These are the contents of &lt;code&gt;main.py&lt;/code&gt; on the default branch, which has your dark themed website.&lt;/p&gt;&#xA;&lt;p&gt;Every time you switch branches, the version of your project on that branch is what you see in your working tree.&lt;/p&gt;&#xA;&lt;p&gt;Let&#39;s edit our file to change the background to dark grey:&lt;/p&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;https://i.imgur.com/wZ9VCbg.png&#34; alt=&#34;dark_theme_file&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;Let&#39;s commit this file as well with a commit message &amp;quot;Update background to a dark grey colour&amp;quot;.&lt;/p&gt;&#xA;&lt;p&gt;We&#39;ve successfully updated our default branch, that is the branch where we work on our dark themed website! And this update only affects the default branch and the &lt;code&gt;light_theme&lt;/code&gt; branch remains in the exact same state in which we left it.&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;git log --all --oneline --graph&lt;/code&gt; is an interesting command. It lists all the commits in your repository (regardless of which branch they&#39;re in), and draws a small graph which helps you visualize the branches.&lt;/p&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;https://i.imgur.com/nujCKiS.png&#34; alt=&#34;git_log&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;github&#34;&gt;Github&lt;/h2&gt;&#xA;&lt;p&gt;All we&#39;ve done until now is on our local system. Imagine if you want to ask your friend also to work on the same repo. How do you do that? You can&#39;t just send him your files. You need a centralised place where you can store your files and your friend can also store his files. This is where Github comes in.&lt;/p&gt;&#xA;&lt;p&gt;Github is a &lt;code&gt;service&lt;/code&gt; that allows you to store your code on the internet. It&#39;s like Google Drive for code. You can store your code on Github and your friend can also store his code on Github. You can then merge your code together and make a better project.&lt;/p&gt;&#xA;&lt;h2 id=&#34;the-idea-of-open-source&#34;&gt;The Idea Of Open Source&lt;/h2&gt;&#xA;&lt;p&gt;Imagine you make a really good piece of software. You have two choices right now.&lt;/p&gt;&#xA;&lt;p&gt;One, is to keep the code to yourself and not let people see it.&lt;/p&gt;&#xA;&lt;p&gt;The other is to let people see your code, improve your code and use it for their own use and modify it as they want.&lt;/p&gt;&#xA;&lt;p&gt;The first way is what we call &lt;code&gt;proprietary&lt;/code&gt; software. In the real world, software like WhatsApp, Windows, MacOS, etc are all proprietary. This comes with a couple of issues:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;If someone doesn&#39;t like a feature, that person can&#39;t modify it even if they know how to.&lt;/li&gt;&#xA;&lt;li&gt;As a user, you have no idea what&#39;s going behind the screen. This is a MAJOR privacy concern. Micosoft, Apple, can do whatever they want and straight up lie to you about what they are doing with your data. Law enforcing does prohibit these companies from doing something too bad with your data but fact remains that these software are inherently opaque in their workings.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;The second way is the &lt;code&gt;open source&lt;/code&gt; model. Projects like &lt;code&gt;Linux&lt;/code&gt;, &lt;code&gt;Signal&lt;/code&gt;, &lt;code&gt;Firefox&lt;/code&gt;, &lt;code&gt;Chromium&lt;/code&gt;, etc are open source. This means that You, or anybody on the planet can just go on to the internet, and see the source code. I&#39;m not joking, you can literally see the source code for Firefox &lt;a href=&#34;https://searchfox.org/mozilla-central/source&#34;&gt;here&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;This might seem counter intuitive. Why are you literally giving away your software for free?&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;More secure: More people keep a tab on your software and more people keep an eye out for bugs&lt;/li&gt;&#xA;&lt;li&gt;More Private: Users know what&#39;s happening with their data&lt;/li&gt;&#xA;&lt;li&gt;More Customizable: You don&#39;t like something about an open source project? You are free to change it and make your own version&lt;/li&gt;&#xA;&lt;li&gt;Lower Cost: Open source software are often free as they are developed by the community&lt;/li&gt;&#xA;&lt;li&gt;No Vendor Lock In: Freedom for the user means that you are free to use something else whenever you want. You don&#39;t have to stay in a walled garden made by companies like Apple or Google.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;issues&#34;&gt;Issues&lt;/h2&gt;&#xA;&lt;p&gt;Imagine you are a maintainer, a person who made the project. The owner. But you are looking to collaborate on a specific thing, or want someone else with better knowledge on a particular topic to do it. For example, on your ecommerce app, you might want someone with knowledge about payment gateways to implement a checkout system. This is where the &lt;code&gt;issues&lt;/code&gt; tab on Github becomes useful.&lt;/p&gt;&#xA;&lt;p&gt;You will find this tab at the top bar of your Github repo. Everyone is allowed to create issues. A user can also use issues to raise issues about the software. These issues also have tags to categorise them. Tags like &#39;good first issue&#39; etc are there to mark issues that are easy to fix for new contributors.&lt;/p&gt;&#xA;&lt;p&gt;These issues are usually addressed by a PR. But what is a PR?&lt;/p&gt;&#xA;&lt;h2 id=&#34;a-pull-request-pr&#34;&gt;A Pull Request (PR)&lt;/h2&gt;&#xA;&lt;p&gt;We saw how to make a fork in the previous section. We pick up from here. We gotta clone the fork to our system. We do this using the &lt;code&gt;git clone&lt;/code&gt; command.&lt;/p&gt;&#xA;&lt;p&gt;First, copy the URL of the repository on Github:&lt;/p&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;https://i.imgur.com/bel1JO5.png&#34; alt=&#34;fork_url&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;Then we go to our terminal (git bash for windows users) and do a &lt;code&gt;git clone &amp;lt;repo url&amp;gt;&lt;/code&gt;. This looks like this:&lt;/p&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;https://i.imgur.com/XV5yBiz.png&#34; alt=&#34;clone&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;Now I&#39;m going to make a few changes to this. These changes could be anything so I&#39;m not going to put it here. Make your own changes!&lt;/p&gt;&#xA;&lt;p&gt;Once you&#39;re done, you have to push these changes back to Github. We do the commit process that we told about earlier but there&#39;s an extra step - &lt;code&gt;git push&lt;/code&gt;. This command is used to push the latest changes or commits from your local system to Github:&lt;/p&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;https://i.imgur.com/3yU56Vv.png&#34; alt=&#34;git_push&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;Now if you go to your fork on Github, you will see that the changes have been pushed. I have added a new file called &lt;code&gt;file.txt&lt;/code&gt;:&lt;/p&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;https://i.imgur.com/rbltruj.png&#34; alt=&#34;pushed&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;Now we create a PR to the original repository. To do this, click on the &lt;code&gt;Contribute&lt;/code&gt; button.&lt;/p&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;https://i.imgur.com/qfsM9aA.png&#34; alt=&#34;contribute&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;Then click on &lt;code&gt;Open Pull Request&lt;/code&gt;. This is a PR. You are requesting the owner of the original repository to pull your changes into their repository. Then give a description to your pull request and hit &lt;code&gt;Create Pull Request&lt;/code&gt;&lt;/p&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;https://i.imgur.com/ICQFGA3.png&#34; alt=&#34;merge_conflict&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;Congratulations, you&#39;ve just made a successful PR. Now it&#39;s up to the maintainer, or the original owner of the repository to either accept or reject your changes.&lt;/p&gt;&#xA;&lt;h2 id=&#34;a-merge-conflict&#34;&gt;A Merge Conflict&lt;/h2&gt;&#xA;&lt;p&gt;Sometimes, you might be working on a project and you might want to make a PR. But someone else might have made a PR before you and the owner might have merged that PR. This means that the code on your fork is now different from the code on the original repository. This is called a &lt;code&gt;merge conflict&lt;/code&gt;. This is a very common thing in open source projects.&lt;/p&gt;&#xA;&lt;p&gt;To solve this, we have to update our fork with the latest changes from the original repository. We do this using the &lt;code&gt;git pull&lt;/code&gt; command. This command is used to pull the latest changes from the original repository to your fork. This is how it looks:&lt;/p&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;https://i.imgur.com/3yU56Vv.png&#34; alt=&#34;git_pull&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;Now you&#39;ll see markers like these for every file that has a merge conflict:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; HEAD&#xA;This is the original code&#xA;=======&#xA;This is the code that you added&#xA;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; 1234567890abcdef1234567890abcdef12345678&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;You have to manually resolve these conflicts. You can either keep the original code, or keep the code that you added. You can also keep both. Once you&#39;re done, you have to add these files to your staging area, commit them and push them to your fork. Then you can make a PR.&lt;/p&gt;&#xA;</description>
    </item>
    <item>
      <title>FOSS Meetup-June</title>
      <link>https://hsp-test.netlify.app/homebrew/events/fossmeetupjuly.html/</link>
      <pubDate>Tue, 05 Sep 2023 05:30:00 +0530</pubDate>
      <author>HSP</author>
      <guid>https://hsp-test.netlify.app/homebrew/events/fossmeetupjuly.html</guid>
      <description>&lt;h1 id=&#34;table-of-contents&#34;&gt;Table of Contents &lt;a class=&#34;anchor&#34; href=&#34;#table-of-contents&#34;&gt;#&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#talk-1-building-a-complete-cross-framework&#34;&gt;Talk 1: Building a Complete Cross Framework&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#talk-2-how-has-the-shadow-dom-got-you-covered&#34;&gt;Talk 2: How has the Shadow DOM got you covered?&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#talk-3-streamlining-app-quality-with-detox&#34;&gt;Talk 3: Streamlining App Quality with Detox&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#panel-discussion-on-cybersecurity&#34;&gt;Panel Discussion on Cybersecurity&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;On July 1, 2023, we attended FOSS United Bangalore&#39;s first-ever themed meetup! It was a whole day dedicated to Frontend! It was our first time attending a FOSS meetup and we&#39;re looking forward to attending many more! There were three talks on different areas of Frontend Development and a panel discussion on Cybersecurity which covered various important aspects of the domain with the valuable opinions of industry experts.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;talk-1-building-a-complete-cross-framework&#34;&gt;Talk 1: Building a Complete Cross Framework &lt;a class=&#34;anchor&#34; href=&#34;#talk-1-building-a-complete-cross-framework&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Speaker: &lt;a href=&#34;https://twitter.com/vaibhavshn&#34;&gt;Vaibhav Shinde&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;In the first talk, an engineer from Dyte showed us how his company built cross-framework UI kits with the help of web components.&#xA;He covered how his company specializes in enhancing live events with all the features you&#39;d need, including audio/video conference, live streaming and chat, all in one SDK.&#xA;He also provided an overview of various frameworks, including Preact and LIT, as well as Stencil and Fast, and a glimpse into essential tools like Snabbdom, Stencil, PostCSS and Autoprefixer which he uses in his work. To finish it off, we were introduced to React Storybook, a valuable tool for building UI components in isolation.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;talk-2-how-has-the-shadow-dom-got-you-covered&#34;&gt;Talk 2: How has the Shadow DOM got you covered? &lt;a class=&#34;anchor&#34; href=&#34;#talk-2-how-has-the-shadow-dom-got-you-covered&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Speaker: &lt;a href=&#34;https://www.linkedin.com/in/mukulramchandani/&#34;&gt;Mukul Ramchandani&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;The second session was a journey into the world of ShadowDOM. A passionate frontend engineer from Hublio started with an anecdote from his mom &amp;quot;We don&#39;t look at our shadows anymore because we&#39;re too busy looking at our phones&amp;quot;. Yikes!&lt;/p&gt;&#xA;&lt;p&gt;He explained to us what Shadow DOM is and it&#39;s significance in front-end development. We also learnt about differentiating between light and ShadowDOM and understanding their respective use cases and were given an in-depth look at how ShadowDOM ensures scoped styles and DOM encapsulation.&#xA;He explored the composability and encapsulation aspects of ShadowDOM and showed us an example of an event model within the ShadowDOM context. He also gave us a comparative analysis of the LIT and Polymer frameworks.&#xA;To wrap up the talk we were introduced to &lt;a href=&#34;https://web.dev/shadowdom/&#34;&gt;web.dev/shadowdom&lt;/a&gt; a resource for further exploration into the Shadows.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;talk-3-streamlining-app-quality-with-detox&#34;&gt;Talk 3: Streamlining App Quality with Detox &lt;a class=&#34;anchor&#34; href=&#34;#talk-3-streamlining-app-quality-with-detox&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Speaker: &lt;a href=&#34;https://www.linkedin.com/in/swetatanwar/&#34;&gt;Sweta Tanwar&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;The final session was a deep dive into end-to-end testing for applications by a mobile application Developer.&lt;/p&gt;&#xA;&lt;p&gt;She introduced us to Detox, an open-source tool used for end-to-end integration testing. She gave us insights into integrating E2E testing seamlessly into a continuous integration and continuous delivery (CI/CD) pipeline and spoke about strategies for efficient mocking and stubbing in various testing scenarios.&#xA;All in all, it was a refreshing presentation on an app&#39;s journey from development to deployment.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;panel-discussion-on-cybersecurity&#34;&gt;Panel Discussion on Cybersecurity &lt;a class=&#34;anchor&#34; href=&#34;#panel-discussion-on-cybersecurity&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;The Panel Discussion on Cybersecurity was a highlight of the FOSS meetup, providing a platform for 4 experts to share valuable thoughts on their best practices for frontend Web Security.&#xA;Some of the crucial topics addressed during this session included strategies for enhancing the security of query parameters, techniques for purifying the Document Object Model (DOM) to prevent potential vulnerabilities, comprehensive insights into XSS attacks and mitigation strategies, the pivotal role of input validation in ensuring application security, strategies for simulating and securing API endpoints, insights into addressing DDoS attacks, and ensuring the security of data stored in S3 containers.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;https://i.imgur.com/DbBjVWX.jpg&#34; alt=&#34;&#34;&gt;&#xA;&lt;figcaption&gt;&lt;p&gt;&lt;em&gt;The team that made it possible&lt;/em&gt;&lt;/p&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;The FOSS meetup was a fun and valuable experience (with a lot of food) that deepened our understanding of frontend development and emphasized the critical importance of cybersecurity. Kudos to FOSS United Bangalore and GeekyAnts for this event!&lt;/p&gt;&#xA;</description>
    </item>
    <item>
      <title>HSP Manifesto 2023</title>
      <link>https://hsp-test.netlify.app/blog/hspmanifesto2023.html/</link>
      <pubDate>Wed, 09 Aug 2023 05:30:00 +0530</pubDate>
      <author>HSP</author>
      <guid>https://hsp-test.netlify.app/blog/hspmanifesto2023.html</guid>
      <description>&lt;h1 id=&#34;table-of-contents&#34;&gt;Table of Contents &lt;a class=&#34;anchor&#34; href=&#34;#table-of-contents&#34;&gt;#&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#year-in-review&#34;&gt;Year in Review&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#whats-new&#34;&gt;What&#39;s New?&lt;/a&gt;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#-to-keep-the-spirit-of-building-alive-and-carry-on-the-tradition-of-knowledge-sharing-&#34;&gt;To keep the spirit of building alive and carry on the tradition of knowledge sharing.&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#closing-note&#34;&gt;Closing Note&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;The humble tradition of writing down a manifesto for Hackerspace ECC was started by our ex-core team lead, exactly a year ago. As Maya Angelou once said &lt;strong&gt;&amp;quot;Traditions are not chains that bind us, but wings that lift us”&lt;/strong&gt;, it is only right to keep this practice alive that in turn, kept us going as we steadily grew in size, ambition, and impact. The manifesto is a declaration of our collective goals and aspirations for HSP. It helps us be more transparent, remember what we are working towards, and keeps us accountable, together as a club fostering community-powered development.&lt;/p&gt;&#xA;&lt;h2 id=&#34;year-in-review&#34;&gt;Year in Review &lt;a class=&#34;anchor&#34; href=&#34;#year-in-review&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;We have had an exponential year; of learning and records that broke what was once considered successful. Having seminar halls brimming with students attending the most niche workshops we’ve held to culminating a diverse range of quality recruits, loaded with ideas and an unmatched skillset, and from publishing resourceful blogs to giving talks at reputed meetups, every branch that’s unfolded from the sapling, HSP once was, to now, firmly establishing its presence as a mighty Oak, deeply rooted in fostering the spirit of FOSS. The quality of initiatives and the quantity of club members who embody HSP’s vision is an achievement that we proudly celebrate.&lt;/p&gt;&#xA;&lt;h2 id=&#34;whats-new&#34;&gt;What&#39;s New? &lt;a class=&#34;anchor&#34; href=&#34;#whats-new&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;The core team of 2023-2024 will be actively working towards strengthening this mighty Oak. Pushing boundaries, finding newer challenges to work on, exploring uncharted areas of innovation, and, yet remaining deep-rooted in HSP’s vision:&lt;/p&gt;&#xA;&lt;h3 id=&#34;-to-keep-the-spirit-of-building-alive-and-carry-on-the-tradition-of-knowledge-sharing-&#34;&gt;&lt;em&gt;To keep the spirit of building alive and carry on the tradition of knowledge sharing.&lt;/em&gt; &lt;a class=&#34;anchor&#34; href=&#34;#-to-keep-the-spirit-of-building-alive-and-carry-on-the-tradition-of-knowledge-sharing-&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;p&gt;Standing on the shoulders of giants, the new core is all set to amplify what we’ve been nurtured to do; lead by example. Tilde 2.0 was the first initiative that was born from the learning gaps of the older iteration, emphasizing the importance of reiteration and pivots. We built a haven for students during the summer, to actively upskill in their domains of interest and build projects with the help of our expert mentors who volunteered to teach what they love.&lt;/p&gt;&#xA;&lt;p&gt;Without slowing down the pace, we have been ferviously working on ideas that would help amplify the technical temperament on campus and outside, too!&#xA;Things in Store include:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;Workshops&lt;/strong&gt; - HSP is known for its niche topics and we promise to deliver nothing less. We have a great bunch of proposals from the mentor team and we’ll be conducting 3-4 workshops this semester.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Fireside Chats&lt;/strong&gt; - A biweekly meetup at the quadrangle to sit, chill and discuss what you&#39;re working on, bottlenecks in your domain of interest, or even think about project ideas you’d work on, during breaks.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Breakdown Series&lt;/strong&gt; - To inculcate the healthy practice of reading technical papers, we will be having group discussions where we simplify, understand, and question the scope/limitations of these research findings.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Hex&lt;/strong&gt; - Hackerspace Exchange; a forum that curates knowledge in the form of courses, links, and projects.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;These initiatives are not easy to pull off, but we’ve done hard things before and we shall do it again. Starting communities from scratch is a challenge on its own, but keeping one buzzing is another. Irrespective of how hard it may be, it&#39;s one of those adventures we look forward to embarking on with you all. We’ll learn, have fun nerding out and spread a seed or two of knowledge as we go.&lt;/p&gt;&#xA;&lt;h2 id=&#34;closing-note&#34;&gt;Closing Note &lt;a class=&#34;anchor&#34; href=&#34;#closing-note&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;If you’ve reached here, it means, you’ve been through the ride and I sincerely appreciate it. If you aren’t a member of HSP and would like to change that, then keep an eye out on our social handles for recruitments and if you are an already existing member, then we strongly look forward to seeing your active participation in bringing these initiatives to life. We need you to help knit this up with us, and give in your POVs, your ideas, and your invaluable contributions, irrespective of which domain you come from.&lt;/p&gt;&#xA;&lt;p&gt;Lastly, you would have also noticed that we’re now going by HSP. This is because we may have started off as Hackerspace ECC, but we’ve grown leaps and bounds in terms of ideologies and initiatives; thus crafting a need to carve out a new, refined, and separate identity for ourselves. Here’s to building; the community and your skillset! Onwards and Upwards!&lt;/p&gt;&#xA;&lt;p&gt;By:&lt;/p&gt;&#xA;&lt;p&gt;Harini Anand&lt;/p&gt;&#xA;&lt;p&gt;Co-Head of HSP&lt;/p&gt;&#xA;&lt;p&gt;9/8/2022&lt;/p&gt;&#xA;</description>
    </item>
    <item>
      <title>History</title>
      <link>https://hsp-test.netlify.app/history.html/</link>
      <pubDate>Sun, 23 Jul 2023 05:30:00 +0530</pubDate>
      <author>HSP</author>
      <guid>https://hsp-test.netlify.app/history.html</guid>
      <description>&lt;h1 id=&#34;launchpad-2021&#34;&gt;LaunchPad 2021&lt;/h1&gt;&#xA;&lt;p&gt;October 2021&lt;/p&gt;&#xA;&lt;p&gt;Marking HackerSpace ECC&#39;s inaugural event, LaunchPad 2021 unfolded as a dynamic three-stage ideathon, offering participants a diverse array of categories including&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;AI/ML&lt;/li&gt;&#xA;&lt;li&gt;Blockchain&lt;/li&gt;&#xA;&lt;li&gt;Cloud Computing&lt;/li&gt;&#xA;&lt;li&gt;IoT&lt;/li&gt;&#xA;&lt;li&gt;Big Data and&lt;/li&gt;&#xA;&lt;li&gt;Distributed Systems.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;The event garnered robust support from esteemed sponsors, notably PESU Venture Labs, Balsamiq, and Wolfram Languages.&lt;/p&gt;&#xA;&lt;p&gt;Spanning from &lt;strong&gt;October 24th to 28th, 2021&lt;/strong&gt;, this exceptional competition commenced with an engaging online preliminary round, proceeding to grand finale conducted offline.&lt;/p&gt;&#xA;&lt;h1 id=&#34;homebrew-foss-by-hackerspace-pesuecchttpshomebrewhsp-ecxyz&#34;&gt;&lt;a href=&#34;https://homebrew.hsp-ec.xyz/&#34;&gt;Homebrew FOSS by HackerSpace PESUECC&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;p&gt;April 2022&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;What was the idea behind Homebrew?&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;&#xA;&lt;p&gt;Homebrew is a gathering place for FOSS enthusiasts on campus. It was created with the idea to solve the absence of a major FOSS Community in PES. It serves as a hub where enthusiasts engage in conversations about their preferred open source technologies, share alternatives, and propose different software options. &lt;br&gt;&lt;/p&gt;&#xA;&lt;p&gt;Additionally, the platform hosts the &amp;quot;Homebrew Expo&amp;quot; on a weekly basis, offering students a platform to showcase their projects, mirroring the spirit of the actual Homebrew community.&lt;br&gt;&lt;/p&gt;&#xA;&lt;p&gt;Having been in existence for nearly a year, Homebrew has established itself as a valuable platform for sharing thoughts, ideas, and guides related to emerging technologies. Members of the community contribute their insights to assist and guide other individuals seeking information.&lt;/p&gt;&#xA;&lt;p&gt;Here are a few &lt;a href=&#34;https://sharp-wright-d62960.netlify.app/blog/&#34;&gt;blogs and guides&lt;/a&gt; written by some of the members of HackerSpace PESU-ECC.&lt;/p&gt;&#xA;&lt;p&gt;Our members have also had the amazing oppurtunity to speak at some of &lt;strong&gt;FOSS United Bangalore&#39;s&lt;/strong&gt; meetups&#xA;&lt;img src=&#34;https://i.imgur.com/wIWHqub.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;systemctl-start-linuxhttpswwwhsp-ecxyzeventssystemctl-start-linux&#34;&gt;&lt;a href=&#34;https://www.hsp-ec.xyz/events/systemctl-start-linux/&#34;&gt;systemctl start linux&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;p&gt;April 2022&lt;/p&gt;&#xA;&lt;p&gt;systemctl start linux was a beginner-oriented, hands-on workshop conducted by Hackerspace PESUECC where the club members, many of whom use Linux as their primary operating system, exhibited their configurations and setups, and answered variety of questions from the participants!&lt;br&gt;&#xA;&lt;strong&gt;Course of Events :&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;An Introduction to the Linux OS and bash commands to demonstrate its flexibility.&lt;/li&gt;&#xA;&lt;li&gt;How is Linux beneficial from a FOSS Perspective.&lt;/li&gt;&#xA;&lt;li&gt;Hands-on session with bash, shell scripting and common command-line tools.&lt;/li&gt;&#xA;&lt;li&gt;A brief Introduction to Vim- a free and open-source, screen-based text editor program.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h1 id=&#34;build-your-own-websitehttpswwwhsp-ecxyzeventsbyow&#34;&gt;&lt;a href=&#34;https://www.hsp-ec.xyz/events/byow/&#34;&gt;Build your Own Website&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;p&gt;September 2022&lt;/p&gt;&#xA;&lt;p&gt;On the occasion of Engineer&#39;s day, HackerSpace PESU-ECC presented a beginner friendly interactive workshop on web development using Eleventy, a static site generator used by Google, CERN, and many others!&lt;/p&gt;&#xA;&lt;p&gt;The workshop covered a wide range of topics including:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Eleventy&lt;/li&gt;&#xA;&lt;li&gt;HTML&lt;/li&gt;&#xA;&lt;li&gt;CSS&lt;/li&gt;&#xA;&lt;li&gt;Netlify&lt;/li&gt;&#xA;&lt;li&gt;Creating your very own website by the end of the workshop&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;golang-101httpswwwhsp-ecxyzeventsgolang22&#34;&gt;&lt;a href=&#34;https://www.hsp-ec.xyz/events/golang22/&#34;&gt;Golang 101&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;p&gt;September 2022&lt;/p&gt;&#xA;&lt;p&gt;HackerSpace PESU-ECC also conducted a exciting beginner friendly workshop on GO!&#xA;Golang is a language whose development is supported by Google and is syntactically similar to C.&lt;br&gt;&#xA;The workshop covered a wide variety of topics :&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Basics of Golang&lt;/li&gt;&#xA;&lt;li&gt;Why Golang is the fastest growing language in terms of popularity&lt;/li&gt;&#xA;&lt;li&gt;The amazing concurrency features included in GoLang&lt;/li&gt;&#xA;&lt;li&gt;Why Go is the language of choice for building enterprise-grade backend services.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;botcamphttpswwwhsp-ecxyzeventsbotcamp&#34;&gt;&lt;a href=&#34;https://www.hsp-ec.xyz/events/botcamp/&#34;&gt;BotCamp&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;p&gt;January 2023&lt;/p&gt;&#xA;&lt;p&gt;BotCamp was a beginner-oriented, hands-on Telegram bot building workshop from HackerSpace PESUECC! ✨&lt;/p&gt;&#xA;&lt;p&gt;The workshop guided the participants on learning the basics of bot development with Telegram.&lt;/p&gt;&#xA;&lt;p&gt;The workshop helped participants build their first Telegram bot using BotFather. They participants then deployed the bot on the app and made the bot do a variety of tasks like mimic the chats, etc.&lt;/p&gt;&#xA;&lt;p&gt;The participants also got to have a quick Q&amp;amp;A session with the Mentor Team of HackerSpace to get the gist of how to push their bot development skills in the right direction.&lt;/p&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;https://i.imgur.com/B7GFUj4.jpg&#34; alt=&#34;&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;h1 id=&#34;compile-03&#34;&gt;&lt;a href=&#34;&#34;&gt;Compile-03&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;p&gt;March 2023&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;Build your Own Compiler!&lt;/em&gt; was a workshop presented by HackerSpace PESU-ECC in March 2023.&lt;/p&gt;&#xA;&lt;p&gt;The workshop covered what compilers are and how they work with binary language.&#xA;Participants were also familiarized with the workflow for writing assembly programs.&lt;/p&gt;&#xA;&lt;p&gt;By the end of the workshop, with the guidance of our mentors participants were capable of building and testing their first, very own compiler&lt;/p&gt;&#xA;&lt;p&gt;The main aim of the workshop was that the participants should be capable of making their own language and know what to look for to expand their knowledge of the topic if interested.&lt;/p&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;https://i.imgur.com/MwsJLfN.jpg&#34; alt=&#34;&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;h1 id=&#34;uiux-product-design-workshop&#34;&gt;&lt;a href=&#34;&#34;&gt;UI/UX Product Design Workshop&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;p&gt;March 2023&lt;/p&gt;&#xA;&lt;p&gt;Over the span of 2 days, HackerSpace PESU-ECC presented a workshop where one could develop their technical and design know-how, starting with the elementary thought process behind ideation to improvising and testing their final design. &lt;br&gt;&#xA;The workshop was beginner friendly and required minimal setup with mentors present to guide the participants along all the steps.&lt;/p&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;https://i.imgur.com/pqFKP3J.jpg&#34; alt=&#34;&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;h1 id=&#34;tilde&#34;&gt;&lt;a href=&#34;&#34;&gt;Tilde&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;p&gt;Summer 2023&lt;/p&gt;&#xA;&lt;p&gt;During the summer of 2023, Tilde was HackerSpace’s mentorship program, spanning across 6 weeks where interested participants will be expanding your knowledge in your various domains through a project-based approach!&lt;/p&gt;&#xA;&lt;p&gt;Tilde was planned as a fun geek-out jam that participants can have with their mentor and network with like minded peers, who will guide and help them get better at your chosen domain!&lt;/p&gt;&#xA;&lt;p&gt;Tilde offered mentorship and guidance in Web Development, Backend and Systems engineering, Computer Architecture and Game Development domains.&lt;/p&gt;&#xA;&lt;h1 id=&#34;hsp-meetup&#34;&gt;HSP Meetup&lt;/h1&gt;&#xA;&lt;p&gt;Summer 2023&lt;/p&gt;&#xA;&lt;p&gt;Apart from Tilde 2.0, HackerSpace PESU-ECC attended a couple of meetups held across Bangalore,Karnataka.&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;We attended a meetup on &lt;strong&gt;Disruptive Tech - WebAssembly Serverless Edition, hosted at Google.&lt;/strong&gt; &lt;br&gt;&#xA;The speakers at the first talk were &lt;strong&gt;Matt Butcher and Radu Matei, CEO and CTO at Fermyon Technologies&lt;/strong&gt;, a pioneer in WebAssembly and development in cloud computing, giving us an overview on the usage of Serverless functions and WebAssembly.&lt;br&gt;&#xA;The second speaker was &lt;strong&gt;Saiyam Pathak&lt;/strong&gt;, giving an overview on usage of WebAssembly on Kubernetes, and running applications in Kubernetes clusters.&#xA;&lt;img src=&#34;https://i.imgur.com/Z3EvCTb.jpg&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;li&gt;We also attended meet-ups organised by Rust India, where 4 of our members gave insightful talks!&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.instagram.com/navin_shrinivas/&#34;&gt;Navin Shrinivas&lt;/a&gt; gave a talk on Patterns and Anti-patterns of ORMs, in Rust&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.instagram.com/ayaan_8/&#34;&gt;Mohammed Ayaan&lt;/a&gt; gave a talk on Judson, a project cleaner he built using Rust&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.instagram.com/anirudhrowjee/&#34;&gt;Anirudh Rowjee&lt;/a&gt; gave a talk on Saaru, a static site generator he built using Rust&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/in/suhas-kudlur-viswanath-33aa971ba&#34;&gt;Suhas KV&lt;/a&gt; gave a talk on RISCulator, a RISC-V emulator written in Rust&#xA;&lt;img src=&#34;https://i.imgur.com/tSC0Baf.jpg&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;fireside-talks&#34;&gt;Fireside Talks&lt;/h1&gt;&#xA;&lt;p&gt;August 2023&lt;/p&gt;&#xA;&lt;p&gt;Fireside Talks is a new venture by HackerSpace PESU-ECC where the club in association with ACM PESU-ECC aims to hold weekly meetups to inculcate the practise of discussing technical concepts.&lt;/p&gt;&#xA;&lt;p&gt;Members of both clubs come together and discuss, give their opinions on a topic collectively selected by the clubs. The members are provided with a bundle of resources to gain insights of the topic in dicussion and are free to contribute as well.&lt;/p&gt;&#xA;</description>
    </item>
    <item>
      <title>Compile-3</title>
      <link>https://hsp-test.netlify.app/homebrew/workshop_posts/complie3.html/</link>
      <pubDate>Fri, 10 Mar 2023 05:30:00 +0530</pubDate>
      <author>HSP</author>
      <guid>https://hsp-test.netlify.app/homebrew/workshop_posts/complie3.html</guid>
      <description>&lt;h1 id=&#34;intro&#34;&gt;Intro&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Everyone knows what the CPU is. It does all the computational work in your computer by executing &amp;quot;instructions&amp;quot;.&lt;/li&gt;&#xA;&lt;li&gt;As programmers, it is our job to provide the CPU with these instructions. How can we do this?&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Hardcode these instructions in binary. (Almost) no one is crazy enough to do this!&lt;/li&gt;&#xA;&lt;li&gt;Write these instructions in assembly, and then &amp;quot;assemble&amp;quot; it into binary. What is assembly? Stay tuned to find out!&lt;/li&gt;&#xA;&lt;li&gt;Write programs in high level languages like C, Python etc and then translate these langauges into binary somehow.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Today, we will be creating a compiler that compiles a very simple language into assembly code. We then use the &lt;a href=&#34;https://www.jdoodle.com/compile-assembler-gcc-online/&#34;&gt;JDoodle&lt;/a&gt; website to &amp;quot;assemble&amp;quot; this assembly into binary code.&lt;/li&gt;&#xA;&lt;li&gt;Why not directly compile into binary? Well there is a lot of additional fluff that goes into creating the binary itself.&#xA;All of this additional fluff is needed by the OS in order to correctly run your program.&lt;/li&gt;&#xA;&lt;li&gt;We are not going to study this additional fluff today, but it isn&#39;t that important!&#xA;Rest assured that we will be writing and compiling all the core logic of our programs by using our compiler today.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;a-little-bit-about-the-cpu&#34;&gt;A little bit about the CPU&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;The CPU is what is known as a &amp;quot;state machine&amp;quot;. It holds some state, and it changes that state over time.&lt;/li&gt;&#xA;&lt;li&gt;In fact, this is how it performs calculations and produces results!&lt;/li&gt;&#xA;&lt;li&gt;What is this &amp;quot;state&amp;quot;? It mainly corresponds to it&#39;s internal storage.&lt;/li&gt;&#xA;&lt;li&gt;All the registers in a CPU together make up its internal storage. You can think of these registers as variables!&lt;/li&gt;&#xA;&lt;li&gt;Operations are performed by changing these registers - the &amp;quot;state&amp;quot; - over time. This will become clear soon enough.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;assembly&#34;&gt;Assembly&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Assembly is a human readable representation of binary code.&lt;/li&gt;&#xA;&lt;li&gt;It uses mnemonics for instructions and is much easier to read. Like:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;add %rdi, %rsi&lt;/code&gt; Is how you write the &amp;quot;add&amp;quot; instruction in assembly.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;sub %rdi, %rsi&lt;/code&gt; Is how you write the &amp;quot;subtract&amp;quot; instruction in assembly, and so on.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;But wait. What are &lt;code&gt;%rdi&lt;/code&gt;, and &lt;code&gt;%rsi&lt;/code&gt;? These are registers! In assembly, the names of registers are prefixed with &lt;code&gt;%&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;So what does &lt;code&gt;add %rdi, %rsi&lt;/code&gt; &lt;em&gt;do&lt;/em&gt;, exactly? Well, it takes the value of &lt;code&gt;rdi&lt;/code&gt; and adds it to &lt;code&gt;rsi&lt;/code&gt;. This much is pretty self explanatory.&lt;/li&gt;&#xA;&lt;li&gt;It then takes the result of the addition, and stores it in the register on the right hand side, which in this case is &lt;code&gt;rsi&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;This is equivalent to doing &lt;code&gt;rsi = rdi + rsi&lt;/code&gt; or &lt;code&gt;rsi += rdi&lt;/code&gt; in python.&lt;/li&gt;&#xA;&lt;li&gt;The left operand is known as the &amp;quot;source&amp;quot; and the right operand is known as the &amp;quot;destination&amp;quot;.&lt;/li&gt;&#xA;&lt;li&gt;There are many registers in x86 processors. These include:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;General purpose registers: rax, rbx, rcx, rdx, rsp, rbp, rsi, rdi. These registers have certain meanings conventionally, as we will see later.&lt;/li&gt;&#xA;&lt;li&gt;Instruction pointer: rip. This register holds the address of the next instruction that must be executed.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;lets-write-some-assembly-code&#34;&gt;Let&#39;s write some assembly code!&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Let&#39;s start off with a simple hello world program!&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre&gt;&lt;code&gt;.global main&#xA;&#xA;.text&#xA;main:&#xA;push %rbp&#xA;&#xA;lea hello(%rip), %rdi&#xA;call printf&#xA;&#xA;pop %rbp&#xA;ret&#xA;&#xA;.data&#xA;hello: .string &amp;quot;Hello, World!\n&amp;quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;.global main&lt;/code&gt; is sort of like a decleration that tells the assembler that a function called &amp;quot;main&amp;quot; exists. If not for this, the assembler would throw an error saying &amp;quot;main not found&amp;quot;.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;.text&lt;/code&gt; marks the beginning of the text segment. Segments are a way of organizing memory. Conventionally, the text segment contains &lt;em&gt;all&lt;/em&gt; the code in our assembly program. There are other segments as well like the data segment, where all the data of the program goes.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;main:&lt;/code&gt; marks the beginning of the main function. It is a label (as indicated by the &amp;quot;:&amp;quot; at the end). Labels are &amp;quot;named locations in memory&amp;quot;. They are used to refer to some memory regions with a name. In this case, the name &amp;quot;main&amp;quot; now corresponds to the memory where the contents of the main function reside.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;push %rbp&lt;/code&gt; (and later, &lt;code&gt;pop %rbp&lt;/code&gt;) are out of scope for this workshop. Feel free to explore why these lines are necessary!&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;lea hello(%rip), %rdi&lt;/code&gt;: This is a big one. Let&#39;s unpack it:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;lea&lt;/code&gt; stands for Load Effective Address. It is used to &amp;quot;load&amp;quot; (or &amp;quot;move&amp;quot;) the address to some memory area (example: a label) into some register.&lt;/li&gt;&#xA;&lt;li&gt;We are moving the address of the &lt;code&gt;hello&lt;/code&gt; variable into the &lt;code&gt;rdi&lt;/code&gt; register. Why? By convention, the &lt;code&gt;rdi&lt;/code&gt; register is used to pass the first argument to a function.&lt;/li&gt;&#xA;&lt;li&gt;&lt;em&gt;Ignore&lt;/em&gt; the &lt;code&gt;(%rip)&lt;/code&gt; part for the duration of the workshop! It is way out of scope for tonight (This is the last time. We will explain everything else from this point on. Promise). Definitely check these links out later to learn more about &lt;a href=&#34;https://en.wikipedia.org/wiki/Position-independent_code&#34;&gt;why it&#39;s there&lt;/a&gt; though.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Finally, &lt;code&gt;call printf&lt;/code&gt;. This is a very simple instruction and reads like plain english. Nice!&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;ret&lt;/code&gt; is used to tell the cpu that this function has finished executing and that it may now &lt;strong&gt;ret&lt;/strong&gt;urn from it.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;.data&lt;/code&gt; marks the beginning of the data segment. This is where all of our variables go! We define our hello world string here.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;hello: .string &amp;quot;Hello, World!\n&amp;quot;&lt;/code&gt;: We use a label (&lt;code&gt;hello:&lt;/code&gt;) again. This time, to name our variable (We used the &lt;code&gt;main:&lt;/code&gt; label to name our main function eariler).&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;.string&lt;/code&gt; tells the assembler that the &lt;em&gt;type&lt;/em&gt; of our variable is going to be string, and finally we type the string itself out within double quotes.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Congratulations! You have successfully written hello world in assembly.&lt;/p&gt;&#xA;&lt;h1 id=&#34;writing-our-compiler&#34;&gt;Writing our compiler&lt;/h1&gt;&#xA;&lt;p&gt;Let&#39;s begin writing our compiler now. What better way to start than by printing hello world (&lt;em&gt;again&lt;/em&gt;)?&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;out_file = open(&#39;output.s&#39;, &#39;w&#39;)&#xA;&#xA;def output(*args):&#xA;    print(*args, file=out_file)&#xA;&#xA;output(&#39;&#39;&#39;.global main&#xA;&#xA;.text&#xA;main:&#xA;push %rbp&#xA;&#xA;lea hello(%rip), %rdi&#xA;call printf&#xA;&#xA;pop %rbp&#xA;ret&#xA;&#xA;.data&#xA;hello: .string &amp;quot;Hello, World!\\n&amp;quot;&#39;&#39;&#39;)  # Don&#39;t forget to escape the \&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;First, we open &lt;code&gt;output.s&lt;/code&gt; file in order to write our assembly.&lt;/li&gt;&#xA;&lt;li&gt;We define a function &lt;code&gt;output()&lt;/code&gt; that takes in an argument (as a string) and prints it out into our &lt;code&gt;output.s&lt;/code&gt; file.&lt;/li&gt;&#xA;&lt;li&gt;Then we slap the entire hello world assembly program that we&#39;ve written so far into an &lt;code&gt;output()&lt;/code&gt; call and voila! Hello world in compiler: &lt;em&gt;done.&lt;/em&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;umm-source-file&#34;&gt;Umm... Source file?&lt;/h2&gt;&#xA;&lt;p&gt;Sure! Let&#39;s create an input source file that our compiler is supposed to compile. &lt;code&gt;input.bob&lt;/code&gt; has a nice ring to it, doesn&#39;t it?&#xA;Just to verify that our compiler can properly read from the source file, let&#39;s first add the following into &lt;code&gt;input.bob&lt;/code&gt;:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;lea hello(%rip), %rdi&#xA;call printf&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;And then modify the &lt;code&gt;output()&lt;/code&gt; call by splitting it up into two halves:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;in_file = open(&#39;input.bob&#39;)  # Open in_file in order to read from it&#xA;&#xA;output(&#39;&#39;&#39;.global main&#xA;&#xA;.text&#xA;main:&#xA;push %rbp&#39;&#39;&#39;)&#xA;&#xA;for line in in_file:&#xA;    output(line)&#xA;&#xA;output(&#39;&#39;&#39;pop %rbp&#xA;ret&#xA;&#xA;.data&#xA;hello: .string &amp;quot;Hello, World!\\n&amp;quot;&#39;&#39;&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Attentive readers would&#39;ve noticed two things by now:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;The source file contains assembly code and not bob code. We&#39;re gonna change this soon enough.&lt;/li&gt;&#xA;&lt;li&gt;The gap between the two halves of our boilerplate assembly code is filled by reading from the source file and literally pasting its contents in.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;We haven&#39;t changed anything here, functionally speaking. But our compiler now has the ability to read from a source file!&lt;/p&gt;&#xA;&lt;h1 id=&#34;adding-syntax-elements&#34;&gt;Adding Syntax Elements&lt;/h1&gt;&#xA;&lt;p&gt;We are capable of reading an input file and using it we can produce an output file. We can start defining our language and add some syntax elements.&lt;/p&gt;&#xA;&lt;h2 id=&#34;creating-variables&#34;&gt;Creating Variables&lt;/h2&gt;&#xA;&lt;p&gt;The first thing we&#39;ll add is the syntax for variables.&#xA;We&#39;ve chosen a really simple syntax for this.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;var x = 42&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;This line will tell our compiler to create a variable called &amp;quot;x&amp;quot; and initialise it with the value 42.&lt;/p&gt;&#xA;&lt;p&gt;How is the compiler going to understand this? How will it generate the output assembly?&#xA;We&#39;ll do that by checking if the first word in the line is &lt;code&gt;var&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Our loop will then look like this:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;for line in in_file:&#xA;    words = line.split()&#xA;    if words[0] == &#39;var&#39;:&#xA;        ... # create a var and initialise it to 42&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;To create the variable we&#39;ll add it to a dictionary. The key will be the name of the variable and the value will be its initial value. In our case we will have &lt;code&gt;{&#39;x&#39;: 42}&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;We&#39;ll create the dictionary at the beginning of our program.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;variables = {}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;And then populate it in our main loop.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;for line in in_file:&#xA;    words = line.split()&#xA;    if words[0] == &#39;var&#39;:&#xA;        name = words[1]&#xA;        value = words[-1]&#xA;        variables[name] = value&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;&lt;code&gt;words[1]&lt;/code&gt; is the second word in the line. It&#39;s the name of the variable.&lt;br&gt;&#xA;&lt;code&gt;words[-1]&lt;/code&gt; is the last word in the line. It&#39;s the value of the variable.&lt;/p&gt;&#xA;&lt;p&gt;We have a dictionary now, but we haven&#39;t produced any assembly.&lt;/p&gt;&#xA;&lt;p&gt;We&#39;re going to use this dictionary to add our variables to the data segment. If you recall, the hello world string was created like so:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;hello: .string &amp;quot;Hello, World!\n&amp;quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;We use a label to give our variable a name. Then we say that we want to create a string. And finally we give the string data that the variable will hold.&lt;/p&gt;&#xA;&lt;p&gt;We&#39;ll be using a very similar syntax to create the variables declared in our programming language:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;x: .quad 42&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Here, we use a label to give the variable a name, Then we say that we wnat to create a quad. And finally, we give the value to the quad.&lt;br&gt;&#xA;&lt;code&gt;quad&lt;/code&gt; is short for &amp;quot;quad word&amp;quot;. A word represents a 16-bit number. So, a quad word has four times 16 bits. Every variable in our language will be a quad ie a 64-bit number.&lt;/p&gt;&#xA;&lt;p&gt;We&#39;ll populate the data segment using the values in our dictionary.&#xA;Remember, we have to do this after we&#39;ve started the data segment. All the variables go in the data segment, and all the code goes in the text segment. That&#39;s why we do this only at the end.&lt;/p&gt;&#xA;&lt;p&gt;We&#39;ll loop through all the variables and add them to the data segment using the quad syntax.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;for var in variables:&#xA;    output(f&#39;{name}: .quad {variables[name]}&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Now, we can have multiple variables as well.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;var x = 42&#xA;var y = 1337&#xA;var z = 100&#xA;var w = 500&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;printing-the-variables&#34;&gt;Printing the Variables&lt;/h2&gt;&#xA;&lt;p&gt;Now that we have variables, we want to put them to good use. We want to see them. We want to print them.&lt;/p&gt;&#xA;&lt;p&gt;First, let&#39;s see how it&#39;s done in C.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&#xA;&#xA;int main() {&#xA;    int x = 42;&#xA;    printf(&amp;quot;%d\n&amp;quot;, x);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Remember the three things to be able to print stuff?&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Creating the &lt;code&gt;main&lt;/code&gt; function&lt;/li&gt;&#xA;&lt;li&gt;Calling &lt;code&gt;printf&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Passing arguments to &lt;code&gt;printf&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;In this example, creating the main function is the same. Calling printf will also be the same. The only thing that&#39;s different, is passing arguments to printf.&lt;/p&gt;&#xA;&lt;p&gt;This time, we have two arguments. The first argument is percent-d and the second argument is the number we want to print.&lt;/p&gt;&#xA;&lt;p&gt;To do this in assembly we have to do almost the same thing as the hello world example.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;lea percent_d(%rip), %rdi&#xA;mov x(%rip), %rsi&#xA;call printf&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;&lt;code&gt;lea&lt;/code&gt; sets our first argument to be the percent_d string.&lt;/p&gt;&#xA;&lt;p&gt;We use &lt;code&gt;mov&lt;/code&gt; for x instead of &lt;code&gt;lea&lt;/code&gt; because we want to move the contents at that address rather than the address itself. Basically, we&#39;ll use &lt;code&gt;lea&lt;/code&gt; for strings, and &lt;code&gt;mov&lt;/code&gt; for integers.&lt;/p&gt;&#xA;&lt;p&gt;We move percent_d into rdi as the first argument.&lt;br&gt;&#xA;Likewise, we are moving x to rsi because according to the convention the second argument does into the rsi register.&lt;/p&gt;&#xA;&lt;p&gt;Like our hello string, we&#39;ll create the &lt;code&gt;percent_d&lt;/code&gt; string.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;percent_d: .string &amp;quot;%d\n&amp;quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;We can add this feature to our language now. To print a variable we&#39;ll just do&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;print x&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;To be able to parse this we&#39;ll add a branch to our if statement.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&#xA;for line in in_file:&#xA;    words = line.split()&#xA;    if words[0] == &#39;var&#39;:&#xA;        name = words[1]&#xA;        value = words[-1]&#xA;        variables[name] = value&#xA;    elif words[0] == &#39;print&#39;:  # new branch!&#xA;        name = words[1]&#xA;        output(&#39;lea percent_d(%rip), %rdi&#39;)&#xA;        output(f&#39;mov {name}(%rip), %rsi&#39;)&#xA;        output(&#39;call printf&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Finally, we&#39;ll add the &lt;code&gt;percent_d&lt;/code&gt; string to our data segment:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;output(&#39;&#39;&#39;pop %rbp&#xA;ret&#xA;&#xA;.data&#xA;hello: .string &amp;quot;Hello, World!\\n&amp;quot;&#xA;percent_d: .string &amp;quot;%d\\n&amp;quot;&#xA;&#39;&#39;&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;&lt;em&gt;Don&#39;t forget the double back slashes!&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;Let&#39;s write a program in our language!&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;var x = 42&#xA;var y = 1337&#xA;var z = 100&#xA;var w = 500&#xA;print x&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;We get the expected output when we compile and run this. The output is &lt;code&gt;42&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;We can print more variables too.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;var x = 42&#xA;var y = 1337&#xA;var z = 100&#xA;var w = 500&#xA;&#xA;print x&#xA;print y&#xA;print z&#xA;print w&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;But we get an error!&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;Traceback (most recent call last):&#xA;  File &amp;quot;thihihi.py&amp;quot;, line, in &amp;lt;module&amp;gt;&#xA;    if words[0] == &#39;var&#39;:&#xA;IndexError: list index out of range&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;This is caused by the blank line in our file. We go through every line and split it. We then check what the first word in the file is. If the line is empty, there is no first word and our compiler crashes.&lt;/p&gt;&#xA;&lt;p&gt;To get around this, we&#39;ll ignore all empty lines.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;for line in in_file:&#xA;    words = line.split()&#xA;    if len(words) == 0:&#xA;        continue&#xA;    # continue parsing&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;We use the continue keyword in python to skip everything else in this iteration, essentially skipping all processing that would have been done on this line.&lt;/p&gt;&#xA;&lt;p&gt;Here&#39;s the full code after this step:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;out_file = open(&#39;output.s&#39;, &#39;w&#39;)&#xA;in_file = open(&#39;input.bob&#39;)&#xA;&#xA;variables = {}&#xA;&#xA;def output(*args):&#xA;    print(*args, file=out_file)&#xA;&#xA;output(&#39;&#39;&#39;.global main&#xA;&#xA;.text&#xA;main:&#xA;push %rbp&#xA;&#39;&#39;&#39;)&#xA;&#xA;for line in in_file:&#xA;    words = line.split()&#xA;    if len(words) == 0:&#xA;        continue&#xA;&#xA;    if words[0] == &#39;var&#39;:&#xA;        name = words[1]&#xA;        value = words[-1]&#xA;        variables[name] = value&#xA;    elif words[0] == &#39;print&#39;:  # new branch!&#xA;        name = words[1]&#xA;        output(&#39;lea percent_d(%rip), %rdi&#39;)&#xA;        output(f&#39;mov {name}(%rip), %rsi&#39;)&#xA;        output(&#39;call printf&#39;)&#xA;&#xA;output(&#39;&#39;&#39;pop %rbp&#xA;ret&#xA;&#xA;.data&#xA;hello: .string &amp;quot;Hello, World!\\n&amp;quot;&#xA;percent_d: .string &amp;quot;%d\\n&amp;quot;&#xA;&#39;&#39;&#39;)&#xA;&#xA;for var in variables:&#xA;    output(f&#39;{name}: .quad {variables[name]}&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Running this code on our input will give us the correct assembly.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;.global main&#xA;&#xA;.text&#xA;main:&#xA;push %rbp&#xA;lea percent_d(%rip), %rdi&#xA;mov x(%rip), %rsi&#xA;call printf&#xA;lea percent_d(%rip), %rdi&#xA;mov y(%rip), %rsi&#xA;call printf&#xA;lea percent_d(%rip), %rdi&#xA;mov z(%rip), %rsi&#xA;call printf&#xA;lea percent_d(%rip), %rdi&#xA;mov w(%rip), %rsi&#xA;call printf&#xA;pop %rbp&#xA;ret&#xA;&#xA;.data&#xA;hello: .string &amp;quot;Hello, World!\n&amp;quot;&#xA;percent_d: .string &amp;quot;%d\n&amp;quot;&#xA;percent_c: .string &amp;quot;%c&amp;quot;&#xA;x: .quad 42&#xA;y: .quad 1337&#xA;z: .quad 100&#xA;w: .quad 500&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;more-language-features&#34;&gt;More Language Features!&lt;/h1&gt;&#xA;&lt;p&gt;We&#39;ll be adding two more syntax elements to our language. After that, you should be able to extend it to your heart&#39;s content!&lt;/p&gt;&#xA;&lt;h2 id=&#34;printing-characters&#34;&gt;Printing Characters&lt;/h2&gt;&#xA;&lt;p&gt;So far, we can print numbers. But we can&#39;t print &amp;quot;hello world&amp;quot;. How do we print it?&lt;/p&gt;&#xA;&lt;p&gt;Well, in order to print strings, we&#39;ll be printing induvidual characters.&lt;/p&gt;&#xA;&lt;p&gt;This will take the value of x and print the corresponding ASCII character.&lt;/p&gt;&#xA;&lt;p&gt;What is ASCII? It&#39;s a way of converting between characters and numbers.&lt;br&gt;&#xA;There are 127 characters that have a corresponding number according to ASCII.&lt;/p&gt;&#xA;&lt;p&gt;We can use python&#39;s builtin function &lt;code&gt;ord&lt;/code&gt; to find the ASCII code of a character we want.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;C:\&amp;gt; python&#xA;Python 3.8&#xA;Type &amp;quot;help&amp;quot;, &amp;quot;copyright&amp;quot;, &amp;quot;credits&amp;quot; or &amp;quot;license&amp;quot; for more information.&#xA;&amp;gt;&amp;gt;&amp;gt; ord(&#39;h&#39;)&#xA;104&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Before we can add this feature to our language, let&#39;s see how we&#39;d do this in C.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&#xA;&#xA;int main() {&#xA;    int x = 104;&#xA;    printf(&amp;quot;%c&amp;quot;, x);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Just like printing integers, we&#39;ll use printf. But, instead of the &lt;code&gt;%d&lt;/code&gt; format specifier, we&#39;ll be using &lt;code&gt;%c&lt;/code&gt;. This will tell printf to interpret the number as an ASCII code, and print the corresponding ASCII character onto the screen.&lt;br&gt;&#xA;In this case, we print the character &lt;code&gt;h&lt;/code&gt; onto the screen, because the ASCII code corresponding to the letter &lt;code&gt;h&lt;/code&gt; is 104.&lt;/p&gt;&#xA;&lt;p&gt;Now in our langauge, we&#39;ll print characters using some new syntax.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;printchar x&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;This will take the value of x and print the corresponding ASCII character onto the screen.&lt;/p&gt;&#xA;&lt;p&gt;In order to parse this line we&#39;ll create a new branch in the mainloop of our compiler&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;for line in in_file:&#xA;    words = line.split()&#xA;    if len(words) == 0:&#xA;        continue&#xA;&#xA;    if words[0] == &#39;var&#39;:&#xA;        name = words[1]&#xA;        value = words[-1]&#xA;        variables[name] = value&#xA;    elif words[0] == &#39;print&#39;:&#xA;        name = words[1]&#xA;        output(&#39;lea percent_d(%rip), %rdi&#39;)&#xA;        output(f&#39;mov {name}(%rip), %rsi&#39;)&#xA;        output(&#39;call printf&#39;)&#xA;    elif words[0] == &#39;printchar&#39;:  # new branch!&#xA;        char = words[1]&#xA;        output(&#39;lea percent_c(%rip), %rdi&#39;)&#xA;        output(f&#39;mov {char}(%rip), %rsi&#39;)&#xA;        output(&#39;call printf&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;This works just the same way as the &lt;code&gt;print&lt;/code&gt; except that, instead of using &lt;code&gt;percent_d&lt;/code&gt;, we&#39;ll be using &lt;code&gt;percent_c&lt;/code&gt;. So, we&#39;ll add &lt;code&gt;percent_c&lt;/code&gt; also to our data segment.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;output(&#39;&#39;&#39;pop %rbp&#xA;ret&#xA;&#xA;.data&#xA;hello: .string &amp;quot;Hello, World!\\n&amp;quot;&#xA;percent_d: .string &amp;quot;%d\\n&amp;quot;&#xA;percent_c: .string &amp;quot;%c&amp;quot;&#xA;&#39;&#39;&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Now we can print characters in our language!&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;var x = 104&#xA;printchar x&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;To recap, we&#39;re storing the ASCII code of the character &lt;code&gt;h&lt;/code&gt; 104 in the variable &lt;code&gt;x&lt;/code&gt;. When we do &lt;code&gt;printchar x&lt;/code&gt;, the corresponding ASCII character &lt;code&gt;h&lt;/code&gt; gets printed onto the screen.&lt;/p&gt;&#xA;&lt;p&gt;This means that we can write a hello world program.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;var H = 72&#xA;var W = 87&#xA;var e = 101&#xA;var l = 108&#xA;var o = 111&#xA;var r = 114&#xA;var d = 100&#xA;&#xA;var new_line = 10&#xA;var space = 32&#xA;var exclamation = 33&#xA;var comma = 44&#xA;&#xA;printchar H&#xA;printchar e&#xA;printchar l&#xA;printchar l&#xA;printchar o&#xA;printchar comma&#xA;printchar space&#xA;&#xA;printchar W&#xA;printchar o&#xA;printchar r&#xA;printchar l&#xA;printchar d&#xA;printchar exclamation&#xA;printchar new_line&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Here, we declare a variable for every unique character that we&#39;ll print. And then, we&#39;ll use the variables to print the values onto the screen.&lt;/p&gt;&#xA;&lt;p&gt;And when we run it, we get the output of hello world from our very own language!&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;Hello, World!&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;modifying-variables&#34;&gt;Modifying Variables&lt;/h2&gt;&#xA;&lt;p&gt;This is a fairly important feature.&lt;/p&gt;&#xA;&lt;p&gt;We have variables, we can print the variables and we can print them as characters.&lt;/p&gt;&#xA;&lt;p&gt;But we still can&#39;t change the values in the variables. After all, the word &amp;quot;variable&amp;quot; means something that can be changed.&lt;/p&gt;&#xA;&lt;p&gt;To do that we&#39;ll introduce new syntax in our language.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;a += b&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Just like languages like C and python, this code adds the contents of a and b. Then, it puts the result back in a.&lt;/p&gt;&#xA;&lt;p&gt;Now, how do we parse this in our compiler?&lt;/p&gt;&#xA;&lt;p&gt;Well, you guessed it. We&#39;ll add another branch!&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;    elif words[1] == &#39;+=&#39;:&#xA;        # the code to add two variables will come here&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Notice that this branch is different. We are checking &lt;code&gt;words[1]&lt;/code&gt; instead of &lt;code&gt;words[0]&lt;/code&gt;. That&#39;s because the &lt;code&gt;+=&lt;/code&gt; goes in between the two variables we pass.&lt;br&gt;&#xA;&lt;code&gt;words&lt;/code&gt; will be &lt;code&gt;[&#39;a&#39;, &#39;+=&#39;, &#39;b&#39;]&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;We can complete the code in the branch now.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;    elif words[1] == &#39;+=&#39;:&#xA;        lhs = words[0]&#xA;        rhs = words[2]&#xA;        output(f&#39;mov {rhs}(%rip), %rdi&#39;)&#xA;        output(f&#39;add %rdi, {lhs}(%rip)&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;&lt;code&gt;lhs&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt; contain the names of the variables.&lt;/p&gt;&#xA;&lt;p&gt;Recall that the left operand of an assembly instruction is the source, and the right operand is the destination.&lt;br&gt;&#xA;Here, we move the rhs into the &lt;code&gt;rdi&lt;/code&gt; register. It&#39;s not &lt;code&gt;lea&lt;/code&gt; because it&#39;s an integer and not a string.&lt;br&gt;&#xA;Then, we perform our operation, which &lt;code&gt;add&lt;/code&gt; with our destination as the lhs. After this, &lt;code&gt;a&lt;/code&gt; will hold the sum of &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Notice that we use the &lt;code&gt;rdi&lt;/code&gt; register temporarily to add the numbers, instead of just performing the &lt;code&gt;add&lt;/code&gt; instruction directly on the lhs and rhs. Most architectures, including x86, don&#39;t support this.&lt;br&gt;&#xA;We can only move between registers, or to and from registers to variables. Never between only variables. We get around this by using an intermediate register &lt;code&gt;rdi&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Here&#39;s the code of the entire compiler so far:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;out_file = open(&#39;output.s&#39;, &#39;w&#39;)&#xA;in_file = open(&#39;input.bob&#39;)&#xA;&#xA;variables = {}&#xA;&#xA;def output(*args):&#xA;    print(*args, file=out_file)&#xA;&#xA;output(&#39;&#39;&#39;.global main&#xA;&#xA;.text&#xA;main:&#xA;push %rbp&#xA;&#39;&#39;&#39;)&#xA;&#xA;for line in in_file:&#xA;    words = line.split()&#xA;    if len(words) == 0:&#xA;        continue&#xA;&#xA;    if words[0] == &#39;var&#39;:&#xA;        name = words[1]&#xA;        value = words[-1]&#xA;        variables[name] = value&#xA;    elif words[0] == &#39;print&#39;:&#xA;        name = words[1]&#xA;        output(&#39;lea percent_d(%rip), %rdi&#39;)&#xA;        output(f&#39;mov {name}(%rip), %rsi&#39;)&#xA;        output(&#39;call printf&#39;)&#xA;    elif words[0] == &#39;printchar&#39;:&#xA;        char = words[1]&#xA;        output(&#39;lea percent_c(%rip), %rdi&#39;)&#xA;        output(f&#39;mov {char}(%rip), %rsi&#39;)&#xA;        output(&#39;call printf&#39;)&#xA;    elif words[1] == &#39;+=&#39;:&#xA;        lhs = words[0]&#xA;        rhs = words[2]&#xA;        output(f&#39;mov {rhs}(%rip), %rdi&#39;)&#xA;        output(f&#39;add %rdi, {lhs}(%rip)&#39;)&#xA;&#xA;output(&#39;&#39;&#39;pop %rbp&#xA;ret&#xA;&#xA;.data&#xA;hello: .string &amp;quot;Hello, World!\\n&amp;quot;&#xA;percent_d: .string &amp;quot;%d\\n&amp;quot;&#xA;percent_c: .string &amp;quot;%c&amp;quot;&#xA;&#39;&#39;&#39;)&#xA;&#xA;for var in variables:&#xA;    output(f&#39;{name}: .quad {variables[name]}&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Let&#39;s write one final program in our language&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;var a = 10&#xA;var b = 4&#xA;&#xA;print a&#xA;a += b&#xA;print a&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;We&#39;ll use our operator, and compare before and after its use. The first &lt;code&gt;print&lt;/code&gt; will print the initial value &lt;code&gt;10&lt;/code&gt; and the next &lt;code&gt;print&lt;/code&gt; will print the modified value 10+4 = &lt;code&gt;14&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;And when we run it, we&#39;ll get the following output.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;10&#xA;14&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Congratulations! In our language, we can declare variables, print variables, print variables as characters and perform operrations on the variables.&lt;/p&gt;&#xA;&lt;h2 id=&#34;moving-forward&#34;&gt;Moving Forward&lt;/h2&gt;&#xA;&lt;p&gt;Do not stop here! Languages like python and C aren&#39;t built in overnight.&lt;/p&gt;&#xA;&lt;p&gt;We have only scratched the surface of compiler design today. There are so many other things that involve making a real languages, but we hope that, today, we have inspired you to venture into the world of compilers and making a programming language of your own.&lt;/p&gt;&#xA;&lt;p&gt;Finally, here are some ideas to expand your new language:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Create a &lt;code&gt;-=&lt;/code&gt; operator. Create other operations as well.&lt;/li&gt;&#xA;&lt;li&gt;Learn about branching and jumps in assembly. This will help you make &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt; and all that to make your language Turing Complete!&lt;/li&gt;&#xA;&lt;li&gt;Learn about parsing source code. Try and figure out how we can have expressions like &lt;code&gt;a + b * 35&lt;/code&gt; as the lhs.&lt;/li&gt;&#xA;&lt;li&gt;And much much more!&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Thanks for attending and don&#39;t forget to &lt;em&gt;like, share and compile!&lt;/em&gt;&lt;/p&gt;&#xA;</description>
    </item>
    <item>
      <title>Git Up and Running</title>
      <link>https://hsp-test.netlify.app/homebrew/events/git_up_and_running.html/</link>
      <pubDate>Mon, 06 Feb 2023 05:30:00 +0530</pubDate>
      <author>HSP</author>
      <guid>https://hsp-test.netlify.app/homebrew/events/git_up_and_running.html</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;! WIP post !&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;This post is originally at &lt;a href=&#34;https://rowjee.com/blog/git_up_and_running&#34;&gt;https://rowjee.com/blog/git_up_and_running&lt;/a&gt;. Read Below for more -&lt;/p&gt;&#xA;</description>
    </item>
    <item>
      <title>Introduction to Flutter</title>
      <link>https://hsp-test.netlify.app/blog/flutter.html/</link>
      <pubDate>Mon, 06 Feb 2023 05:30:00 +0530</pubDate>
      <author>HSP</author>
      <guid>https://hsp-test.netlify.app/blog/flutter.html</guid>
      <description>&lt;h1 id=&#34;table-of-contents&#34;&gt;Table of Contents &lt;a class=&#34;anchor&#34; href=&#34;#table-of-contents&#34;&gt;#&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#introdution&#34;&gt;Introdution&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#what-is-flutter&#34;&gt;What is Flutter?&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#overview-of-dart&#34;&gt;Overview of Dart:&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#why-flutter&#34;&gt;Why Flutter?&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#getting-started&#34;&gt;Getting Started&lt;/a&gt;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#terminologies&#34;&gt;Terminologies:&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#coding-our-app-&#34;&gt;Coding our App :&lt;/a&gt;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#1-configuring-android-studio&#34;&gt;1) Configuring Android Studio:&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#2-project-creation-&#34;&gt;2) Project Creation :&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#setting-up-the-android-emulator&#34;&gt;Setting up the Android Emulator&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#building-our-app&#34;&gt;Building Our App&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#adding-images-onto-our-app-using-the-pubspecyaml-file&#34;&gt;Adding images onto our app (using the pubspec.yaml file)&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#congrats-on-developing-your-first-app-&#34;&gt;Congrats on Developing your first app 🥳🥳🥳🥳🥳&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;introdution&#34;&gt;Introdution &lt;a class=&#34;anchor&#34; href=&#34;#introdution&#34;&gt;#&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;p&gt;If you’ve always been fascinated by how to develop apps and always wanted to learn how to, Flutter is the language you’ve been looking for.&#xA;In this blog, let’s run through the basics of Flutter and why we should use Flutter. Without further ado, let&#39;s get started:&lt;/p&gt;&#xA;&lt;h1 id=&#34;what-is-flutter&#34;&gt;What is Flutter? &lt;a class=&#34;anchor&#34; href=&#34;#what-is-flutter&#34;&gt;#&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;p&gt;&lt;em&gt;Flutter is an open-source framework by Google for building beautiful, natively compiled, multi-platform applications from a single codebase. It is Google’s UI toolkit for crafting beautiful, natively compiled applications for mobile, web, and desktop from a single codebase.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;So basically, Flutter lets you develop mobile, desktop and web apps from a single codebase using the language Dart.&lt;/p&gt;&#xA;&lt;p&gt;Well, now you must be intrigued as to what is Dart?&lt;/p&gt;&#xA;&lt;h1 id=&#34;overview-of-dart&#34;&gt;Overview of Dart: &lt;a class=&#34;anchor&#34; href=&#34;#overview-of-dart&#34;&gt;#&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;p&gt;&lt;em&gt;Dart is the programming language used by Flutter to build cross-platform mobile apps. It’s compiled using Google’s compiler called dart into an intermediate representation that runs on both iOS and Android devices without modification.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://dart.dev/&#34;&gt;Dart&lt;/a&gt; is a client-optimized, free and open-source language used to develop fast apps on any platform.&lt;/li&gt;&#xA;&lt;li&gt;Dart is mainly optimized for UI, it is fast on all platforms as it can compile to ARM &amp;amp; x64 machine code for mobile, desktop, and backend or compile to JavaScript for the web.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Let&#39;s get down to business and look at why you should choose Flutter 🤔&lt;/p&gt;&#xA;&lt;h1 id=&#34;why-flutter&#34;&gt;Why Flutter? &lt;a class=&#34;anchor&#34; href=&#34;#why-flutter&#34;&gt;#&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Flutter can be used to build apps on both iOS and Android while supporting various aspect ratios, screen sizes and devices.&lt;/li&gt;&#xA;&lt;li&gt;Flutter uses one codebase for all platforms.&lt;/li&gt;&#xA;&lt;li&gt;It comes with a ton of pre-built widgets like app-bars(top bar), error notifications and buttons(three-dot button, + button etc) in iOS and Android styles and allows a lot of modification like Colors,Background color etc.&lt;/li&gt;&#xA;&lt;li&gt;Flutter comes with rich libraries.&lt;/li&gt;&#xA;&lt;li&gt;Flutter uses simple and flexible user layouts which can be used to make beautiful app layouts.&lt;/li&gt;&#xA;&lt;li&gt;Flutter implements a feature called &#39;Hot Reload&#39; which acts similar to the refresh button on web pages which updates the app&#39;s layout and view as soon as we make some changes.&lt;/li&gt;&#xA;&lt;li&gt;Flutter allows us to access the original source code of the widgets and built-in functions we make use of.&#xA;Let&#39;s move on and get started with setting up of Flutter 😁&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;getting-started&#34;&gt;Getting Started &lt;a class=&#34;anchor&#34; href=&#34;#getting-started&#34;&gt;#&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;p&gt;To install Flutter on your system&#39;s it is highly recommended to read the documentation provided by Google&#39;s Flutter team as it&#39;ll give you all the insights you need to understand and set up Flutter properly&lt;/p&gt;&#xA;&lt;p&gt;Windows user&#39;s click &lt;a href=&#34;https://docs.flutter.dev/get-started/install/windows&#34;&gt;here&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Linux user&#39;s click &lt;a href=&#34;https://docs.flutter.dev/get-started/install/linux&#34;&gt;here&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;macOS user&#39;s click &lt;a href=&#34;https://docs.flutter.dev/get-started/install/macos&#34;&gt;here&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;For a self explained set of instructions follow &lt;a href=&#34;https://www.siddarthdpai.com/blog4/build/selfdoc.html&#34;&gt;this link&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Before we get into developing our first app, let us look at a few terminologies :&lt;/p&gt;&#xA;&lt;h2 id=&#34;terminologies&#34;&gt;Terminologies: &lt;a class=&#34;anchor&#34; href=&#34;#terminologies&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;Widget:&lt;/strong&gt; Widgets are the fundamental UI unit in Flutter. They represent an interactive element of a user interface such as a button or text field. Flutter offers a range of widgets that we can use and modify as per our needs. You can find them on the documentation page on the &lt;a href=&#34;https://docs.flutter.dev/development/ui/widgets&#34;&gt;widget catalog page.&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;https://i.imgur.com/1MGnQTj.png&#34; alt=&#34;&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;&lt;em&gt;(Demonstration of SafeArea widget)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;https://i.imgur.com/soh5Ef5.png&#34; alt=&#34;&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;&lt;em&gt;(Demonstration of Text widget)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;ol start=&#34;6&#34;&gt;&#xA;&lt;li&gt;&lt;strong&gt;Widget Tree:&lt;/strong&gt; To create an interactive UI, we combine multiple widgets together in flutter according to how we want to display them on-screen and these are known as widget trees.&#xA;&lt;img src=&#34;https://i.imgur.com/XEBAGOa.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;em&gt;(Demonstration of widget tree)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;ol start=&#34;9&#34;&gt;&#xA;&lt;li&gt;&lt;strong&gt;MaterialApp:&lt;/strong&gt; Material apps are a set of predefined widgets which implement Google’s material design guidelines on both mobile and desktop platforms.Like the style app bar, the looks of the button, the alerts, etc.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Cupertino design:&lt;/strong&gt; This is the iOS-specific type of design that we generally see in all iOS apps.&lt;/li&gt;&#xA;&lt;li&gt;**Hot Reload:**We’ve seen that Hot Reload is one of the reasons why we should use Flutter. Let us look at it in depth,&#xA;Flutter’s hot reload feature helps you quickly and easily experiment, build UIs, add features, and fix bugs.&#xA;Hot reload works by injecting updated source code files into the running Dart Virtual Machine (VM).&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Stateless Widget:&lt;/strong&gt; It is a widget that does not change itself during the runtime of the app while&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Stateful Widgets:&lt;/strong&gt; These are those widgets that changes itself/sub widgets during the runtime of the app. It basically rebuilds the widget tree whenever there is a change in state.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Pub:&lt;/strong&gt; Pub is the package manager for the Dart programming language, containing reusable libraries &amp;amp; packages for Flutter, AngularDart, and general Dart programs. So basically pub is the same as npm or any other package manager but it is specific to dart and flutter.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Scaffold:&lt;/strong&gt; Scaffolds are visual components that provide a default structure for your app, and have a variety of hooks for customizing their appearance. On iOS they serve as the “App” screen providing several screens to capture user actions throughout your app, and on Android there is currently only one Scaffold which contains an AppBar but it can be customized with a TabBar or BottomNavigation.&#xA;&lt;img src=&#34;https://i.imgur.com/e65FklM.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;em&gt;(Demonstration of the AppBar Scaffold)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;ol start=&#34;18&#34;&gt;&#xA;&lt;li&gt;&lt;strong&gt;initState function :&lt;/strong&gt; This function is used to write instructions which need to be executed before the widget tree is built. For example: fetching data from API, Database etc&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;Let’s also have a look at commonly used widgets which you’ll use when developing apps :&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Container:&lt;/strong&gt; The Container widget lets you create a rectangular visual element. A container can be decorated with a &lt;a href=&#34;https://api.flutter.dev/flutter/painting/BoxDecoration-class.html&#34;&gt;BoxDecoration&lt;/a&gt;, such as a background, a border, or a shadow. A Container can also have margins, padding, and constraints applied to its size. In addition, a Container can be transformed in three dimensional space using a matrix.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Center:&lt;/strong&gt; This is a wrapper widget, that centers the child within itself.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Card:&lt;/strong&gt; It is again a wrapper widget which has a panel-type view along with elevation shadow and borders.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Text:&lt;/strong&gt; This widget is used to display strings on app screen. It takes one compulsory argument which is the string to be displayed.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Buttons:&lt;/strong&gt; There are mainly four types of buttons in flutter:&#xA;i) Elevated button&#xA;ii)Text button&#xA;iii)Outlined button&#xA;iv) Icon button.&lt;/p&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;https://i.imgur.com/SjtE3Xl.png&#34; alt=&#34;&#34;&gt;&#xA;&lt;figcaption&gt;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/1pdflIP.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;&lt;em&gt;(Visual&#39;s of some of the many kind of buttons in flutter)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;The main difference between these buttons are the way they appear on screen and what all of there properties are modifiable. The compulsory arguments for them are onPressed and child. onPressed takes an anonymous function or a reference to a named function which contains the instructions that are to be executed on click of the button. child takes the widget that we want to show on the button usually it is a text widget. In the icon button the other compulsory widget is not the child but icon, it takes the icon data in it’s argument.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Row/Column:&lt;/strong&gt; these widgets are used to arrange elements one after the other horizontally/vertically. They take the children argument, which is an array of widgets.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;https://i.imgur.com/jr2ELrZ.png&#34; alt=&#34;&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;&lt;em&gt;Row layout&lt;/em&gt;&lt;/p&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;https://i.imgur.com/t7prVQm.png&#34; alt=&#34;&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;&lt;em&gt;Column layout&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;(Demonstration of row column layout)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;ol start=&#34;9&#34;&gt;&#xA;&lt;li&gt;&lt;strong&gt;Alert Dialog:&lt;/strong&gt; an alert dialog is used to present a message/question/confirmations on the screen and to that waits for a user action. It has arguments like title, content, actions, etc.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;em&gt;💡Tip: Multiple widgets that don’t need any change but will still be rebuilt on calling setState function. So, to avoid doing that, we write const in front of the widgets that are going to always remain the same.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;Now that we&#39;ve covered all the pre-requisite topics, let&#39;s actually code our first app (Building the &lt;a href=&#34;https://en.wikipedia.org/wiki/I_Am_Rich&#34;&gt;Am I Rich App&lt;/a&gt;)&lt;/p&gt;&#xA;&lt;h1 id=&#34;coding-our-app-&#34;&gt;Coding our App : &lt;a class=&#34;anchor&#34; href=&#34;#coding-our-app-&#34;&gt;#&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;1-configuring-android-studio&#34;&gt;1) Configuring Android Studio: &lt;a class=&#34;anchor&#34; href=&#34;#1-configuring-android-studio&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;STEP 1: Open Android Studio and click on Configure :&lt;/p&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;https://i.imgur.com/9jy5Fc8.jpg&#34; alt=&#34;&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;STEP 2: Click on Settings and go to the Plugins tab and install the Flutter Plugin&lt;/p&gt;&#xA;&lt;p&gt;STEP 3: Restart the IDE and now you should see a Create New Flutter Project tab&lt;/p&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;https://i.imgur.com/Tocwm31.jpg&#34; alt=&#34;&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;h2 id=&#34;2-project-creation-&#34;&gt;2) Project Creation : &lt;a class=&#34;anchor&#34; href=&#34;#2-project-creation-&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;STEP 1: Click on Create New Flutter Project and click on Flutter Application&lt;/p&gt;&#xA;&lt;p&gt;STEP 2: You should now see a page asking for Project name. Lets name our project i_am_rich .&lt;/p&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;https://i.imgur.com/IfycL8a.jpg&#34; alt=&#34;&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;STEP 3: Feel free to configure the package name By convention its usually named after your company domain name as shown com.&amp;lt;company_name&amp;gt;.iamrich or if you dont have a company domain, name it com.&amp;lt;your_name&amp;gt;.iamrich&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;Now, click on Finish and now Android Studio will create your first Flutter Project 🥳🥳&lt;/em&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;setting-up-the-android-emulator&#34;&gt;Setting up the Android Emulator &lt;a class=&#34;anchor&#34; href=&#34;#setting-up-the-android-emulator&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;In order to see the app we&#39;re developing we&#39;ll make use of a Virtual Android Device&lt;/p&gt;&#xA;&lt;p&gt;Step 1:&lt;/p&gt;&#xA;&lt;p&gt;To see the app, click on the AVD manager icon&lt;/p&gt;&#xA;&lt;p&gt;Step 2: Click on Create Virtual Device and choose a phone (I chose the Pixel 4) and the android version ( S ) let it install and setup the device.&lt;/p&gt;&#xA;&lt;p&gt;Step 3: Now click on the icon again and click on the run icon to start the device(under Actions) and your virtual device should boot up&lt;/p&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;https://i.imgur.com/fs8pHKl.jpg&#34; alt=&#34;&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;Now you can run all the apps you build by selecting device as the Emulator device and run it. (feel free to try it with the default starter app which is a counter app)&lt;/p&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;https://i.imgur.com/OMjyHKd.jpg&#34; alt=&#34;&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;h2 id=&#34;building-our-app&#34;&gt;Building Our App &lt;a class=&#34;anchor&#34; href=&#34;#building-our-app&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;We will make use of a widget named Material App. With Material app we get access to a lot of material widgets and colours.&#xA;&lt;a href=&#34;https://m3.material.io/&#34;&gt;Material app&lt;/a&gt; was introduced by Google and is free to use.&lt;/p&gt;&#xA;&lt;p&gt;All the content that is rendered onto the app is inside the main.dart file which is inside the Lib folder&lt;/p&gt;&#xA;&lt;p&gt;Initially, it should look like this (don&#39;t get perplexed by the huge size 😂)&lt;/p&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;https://i.imgur.com/REgKoig.jpg&#34; alt=&#34;&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;To make a simple Hello World program, we&#39;ll do as follows:&lt;/p&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;https://i.imgur.com/Ws7FyqI.jpg&#34; alt=&#34;&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;Output:&lt;/p&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;https://i.imgur.com/gzdpLDg.jpg&#34; alt=&#34;&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;Now, note by default the text aligns to the top left corner&lt;/p&gt;&#xA;&lt;p&gt;Now if we want to align the text in the centre then we use centre widget and then put the text widget as a child widget to the centre widget as shown below:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;void main() {&#xA;&#x9;runApp(MaterialApp(home: Center(child: Text(&#39;Hello World&#39;))));&#xA;&#x9;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Output:&lt;/p&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;https://i.imgur.com/wi8bNT7.jpg&#34; alt=&#34;&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Centre widget responsible for laying out stuff in the centre of the screen&lt;/li&gt;&#xA;&lt;li&gt;Text widget is responsible for putting text and styling text&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;em&gt;💡NOTE:&lt;/em&gt; -&lt;em&gt;It is recommended by flutter team to put a comma after each parenthesis so that when we reformat the code with reformatter provided by dart it becomes neater&lt;/em&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;em&gt;main is important because the code executes from main. It is the starting point of all the flutter apps&lt;/em&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;em&gt;‘//’ are used to write comments&lt;/em&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Now, well add an AppBar(a widget) to our Scaffold and give it a color using the &#39;backgroundColor&#39; property as follows:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;void main() {&#xA;&#x9;runApp(&#xA;&#x9;&#x9;MaterialApp(&#xA;&#x9;&#x9;&#x9;home: Scaffold(&#xA;&#x9;&#x9;&#x9; backgroundColor: Colors.black,&#xA;&#x9;&#x9;&#x9; appBar: AppBar(&#xA;&#x9;&#x9;&#x9;&#x9; title: Text(&#39;I Am Rich&#39;),&#xA;&#x9;&#x9;&#x9;&#x9; backgroundColor: Colors.red,&#xA;&#x9;&#x9;&#x9;&#x9; ),&#xA;&#x9;&#x9;&#x9;&#x9;),&#xA;&#x9;&#x9;&#x9;),&#xA;&#x9;&#x9;);&#xA;&#x9;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Output:&lt;/p&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;https://i.imgur.com/xKQlB8x.jpg&#34; alt=&#34;&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;Now, we have to just insert the image onto our app:&lt;/p&gt;&#xA;&lt;p&gt;We have 3 types of images that we can use on Flutter&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;image: NetworkImage → takes from internet using URL&lt;/li&gt;&#xA;&lt;li&gt;image: asset → takes from the project files&lt;/li&gt;&#xA;&lt;li&gt;image: file → takes locally from PC&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;Let’s do image:asset which will take a local project file and use it in your app . This is usually better as you won&#39;t have to rely on an internet connection to load your app data.&lt;/p&gt;&#xA;&lt;h2 id=&#34;adding-images-onto-our-app-using-the-pubspecyaml-file&#34;&gt;Adding images onto our app (using the pubspec.yaml file) &lt;a class=&#34;anchor&#34; href=&#34;#adding-images-onto-our-app-using-the-pubspecyaml-file&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;We’ll create a new directory inside the flutter app folder and name it images and we’ll put the images we want to use in that folder&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;After putting the image in that folder,now open the pubspec.yaml file&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Now, we need to &lt;strong&gt;UNCOMMENT&lt;/strong&gt; the asset section&#xA;&lt;img src=&#34;https://i.imgur.com/foviy5Z.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;And just add the name of your picture as shown below&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;assets:&#xA;  - images/diamond.png&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;BE VERY CAREFUL ABOUT INDENTATION (TWO SPACES IS CONSIDERED AS INDENTATION.)&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Now, do pub get to import your image inside the project&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Now in the main.dart file add the following code as shown :&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt; void main() {&#xA;     runApp(&#xA;    &#x9;    MaterialApp(&#xA;    &#x9;&#x9;    home: Scaffold(&#xA;    &#x9;&#x9;&#x9;    backgroundColor: Colors.black,&#xA;    &#x9;&#x9;&#x9;    appBar: AppBar(&#xA;    &#x9;&#x9;&#x9;&#x9;    title: Text(&#39;I Am Rich&#39;),&#xA;    &#x9;&#x9;&#x9;&#x9;    backgroundColor: Colors.red, ),&#xA;    &#x9;&#x9;&#x9;&#x9;    body: Center(&#xA;    &#x9;&#x9;&#x9;&#x9;&#x9;    child: Image(&#xA;    &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;    image: AssetImage(&#39;images/diamond.png&#39;),&#xA;    &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   ),&#xA;    &#x9;&#x9;&#x9;&#x9;&#x9;&#x9; ),&#xA;    &#x9;&#x9;&#x9;&#x9;&#x9;       ),&#xA;    &#x9;&#x9;&#x9;&#x9;&#x9;    ),&#xA;    &#x9;&#x9;&#x9;&#x9;&#x9;);&#xA;    &#x9;&#x9;&#x9;&#x9;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;Output&#xA;&lt;img src=&#34;https://i.imgur.com/a87vwlh.jpg&#34; alt=&#34;&#34;&gt;&#xA;&lt;a href=&#34;https://www.siddarthdpai.com/blog4/build/static/media/diamond.bca062e4c59f0e6f8cd5.png&#34;&gt;Click here to download the Diamond Image&lt;/a&gt;&lt;/p&gt;&#xA;&lt;ol start=&#34;7&#34;&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Now what if we have 20-30 images we want to put into the app then putting each images name along with indentation under the asset main class in the .yaml file will be very hard to do and hence we can just write the name of the folder containing the images, as shown below :&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;assets:&#xA; -images/&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;and then include the image file in the main.dart file&#xA;💡NOTE : The pubspec.yaml file is the main configuration file for your Flutter app.&lt;/p&gt;&#xA;&lt;h1 id=&#34;congrats-on-developing-your-first-app-&#34;&gt;Congrats on Developing your first app 🥳🥳🥳🥳🥳 &lt;a class=&#34;anchor&#34; href=&#34;#congrats-on-developing-your-first-app-&#34;&gt;#&lt;/a&gt;&lt;/h1&gt;&#xA;</description>
    </item>
    <item>
      <title>Bot-Camp</title>
      <link>https://hsp-test.netlify.app/homebrew/events/BotCamp.html/</link>
      <pubDate>Tue, 24 Jan 2023 05:30:00 +0530</pubDate>
      <author>HSP</author>
      <guid>https://hsp-test.netlify.app/homebrew/events/BotCamp.html</guid>
      <description>&lt;section class=&#34;p-index_links_link&#34;&gt;&#xA;    &lt;a href=&#34;https://forms.gle/fxtiaRVgcib1qqqN7&#34; class=&#34;c-gradient-link&#34;&gt; 👉 Register Now! &lt;/a&gt;&#xA;&lt;/section&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;/static/images/botcamp/botcamp.jpg&#34; alt=&#34;&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;Curious about building your own Telegram bot but don&#39;t know where to start?&lt;/p&gt;&#xA;&lt;p&gt;Presenting BotCamp, the beginner-oriented, hands-on Telegram bot building workshop from HackerSpace PESUECC! ✨&lt;/p&gt;&#xA;&lt;p&gt;Join us as we guide you to learn the basics of bot development with Telegram.&#xA;Our mentors will be there to guide newcomers through the whole process - from building the bot to deploying it. It&#39;s super easy as well: all you need is a Telegram account and Python!&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;This workshop will be held on the 24th of January, 2023 from 3:45 to 5:30 PM at the Seminar Hall, PESU EC Campus.&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;We’ll talk about, and have you experience -&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Building your first Telegram bot using BotFather.&lt;/li&gt;&#xA;&lt;li&gt;Deploying the Telegram bot and using it on the App.&lt;/li&gt;&#xA;&lt;li&gt;Variations in the of tasks(&lt;em&gt;mimic chats&lt;/em&gt; etc.) the bot can do.&lt;/li&gt;&#xA;&lt;li&gt;A quick Q&amp;amp;A session with the Mentor team of HackerSpace to know how to push ahead your bot development skills.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;Don&#39;t miss this chance to jumpstart your bot-building journey. Register now!!&lt;/p&gt;&#xA;&lt;p&gt;You can read more about the event &lt;a href=&#34;https://homebrew.hsp-ec.xyz/posts/botcamp-or-the-telegram-bot-workshop/&#34;&gt;here&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://forms.gle/fxtiaRVgcib1qqqN7&#34;&gt;Click here to register directly&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Registrations close on 22nd Jan!&#xA;&lt;strong&gt;&lt;em&gt;We can&#39;t wait to see you there!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;For any further questions contact: Anirudh Rowjee, +91 9980029716&lt;/p&gt;&#xA;</description>
    </item>
    <item>
      <title>Data Structures for Beginners |  A Complete Guide</title>
      <link>https://hsp-test.netlify.app/blog/DataStructures.html/</link>
      <pubDate>Fri, 06 Jan 2023 05:30:00 +0530</pubDate>
      <author>HSP</author>
      <guid>https://hsp-test.netlify.app/blog/DataStructures.html</guid>
      <description>&lt;h1 id=&#34;table-of-contents&#34;&gt;Table of Contents &lt;a class=&#34;anchor&#34; href=&#34;#table-of-contents&#34;&gt;#&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#introduction&#34;&gt;Introduction:&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#topics-covered&#34;&gt;Topics covered:&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#big-o-notation&#34;&gt;Big O Notation&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#lets-take-a-simple-example&#34;&gt;Let&#39;s take a simple example:&lt;/a&gt;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#approach-1-using-list-structure&#34;&gt;Approach 1: Using List structure&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#approach-2-using-binary-search-tree-or-binary-search-on-sorted-list&#34;&gt;Approach 2: Using Binary Search Tree (or binary search on sorted list&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#approach-3using-hashmap-or-hashset-the-most-efficient-for-unique-data&#34;&gt;Approach 3:Using Hashmap or Hashset (the most efficient for unique data)&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#data-structures-are-mainly-of-two-types&#34;&gt;Data Structures are mainly of two types:&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#1list&#34;&gt;1.List&lt;/a&gt;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#time-complexity-of-lists&#34;&gt;Time complexity of lists:&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#2stack&#34;&gt;2.Stack&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#3queue&#34;&gt;3.Queue&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#tree&#34;&gt;Tree&lt;/a&gt;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#time-complexity-of-bst&#34;&gt;Time complexity of BST:&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#hashmap&#34;&gt;Hashmap&lt;/a&gt;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#time-complexity-of-hash-table&#34;&gt;Time complexity of Hash Table:&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#graph&#34;&gt;Graph&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;introduction&#34;&gt;Introduction: &lt;a class=&#34;anchor&#34; href=&#34;#introduction&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Most of us see a question and just start typing out some logic that comes to our mind. Most of the time we don’t give importance to which approach is to be followed. While a program can have many possible answers, there is only a few which is optimal. As good programmers our aim is to find the most optimal solution.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;So how can we do this?&lt;/em&gt;&#xA;&lt;img src=&#34;https://repository-images.githubusercontent.com/228240003/fa382e00-1bd2-11eb-992b-34d211d11cc2&#34; alt=&#34;Data structure and algorithm&#34;&gt;&#xA;That&#39;s right!! The answer is &lt;code&gt;Data Structures and Algorithms&lt;/code&gt;!!!.&#xA;With these two ‘weapons’ we can solve any complex question and also make our approach optimal.&lt;/p&gt;&#xA;&lt;p&gt;In this post we are going to cover the basics about Data Structures.&lt;/p&gt;&#xA;&lt;h2 id=&#34;topics-covered&#34;&gt;Topics covered: &lt;a class=&#34;anchor&#34; href=&#34;#topics-covered&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Importance of Data Structures&lt;/li&gt;&#xA;&lt;li&gt;Sample statistic to show need for Data Structures&lt;/li&gt;&#xA;&lt;li&gt;List of Data Structures&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Each Data structure is a vast topic by itself, due to this reason many topics are only discussed on a very basic level and there is a lot more to learn about them.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;em&gt;So grab your cup of coffee and dive in!!!&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;Let&#39;s start off with the main question.&#xA;&lt;em&gt;Why should I use Data Structure in my logic?&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;Imagine you have a whole rack of books scattered everywhere without any specific order or arrangement. You would take a really long time to search for one book right.&#xA;But what if you took a little extra time to arrange it in the right position? Wouldn’t it save you a lot of time in all future searches for a book.&lt;/p&gt;&#xA;&lt;p&gt;That’s what data structures are about. It makes the data more organised for the purpose and makes future operations on it easier and faster, provided the data is inserted in the right order (i.e., using the appropriate data structure)&#xA;It is very important to choose the right structure based on the need and application. We should consider which operation is done the most and choose a structure which can optimise that operation.&lt;/p&gt;&#xA;&lt;h2 id=&#34;big-o-notation&#34;&gt;Big O Notation &lt;a class=&#34;anchor&#34; href=&#34;#big-o-notation&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;To compare the efficiency of different data structures we use something known as the Big O Notation.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Big O Notation is widely used to measure the efficiency of an algorithm in terms of its time and space requirements.&#xA;&lt;code&gt;Time complexity&lt;/code&gt; is the computation time taken for the code to execute as the input size increases.&#xA;&lt;code&gt;Space complexity&lt;/code&gt; is the amount of memory used for its execution.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Linear complexity O(n): means that for an input of size &#39;n&#39; we have the code performing &#39;n&#39; instructions.&lt;/li&gt;&#xA;&lt;li&gt;Quadratic complexity O(n&lt;sup&gt;2&lt;/sup&gt;): means that for an input of size &#39;n&#39; the code performs &#39;n&lt;sup&gt;2&lt;/sup&gt;&#39; instructions.&lt;/li&gt;&#xA;&lt;li&gt;Constant complexity O(1): means that for an input of size &#39;n&#39; the code performs only a constant number of instructions irrespective of the size of input. This gets very efficient when the size is very large.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;em&gt;All the complexity tables discussed further are the average case complexities as worst case are the upper bound and efficiency of a structure cannot be appreciated and compared using worst case.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;Now that we are clear with complexities, let&#39;s go ahead with some statistics.&lt;/p&gt;&#xA;&lt;h2 id=&#34;lets-take-a-simple-example&#34;&gt;Let&#39;s take a simple example: &lt;a class=&#34;anchor&#34; href=&#34;#lets-take-a-simple-example&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;-&amp;gt;You want to search for some of your favourite books in your large collection of books(example of insert once, search multiple times)&lt;/p&gt;&#xA;&lt;h3 id=&#34;approach-1-using-list-structure&#34;&gt;Approach 1: Using &lt;strong&gt;List&lt;/strong&gt; structure &lt;a class=&#34;anchor&#34; href=&#34;#approach-1-using-list-structure&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;p&gt;You had arranged all yours books in a random order in your racks. Now you will have to search the collection linearly to find the book and worst still if you had forgotten that your friend had borrowed that book, you will end up searching the entire collection for no reason.&#xA;&lt;code&gt;Time complexity:O(n)&lt;/code&gt;[linear complexity]&lt;/p&gt;&#xA;&lt;h3 id=&#34;approach-2-using-binary-search-tree-or-binary-search-on-sorted-list&#34;&gt;Approach 2: Using &lt;strong&gt;Binary Search Tree&lt;/strong&gt; (or binary search on sorted list &lt;a class=&#34;anchor&#34; href=&#34;#approach-2-using-binary-search-tree-or-binary-search-on-sorted-list&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;p&gt;Say you had arranged the books in alphabetical order. You can check the middle book first, if it comes after the name of your favourite book then search the first half, or else search the second half(known as &lt;code&gt;decrease and conquer&lt;/code&gt; method).&#xA;You have now reduced the time complexity to &lt;code&gt;O(log n)&lt;/code&gt; [logarithmic time complexity]&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Now if you are familiar with time complexities you may question how is this efficient if it is not sorted cause major sorting techniques take a time of O(n log&lt;sub&gt;2&lt;/sub&gt;n) and then an additional O(log&lt;sub&gt;2&lt;/sub&gt;n) for binary search while searching linearly would take only O(n)&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;Here is where the matter of which operation is performed the most comes into play, in this example sorting would be done once but we are doing search operation multiple times, in the long run Binary search proves to be more efficient than linear search.&lt;/p&gt;&#xA;&lt;h3 id=&#34;approach-3using-hashmap-or-hashset-the-most-efficient-for-unique-data&#34;&gt;Approach 3:Using &lt;strong&gt;Hashmap or Hashset&lt;/strong&gt; (the most efficient for unique data) &lt;a class=&#34;anchor&#34; href=&#34;#approach-3using-hashmap-or-hashset-the-most-efficient-for-unique-data&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;p&gt;Now hashmaps is a data structure that can be used for unique data or data with unique keys.&#xA;If your library racks had a number for each position and you were able to find a unique value(called hash value) for each book using some function(called hash function) then you can place it in that position. Now when you want to search for your book all you have to do is find the hash value from the hash function and go to that position and take your book.&#xA;We have now found a way to search the book in constant time independant of your total number of books.&#xA;This is called constant time complexity, denoted by &lt;code&gt;O(1)&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Hashset is similar to hashmap except the fact that hashmap always points to a unique key(has key-value pairs) but hashset can have same hashcode(stored as object, no key-value pairs) for two elements leading to collisions.This is why hashmaps are faster than hashsets.&#xA;&lt;br/&gt;&#xA;&lt;br/&gt;&#xA;Time taken for 10&lt;sup&gt;6&lt;/sup&gt; search queries in a dataset of 10&lt;sup&gt;4&lt;/sup&gt; unique elements&lt;/p&gt;&#xA;&lt;p&gt;Click on output to view code&#xA;&lt;a href=&#34;https://user-images.githubusercontent.com/60323193/211067255-d7d674c2-eb23-4135-a91e-94726ff53bb2.jpg&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/60323193/211066418-e0dd0d10-ecea-4ed1-9b06-8537eb5e4496.jpg&#34; alt=&#34;Sample statistic output&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Now that we have understood the need for Data Structures let&#39;s dive into the various types of data structures!&lt;/p&gt;&#xA;&lt;h3 id=&#34;data-structures-are-mainly-of-two-types&#34;&gt;Data Structures are mainly of two types: &lt;a class=&#34;anchor&#34; href=&#34;#data-structures-are-mainly-of-two-types&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;p&gt;-&amp;gt;&lt;strong&gt;Linear&lt;/strong&gt;(Eg: list,stack,queue,hashmap(dictionary in python),hashset(sets in python))&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;In this type, the elements may be placed randomly or sequentially in the computer memory based on the implementation, but the access is always sequential.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;-&amp;gt;&lt;strong&gt;Non-Linear&lt;/strong&gt;(Eg: Tree,Graph)&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;In this type, the elements may be placed randomly or sequentially in the computer memory and even the access can be sequential or random.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/60323193/211022330-cc2a86c8-be4d-4139-a1dd-c5e752901d14.png&#34; alt=&#34;Classification of data structures&#34;&gt;&#xA;&lt;figcaption&gt;&lt;p&gt;For all the data structures the main operations that we can perform are: &lt;code&gt;create&lt;/code&gt;,&lt;code&gt;insert&lt;/code&gt;,&lt;code&gt;delete&lt;/code&gt;,&lt;code&gt;search&lt;/code&gt;,&lt;code&gt;destroy&lt;/code&gt;.&lt;/p&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;h3 id=&#34;1list&#34;&gt;1.List &lt;a class=&#34;anchor&#34; href=&#34;#1list&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;p&gt;A basic structure where all the elements are always accessed sequentially.&#xA;&lt;strong&gt;Uses&lt;/strong&gt;:&#xA;This structure can be used when we want to access all the elements in a sequential manner with lesser memory consumption.&#xA;It is mostly used to implement other data structures and it offers very limited use by itself.&lt;/p&gt;&#xA;&lt;p&gt;A list can be implemented by two ways:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;Array&lt;/strong&gt;: the storage is sequential in the memory.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Linked list&lt;/strong&gt;: the storage in memory can be random, this can be achieved by linking the current to next with a pointer(this leads to additional memory requirement).&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Linked list are of various types like singly linked list, doubly linked list, circular singly linked list, etc, &lt;strong&gt;which are not going to be discussed in detail in this post&lt;/strong&gt;.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;Time complexity of every structure depends on the implementation of the structure.&lt;/p&gt;&#xA;&lt;h4 id=&#34;time-complexity-of-lists&#34;&gt;Time complexity of lists: &lt;a class=&#34;anchor&#34; href=&#34;#time-complexity-of-lists&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;p&gt;| Operation | Array implementation | Linked list implementation |&#xA;| :-------: | :------------------: | :------------------------: |&#xA;|  Search   |         O(n)         |            O(n)            |&#xA;|  Insert   |         O(n)         |            O(1)            |&#xA;|  Delete   |         O(n)         |            O(1)            |&#xA;|  Access   |         O(1)         |            O(n)            |&lt;/p&gt;&#xA;&lt;p&gt;Space complexity: &lt;code&gt;O(n)&lt;/code&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Space required to implement list using linked list is more precisely O(2n) due to additional pointers but it is approximated to be O(n).&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;2stack&#34;&gt;2.Stack &lt;a class=&#34;anchor&#34; href=&#34;#2stack&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;p&gt;A list with a top pointer makes a stack. This list can be accessed or modified only through the top pointer and the other elements remain inaccessible.&#xA;This structure is used when we want to do a last in first out operation (LIFO).&#xA;Push means inserting into a stack and pop means removing it from the stack. Peek means just viewing the top of the stack.&#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/60323193/211024135-1f0e7315-2399-4881-a27f-dba11ec70c10.png&#34; alt=&#34;stack image&#34;&gt;&#xA;&lt;strong&gt;Uses&lt;/strong&gt;:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Recursive stack maintained by the program between calls.&lt;/li&gt;&#xA;&lt;li&gt;Infix to prefix or postfix conversion.&lt;/li&gt;&#xA;&lt;li&gt;Undo and redo in editors.&#xA;Time and space complexity depends on the implementation of stack(using array or linked list).&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;3queue&#34;&gt;3.Queue &lt;a class=&#34;anchor&#34; href=&#34;#3queue&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;p&gt;A list with a front and rear pointer makes a queue structure. This structure can only be modified via its front or rear pointers while the others remain inaccessible.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Various implementations of queues are possible like simple queue, circular queue, double ended queue, priority queue, etc. (The only difference is how the front and rear pointers are defined and what they perform).&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;Enqueue means pushing into the queue from the rear end and dequeue means taking an element out from the front end.&#xA;A queue is a first in first out(FIFO) structure.&lt;/p&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/60323193/211024287-ac5975e4-b6d5-4e69-8c99-268194a7ed8e.png&#34; alt=&#34;queue image&#34;&gt;&#xA;&lt;figcaption&gt;&lt;p&gt;&lt;strong&gt;Uses&lt;/strong&gt;:&lt;/p&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;CPU scheduling&lt;/li&gt;&#xA;&lt;li&gt;Binary tree traversal(iterative version)&lt;/li&gt;&#xA;&lt;li&gt;Breadth-First-Search(BFS)&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;Just like stacks the queue structure can also be implemented using lists and have their corresponding complexities.&lt;/p&gt;&#xA;&lt;h3 id=&#34;tree&#34;&gt;Tree &lt;a class=&#34;anchor&#34; href=&#34;#tree&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;p&gt;This is one of the most important structure and has wide range of uses, even the files stored in your system uses a tree structure.&#xA;Trees have various sub-structures which can be used as per the need.&#xA;E.g.: AVL, splay tree, RBT (red black tree), BST (binary search tree), Trie tree, heaps, B Trees.&#xA;&lt;em&gt;Due to the vastness of the topic, these won’t be discussed in detail.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Uses&lt;/strong&gt;:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;AVL&lt;/strong&gt;:&#xA;A balanced tree which can be used for cases with few insertions and large search queries.&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;O(log&lt;sub&gt;2&lt;/sub&gt;n)-for search&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Splay Tree&lt;/strong&gt;:&#xA;A structure which can be used to move the most recent search to the top thus making it easier to search it in the future.&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;E.g.:In hospital records: a record which is searched once will be needed more frequently than those of discharged patients so moving this to a more easier to search position reduces the time for search queries.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;BST&lt;/strong&gt;:&#xA;A binary tree in which the root&#39;s value is greater than each left subtree and lesser than each right subtree makes a binary search tree.Inserting is time comsuming but search complexity is logarithmic so it is used for scenarios with few insertions and multiple searches.&#xA;&lt;img src=&#34;https://cdn.educba.com/academy/wp-content/uploads/2021/05/Binary-Tree-vs-Binary-Search-Tree.jpg&#34; alt=&#34;Binary tree vs Binary search tree&#34;&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;time-complexity-of-bst&#34;&gt;Time complexity of BST: &lt;a class=&#34;anchor&#34; href=&#34;#time-complexity-of-bst&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;p&gt;| Operation | Average Time Complexity |&#xA;| :-------: | :---------------------: |&#xA;|  Search   |   O(log&lt;sub&gt;2&lt;/sub&gt;n)   |&#xA;|  Insert   |   O(log&lt;sub&gt;2&lt;/sub&gt;n)   |&#xA;|  Delete   |   O(log&lt;sub&gt;2&lt;/sub&gt;n)   |&#xA;|  Access   |   O(log&lt;sub&gt;2&lt;/sub&gt;n)   |&lt;/p&gt;&#xA;&lt;p&gt;Space complexity: &lt;code&gt;O(n)&lt;/code&gt;&#xA;&lt;br/&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Trie Tree&lt;/strong&gt;:&#xA;Trie tree (also known as prefix tree or digital tree) is a type of &lt;a href=&#34;https://en.wikipedia.org/wiki/M-ary_tree&#34;&gt;k-ary&lt;/a&gt; search tree which can be used for searching keys.&#xA;Using BST to search for a word of length M in a set of N keys then time time complexity would be &lt;code&gt;O(M*log N)&lt;/code&gt;[for a well balanced BST], but using Trie we can bring it down to &lt;code&gt;O(M)&lt;/code&gt;.&#xA;But at what cost do we get this benefit?&#xA;The space complexity of a Trie.&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;While most structures take linear or logarithmic space, trie trees have quadratic space complexity because of all the pointers it holds for each key.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Trie can be used for autocorrect features, dictionaries and substring matching.&lt;/p&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;https://static.javatpoint.com/ds/images/trie-data-structure.png&#34; alt=&#34;trie tree image&#34;&gt;&#xA;&lt;figcaption&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Heaps&lt;/strong&gt;:&#xA;A tree should have two properties to be called a heap.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Structural property&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;the tree should be a complete binary tree.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Value property(parental dominance)&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;all the parent nodes should have a value greater than the child nodes(if maxheap) or all the parent nodes should have value lesser than the child nodes(if minheap).&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;It is a tree structure which can be used for sorting (heap sort) and priority implementation (priority queues).&lt;/p&gt;&#xA;&lt;br/&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;B Trees&lt;/strong&gt;:&#xA;It is a balanced tree which makes the execution speed to retrieve information from the disc faster by increasing the number of children.&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;A balanced binary tree reduces the time complexity of search to O(log&lt;sub&gt;2&lt;/sub&gt;n), similarly a balanced tree with &#39;m&#39; child nodes can do the search in O(log&lt;sub&gt;m&lt;/sub&gt;n). This forms the basis of B Trees.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;https://static.javatpoint.com/ds/images/b-tree.png&#34; alt=&#34;B tree image&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;h3 id=&#34;hashmap&#34;&gt;Hashmap &lt;a class=&#34;anchor&#34; href=&#34;#hashmap&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;p&gt;A hashmap is created by calculating a hash value for each element and using it to place it in the hashmap. When searching for an element, the hash value can be calculated and searched in constant time.&#xA;This structure can be used to get the fastest search result cause it can search in constant time (lots of collisions can make it O(n) which is very unlikely).&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Collision occurs when two or more elements have the same hash value. Collision handling is done by linear probing, quadratic probing, double hashing, separate chaining or rehashing.&#xA;Rehashing is done when the space in the map is not enough. To maintain an optimal hashmap the load factor(load factor = number of elements/total size of hashmap) is set to 0.75 which ensures minimum collisions.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h4 id=&#34;time-complexity-of-hash-table&#34;&gt;Time complexity of Hash Table: &lt;a class=&#34;anchor&#34; href=&#34;#time-complexity-of-hash-table&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;p&gt;| Operation | Average Time Complexity |&#xA;| :-------: | :---------------------: |&#xA;|  Search   |          O(1)           |&#xA;|  Insert   |          O(1)           |&#xA;|  Delete   |          O(1)           |&#xA;|  Access   |           N/A           |&lt;/p&gt;&#xA;&lt;p&gt;Space complexity: &lt;code&gt;O(n)&lt;/code&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;graph&#34;&gt;Graph &lt;a class=&#34;anchor&#34; href=&#34;#graph&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;p&gt;A graph is a set of nodes(vertices) connected by edges. A graph can be cyclic or acyclic, directed or undirected, weighted or unweighted, connected or not connected.&lt;/p&gt;&#xA;&lt;p&gt;A graph can be implemented using any of the following:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Adjacency Matrix&lt;/li&gt;&#xA;&lt;li&gt;Adjacency List&lt;/li&gt;&#xA;&lt;li&gt;Adjacency Multilist&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;A graph can be traversed by:&#xA;&lt;code&gt;Depth First Search(DFS)&lt;/code&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Check connectivity of graph, check if path exists between two vertices, check number of components in the graph.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;code&gt;Breadth First Search(BFS)&lt;/code&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Helps to get the shortest path between two vertices and can do everything that a DFS traversal can do.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;Uses&lt;/strong&gt;:&#xA;Graphs can be used in computer networks, social analysis and shortest path problems.&#xA;&lt;img src=&#34;https://miro.medium.com/max/1400/1*IBtDZq0_4yWpXt0mhda0jw.png&#34; alt=&#34;graph image&#34;&gt;&lt;/p&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;https://i.imgflip.com/6r3do9.jpg&#34; alt=&#34;end image&#34;&gt;&#xA;&lt;figcaption&gt;&lt;p&gt;Data structures by itself is a very extensive topic and I have tried my best to keep it short and to the point but data structures have a lot more to offer and everything mentioned above is just a bird&#39;s view of the vast world of data structures.&lt;/p&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;Kudos to those who had the patience to read the entire post.&lt;/p&gt;&#xA;&lt;p&gt;I would like to conclude the blog with a famous quote by Linus Torvalds.&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;&amp;quot;Bad programmers worry about the code. Good programmers worry about data structures and their relationships.&amp;quot;&lt;/code&gt;&lt;/p&gt;&#xA;</description>
    </item>
    <item>
      <title>Large git objects and the power of git rebase.</title>
      <link>https://hsp-test.netlify.app/blog/large_objects.html/</link>
      <pubDate>Sat, 31 Dec 2022 05:30:00 +0530</pubDate>
      <author>HSP</author>
      <guid>https://hsp-test.netlify.app/blog/large_objects.html</guid>
      <description>&lt;h1 id=&#34;table-of-contents&#34;&gt;Table of Contents &lt;a class=&#34;anchor&#34; href=&#34;#table-of-contents&#34;&gt;#&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#preface&#34;&gt;Preface&lt;/a&gt;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#large-objects-why-did-i-just-clone-150-mb&#34;&gt;Large Objects: Why did I just clone ~150 MB?&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#solution-rebase-or-git-filter-branch&#34;&gt;Solution: Rebase or git filter-branch&lt;/a&gt;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#git-rebase&#34;&gt;git rebase&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#applying-rebase&#34;&gt;Applying rebase&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#conclusion&#34;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;preface&#34;&gt;Preface &lt;a class=&#34;anchor&#34; href=&#34;#preface&#34;&gt;#&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;p&gt;&lt;code&gt;git rebase&lt;/code&gt;, is a command I&#39;ve heard only the true git master ninjas use. A command that baffled me for years was finally demystified! Let&#39;s first set the scene. I wanted to read some code (source code) from the site you are currently browsing, so like all programmers I went ahead and cloned the repo. It was SLOW, why? well, git was trying to clone ~150 MB of data. WHAT, why?&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Note: I had already fixed the issues, force pushed and cleared my reflog. Hence I had to rebuild the said issues, so it may seem a bit off.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;large-objects-why-did-i-just-clone-150-mb&#34;&gt;Large Objects: Why did I just clone ~150 MB? &lt;a class=&#34;anchor&#34; href=&#34;#large-objects-why-did-i-just-clone-150-mb&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;So, typically I first did this :&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone git@github.com:NavinShrinivas/homebrew-internethome.git&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Note: The above repo is a fork of this website with this issue replicated.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;And this is where we first notice something off :&#xA;&lt;img src=&#34;https://imgur.com/7SrYL9o.png&#34; alt=&#34;image of large object during clone&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;One&#39;s first guess would be large file size, so let&#39;s go in search of it :&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;du | sort -n&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;https://imgur.com/qfoR6Oy.png&#34; alt=&#34;checking file size and sorting&#34;&gt;&#xA;&lt;figcaption&gt;&lt;p&gt;What we instead see here is that the .git folder (something that we don&#39;t manually track) is the largest! Well, now I gotta see why is the image in the .git being so large. After googling a bit and I found this nifty script that tells which item in the repository is consuming the maximum space in the images.&lt;/p&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git rev-list --objects --all |&#xA;git cat-file --batch-check=&#39;%(objecttype) %(objectname) %(objectsize) %(rest)&#39; |&#xA;sed -n &#39;s/^blob //p&#39; |&#xA;sort --numeric-sort --key=2 |&#xA;cut -c 1-12,41- |&#xA;$(command -v gnumfmt || echo numfmt) --field=2 --to=iec-i --suffix=B --padding=7 --round=nearest&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Note: the above command acts as 1, it doesn&#39;t hold much importance in this blog.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;https://imgur.com/OwtXpsZ.png&#34; alt=&#34;image showing induvidual item in object sizes&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;Well well well, it&#39;s not a single file making this happen. It&#39;s a bunch of font files that are bloating the image. Phew, easy fix, let&#39;s just delete those files no? Well, if one does a &lt;code&gt;ls&lt;/code&gt; on the repo, there is no folder 16/ or those files!!! That&#39;s when it occurs to me, those folders are no more part of the tracked files but git is having them tracked in previous commits (One for the addition of those files and another commit for deletion of them).&lt;/p&gt;&#xA;&lt;h2 id=&#34;solution-rebase-or-git-filter-branch&#34;&gt;Solution: Rebase or git filter-branch &lt;a class=&#34;anchor&#34; href=&#34;#solution-rebase-or-git-filter-branch&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Before I could fix this, I need to find the commit that introduced and deleted these items. A quick GitHub search gives me what I&#39;m looking for.&#xA;&lt;a href=&#34;https://github.com/NavinShrinivas/homebrew-internethome/commit/70e96ff861b572d5a7430970bdb9fc72615d9712&#34;&gt;addition commit&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/NavinShrinivas/homebrew-internethome/commit/b37d866776e1186b2c2d46d5759d15ae7b5c6ba9&#34;&gt;deletion commit&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;One of the other solutions that I came across was a git filter branch that allows you to execute a command on every commit (between 2 hashes). So one could have simply removed the existence of that folder from every commit between those two.&lt;/p&gt;&#xA;&lt;p&gt;But I went the rebase way. Now would be a good time to gain intuition on rebase.&lt;/p&gt;&#xA;&lt;h3 id=&#34;git-rebase&#34;&gt;git rebase &lt;a class=&#34;anchor&#34; href=&#34;#git-rebase&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;p&gt;Surprisingly, rebase has all it has to right in its name. It lets you change the base of a given branch. That is, it lets you modify the base (previous commit) keeping the head the same!&lt;/p&gt;&#xA;&lt;h3 id=&#34;applying-rebase&#34;&gt;Applying rebase &lt;a class=&#34;anchor&#34; href=&#34;#applying-rebase&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;p&gt;I used an &amp;quot;interactive&amp;quot; mode for git rebase, this can be done by :&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git rebase -i hash_of_commit_you_want_to_rebase_from&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;In our case, I decided to rebase from &lt;a href=&#34;https://github.com/NavinShrinivas/homebrew-internethome/commit/886448910588f6332c665abd8af44cbca4fd7e2d&#34;&gt;here&lt;/a&gt;(it&#39;s the commit right behind the addition commit)&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git rebase -i 886448910588f6332c665abd8af44cbca4fd7e2d&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;This opens up a nice document in your editor :&#xA;&lt;img src=&#34;https://imgur.com/I7HMBbu.png&#34; alt=&#34;interactive rebase&#34;&gt;&#xA;Let&#39;s save and quit this document after changing those 2 commits to edit. Git being the very elaborate tool it is stops at all those commits we&#39;ve asked to edit.&#xA;&lt;img src=&#34;https://imgur.com/B2Fkz1d.png&#34; alt=&#34;edit commit 1&#34;&gt;&#xA;Now, we can do whatever change we want, and do &lt;code&gt;git add .&lt;/code&gt;. Then let&#39;s simply follow what git tells us by doing amend and continue. In our case :&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ rm -rf 16&#xA;$ git add .&#xA;$ git commit --amend #save and quit&#xA;$ git rebase --continue&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;https://imgur.com/6ffxxka.png&#34; alt=&#34;image after first rebase fix&#34;&gt;&#xA;&lt;figcaption&gt;&lt;p&gt;For our second commit fix, it&#39;s like we never had the folder called 16. So we don&#39;t have to do anything. Just amend and continue!&#xA;&lt;img src=&#34;https://imgur.com/xo8MITF.png&#34; alt=&#34;image after rebase commit 2&#34;&gt;&#xA;So in theory we have entered our commit history and removed the existence of those files EVER. All we gotta do is push these changes to the remote.&#xA;Oh, uhh. The histories are different, which implies we need to force push. This also means others have to force pull :(&lt;/p&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;It was at this point I figured that this solution does fix my problem but is not the perfect way. Little googling tells me that there are better ways to rebase.&#xA;Anyways, let&#39;s force push and clone again to see if our fix worked.&lt;/p&gt;&#xA;&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion &lt;a class=&#34;anchor&#34; href=&#34;#conclusion&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone git@github.com:homebrew-ec-foss/homebrew-internethome.git&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Note: the repo I&#39;m cloning here is the one that is fixed!&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;https://imgur.com/90C9lRB.png&#34; alt=&#34;clone after rebase&#34;&gt;&#xA;&lt;figcaption&gt;&lt;p&gt;WOOT! 5 MB was our clone size and it was much faster! This goes to show, git is a powerful tool, we simply don&#39;t know what it can do. I conclude this blog with a quote by one of my friends &amp;quot;The best way to learn git is to need it.&amp;quot;&lt;/p&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;</description>
    </item>
    <item>
      <title>What Linux Distro To Choose? | A Beginner&#39;s Guide</title>
      <link>https://hsp-test.netlify.app/blog/distroWars.html/</link>
      <pubDate>Sat, 10 Dec 2022 05:30:00 +0530</pubDate>
      <author>HSP</author>
      <guid>https://hsp-test.netlify.app/blog/distroWars.html</guid>
      <description>&lt;h1 id=&#34;table-of-contents&#34;&gt;Table of Contents &lt;a class=&#34;anchor&#34; href=&#34;#table-of-contents&#34;&gt;#&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#what-is-a-distro&#34;&gt;What Is A Distro?&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#yes-thats-complicated&#34;&gt;YES, That&#39;s Complicated.&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#what-does-google-tell-you&#34;&gt;What does Google tell you?&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#what-distros-do-we-have&#34;&gt;What distros do we have?&lt;/a&gt;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#ubuntu&#34;&gt;Ubuntu&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#linux-mint&#34;&gt;Linux Mint&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#zorin-os&#34;&gt;Zorin OS&lt;/a&gt;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#the-1-distro-i-recommend-personally-to-any-new-linux-user&#34;&gt;THE #1 DISTRO I RECOMMEND PERSONALLY TO ANY NEW LINUX USER!&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#fedora&#34;&gt;Fedora&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#pop-os&#34;&gt;Pop!_OS&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#elementary-os&#34;&gt;Elementary OS&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#what-do-we-recommend&#34;&gt;What Do We Recommend?&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#the-other-distros&#34;&gt;The other distros&lt;/a&gt;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#arch-linux&#34;&gt;Arch Linux&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#gentoo-linux&#34;&gt;Gentoo Linux&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#the-joke-distros&#34;&gt;The Joke Distros&lt;/a&gt;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#hannah-montana-linux&#34;&gt;Hannah Montana Linux&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#amongos&#34;&gt;AmongOS&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#faqs-and-wrapping-up&#34;&gt;FAQs and Wrapping Up&lt;/a&gt;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#1-what-is-the-easiest-linux-distribution&#34;&gt;1. What is the easiest Linux distribution?&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#2-what-is-the-fastestlightest-linux-distribution&#34;&gt;2. What is the fastest/lightest Linux Distribution?&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#3-can-i-run-windows-apps-on-linux&#34;&gt;3. Can I run Windows apps on Linux?&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#4-do-i-need-an-anti-virus-on-linux&#34;&gt;4. Do I need an anti-virus on Linux?&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;introduction&#34;&gt;Introduction &lt;a class=&#34;anchor&#34; href=&#34;#introduction&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;If you are manifesting joining the Linux clan and thinking about it, it’s time. It’s time to ditch Windows for good and save some money by doing so. Also, keep your sanity from monthly Windows updates that are gigabytes in size, save on your internet bill, save precious time watching a dumb blue screen and so on. The blessing of ditching the Windows list is pretty long.&lt;/p&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;https://www.debugpoint.com/wp-content/uploads/2022/07/This-is-how-you-waste-your-time-and-watch-this-for-hours-per-month.jpg&#34; alt=&#34;windows spinner&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;h2 id=&#34;what-is-a-distro&#34;&gt;What Is A Distro? &lt;a class=&#34;anchor&#34; href=&#34;#what-is-a-distro&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;You&#39;d have read the &lt;a href = &#34;https://homebrew.hsp-ec.xyz/posts/systemctl-start-linux/&#34; target=&#34;_blank&#34;&gt;systemctl start Linux post&lt;/a&gt; and even if you haven&#39;t, it&#39;s okay! We started directly with an introduction to Linux there and how to find your way around a terminal. However, if you&#39;re a beginner and wanted to download Linux, you&#39;d have found a heap of options AKA &lt;code&gt;Distros!&lt;/code&gt; To be precise, these many:&#xA;&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/b/b5/Linux_Distribution_Timeline_21_10_2021.svg&#34; alt=&#34;The distro tree&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;yes-thats-complicated&#34;&gt;YES, That&#39;s Complicated. &lt;a class=&#34;anchor&#34; href=&#34;#yes-thats-complicated&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Nobody in their right mind could keep track of these many &lt;em&gt;Distributions (Distros)&lt;/em&gt; of Linux. Why is it like this in the first place you ask? Why isn&#39;t there one Linux and everybody works on it? Why do you want to make things so complicated by having so many different versions of Linux?&lt;/p&gt;&#xA;&lt;p&gt;Because linux is not an operating system of its own. There IS one Linux, maintained by the almighty &lt;a href = &#34;https://en.wikipedia.org/wiki/Linus_Torvalds&#34; target = &#34;_blank&#34;&gt;Linus Torvalds&lt;/a&gt; along with &lt;a href = &#34;https://github.com/torvalds/linux/graphs/contributors&#34; target = &#34;_blank&#34;&gt;other godly contributors&lt;/a&gt;, but Linux is just a kernel.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Now what is a &lt;strong&gt;Kernel?&lt;/strong&gt; Think of a kernel as the core of an operating system. It acts as the central component of the bridge connecting your software to data processing performed at a hardware level. But, a kernel is not a full operating system. You can think of an operating system similar to your bun samosa. The samosa is the kernel. It gives the flavour to your bun samosa but it isn&#39;t bun samosa by itself! You need a bun to surround it. Just like that, you need other components of software to support the Linux kernel to make a full desktop operating system.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;Now, why doesn&#39;t everybody agree on one implementation of this and make one desktop Linux OS? This is because of the nature of Linux itself. Everybody has &lt;em&gt;the freedom&lt;/em&gt; to implement their OS how they want it, and different organisations make their own Distributions of Linux.&lt;/p&gt;&#xA;&lt;p&gt;Now here&#39;s where the fun begins. This gives raise to a Distro-War. These distros are compared and ranked, and that&#39;s precisely what we are going to do today! but in a more beginner-friendly fashion :)&lt;/p&gt;&#xA;&lt;h2 id=&#34;what-does-google-tell-you&#34;&gt;What does Google tell you? &lt;a class=&#34;anchor&#34; href=&#34;#what-does-google-tell-you&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Being a programmer, the question &#39;What does google tell you?&#39; is a very important one. So what does google recommend when you search for &lt;code&gt;best beginners Linux distro?&lt;/code&gt;&#xA;&lt;img src=&#34;https://i.imgur.com/UwAot1g.png&#34; alt=&#34;Google search result&#34;&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;em&gt;Uh, not very descriptive, is it?&lt;/em&gt; I found myself confused when I started with Linux too, but, you will find your peace in this chaos, eventually, and it will be worthwhile.&lt;/p&gt;&#xA;&lt;h2 id=&#34;what-distros-do-we-have&#34;&gt;What distros do we have? &lt;a class=&#34;anchor&#34; href=&#34;#what-distros-do-we-have&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;ubuntu&#34;&gt;Ubuntu &lt;a class=&#34;anchor&#34; href=&#34;#ubuntu&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;https://res.cloudinary.com/canonical/image/fetch/f_auto,q_auto,fl_sanitize,e_sharpen,c_fill,w_555,h_311/https://ubuntu.com/wp-content/uploads/42e9/desktop_busy.png&#34; alt=&#34;ubuntu desktop&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;The moment you talk about Linux, there is always a mention of Ubuntu.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;For people who do not know what Ubuntu is, it is a linux distro that is recommended to linux beginners blindly. Ubuntu used to be a really great beginners distrubution and honestly, it was my first distro too. Unfortunately, it isn&#39;t anymore and the reasons are explained below&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;It&#39;s almost as if Ubuntu IS Linux and based on how it&#39;s blindly recommended to beginners, I wouldn&#39;t blame you to think Ubuntu is Linux. However, we do not recommend it to beginners. Yes. We do not recommend it. Why? Because Ubuntu has recently made compulsory this thing called &lt;code&gt;snaps&lt;/code&gt;. &lt;code&gt;snaps&lt;/code&gt; are a containerized way to install packages. Since there are so many different distributions, it is difficult to package apps differently for all the different distros. &lt;code&gt;snaps&lt;/code&gt; are a one-size-fits-all solution to this but since snap applications run in a similar way to running a virtual machine on your computer, it is VERY VERY VERY slow 🐌. And trust me when I say slow, a beefy specced-up computer can also take about 5-7 seconds to start up firefox or chrome. When this thing happens across all apps on your system, your system just starts feeling so slow and sluggish that you just want to throw your computer out the window.&lt;/p&gt;&#xA;&lt;p&gt;However, if you ignore snaps, Ubuntu is a good option for people who are not a lot familiar with Linux and are just starting. I say this because there is really good documentation available online for Ubuntu. What this means is that if you run into any kind of problem, it&#39;s easy to just Google it and someone or the other would have had the same problem as you (99% of the time). For the remaining 1%, you can always post on the &lt;code&gt;forums&lt;/code&gt; or stack overflow.&lt;/p&gt;&#xA;&lt;p&gt;Link to Ubuntu Forums: &lt;a href = &#34;https://ubuntuforums.org&#34; target=&#34;_blank&#34;&gt;Ubuntu Forums&lt;/a&gt; and &lt;a href = &#34;https://askubuntu.com&#34; target = &#34;_blank&#34;&gt;Ask Ubuntu&lt;/a&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;code&gt;Forums&lt;/code&gt; are like communities of people using the same software. It&#39;s a common platform for all of these people to talk and ask questions. Think of it similar to a discord server but it&#39;s a website on its own and it&#39;s a bit more organised.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;https://i.imgur.com/q0i1WtJ.png&#34; alt=&#34;pros and cons ubuntu&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;h3 id=&#34;linux-mint&#34;&gt;Linux Mint &lt;a class=&#34;anchor&#34; href=&#34;#linux-mint&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;https://www.linuxmint.com/pictures/screenshots/vanessa/thumb_cinnamon.png&#34; alt=&#34;linux mint desktop&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;Up next, there is Linux Mint! The Distro we recommend the most to beginners. It is a &lt;code&gt;derivative&lt;/code&gt; of Ubuntu but it does not use snaps! What this means for us is that we get all the goodness of Ubuntu, without the bad parts.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;A &lt;code&gt;Derivative&lt;/code&gt; of a distro is when you make a distro from the existing code of another distro. You make the changes to it that you want and then make a distro of your own. Now, this might sound like just copying someone else&#39;s homework but trust me, this is what makes the open-source community amazing. This activity of basing your work off of someone else&#39;s already existing work is called &lt;code&gt;forking&lt;/code&gt; and it&#39;s a very popular thing to do. It benefits everybody as it allows everybody to use everybody else&#39;s work. This way, everybody gets a headstart compared to when everybody keeps their code a secret!&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;Linux Mint also offers a lighter desktop environment, and what this means is that it would run more snappily on older systems as well. It provides a very familiar user interface to a Windows user all while being so lightweight, it could run on your microwave.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;A &lt;code&gt;Desktop Environment&lt;/code&gt; is a piece of software that defined how your GUI feels. It consists of icons, cursor themes, windows, toolbars, docks, wallpapers, desktop widgets, etc. It consists of a window manager and all the GUI components. Examples include GNOME, KDE, LXDE, etc. Some advanced Linux users might choose to go for only a &lt;a href = &#34;https://en.wikipedia.org/wiki/Tiling_window_manager&#34; target = &#34;_blank&#34;&gt;tiling window manager&lt;/a&gt; for increased productivity but that is a whole different topic.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;It also uses the same software repository as Ubuntu. So, every app that was packaged for Ubuntu, can be installed on Linux Mint without any problems. This means that you do not have to worry about the availability of software to install.&#xA;&lt;img src=&#34;https://i.imgur.com/pOghY7B.png&#34; alt=&#34;Pros and cons linux mint&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;zorin-os&#34;&gt;Zorin OS &lt;a class=&#34;anchor&#34; href=&#34;#zorin-os&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;the-1-distro-i-recommend-personally-to-any-new-linux-user&#34;&gt;THE #1 DISTRO I RECOMMEND PERSONALLY TO ANY NEW LINUX USER! &lt;a class=&#34;anchor&#34; href=&#34;#the-1-distro-i-recommend-personally-to-any-new-linux-user&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;https://assets.zorincdn.com/images/releases/12/DefaultLite.png&#34; alt=&#34;zorin desktop&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;Zorin OS, like Linux Mint, is also based on Ubuntu, but it has an amazing user interface that is just pure eye candy, and it manages to look so good while still managing to be lightweight. It&#39;s one of the most beautiful Linux distros out there out of the box.&lt;/p&gt;&#xA;&lt;p&gt;It is one of the only few Linux distributions I found that I could maybe ask my grandma to use and she&#39;d still find it intuitive. Zorin OS also maintains a more conservative approach to software. What this means is that you might not get the latest and greatest versions of software, but what we do get is super polished and stable. This does not mean we get outdated software, it just means we get the same level of polish that a windows app comes with.&lt;/p&gt;&#xA;&lt;p&gt;One thing that makes Zorin OS special is having support for windows apps. Don&#39;t get me wrong, you can &lt;em&gt;still&lt;/em&gt; run windows apps on other Linux distributions but Zorin makes it much easier. It has dedicated software to manage windows apps that make it much easier for a person coming from Windows. It achieves it through this software called &lt;a href=&#34;https://www.winehqorg&#34; target = &#34;_blank&#34;&gt;Wine&lt;/a&gt;. Wine stands for &#39;Wine Is Not An Emulator&#39;. It is a compatibility layer that runs Windows applications on Linux, macOS, BSD, and other &lt;a href = &#34;https://en.wikipedia.org/wiki/POSIX&#34; target = &#34;_blank&#34;&gt;POSIX-Compliant&lt;/a&gt; operating systems. You can learn more about it &lt;a href=&#34;//www.winehq.org/about&#34; target = &#34;_black&#34;&gt;here&lt;/a&gt; but for now, you can just move ahead knowing that &lt;code&gt;Wine&lt;/code&gt; is a software that allows you to run most windows apps on Linux. Anti Cheat software for popular games like Valorant is not runnable using Wine though.&lt;/p&gt;&#xA;&lt;p&gt;Overall, Zorin OS is stable as a rock: has very few bugs, has an amazing &lt;a href=&#34;https://forum.zorin.com&#34;&gt;forum&lt;/a&gt;, has amazing software support, and offers a very easy installation procedure for users who are &lt;code&gt;dual booting&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;code&gt;dual booting&lt;/code&gt; is when you have BOTH Linux and windows on your system. At a given instance, only one of these can be running though. These two operating systems reside on 2 different parts of your drive(hard drive or SSD). It is important to be careful while partitioning your drive for this kind of set-up as it&#39;s very easy to mess something up and leave your system in a bricked state. Zorin OS provides an option in its installer to easily partition your drive for windows and Linux and takes care of the rest for you.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;You can check out Zorin OS and download the ISO file &lt;a href = &#34;https://zorin.com/os/&#34; target = &#34;_blank&#34;&gt;here&lt;/a&gt;&lt;/p&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;https://i.imgur.com/yLqfJKC.png&#34; alt=&#34;pros and cons zorin&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;h3 id=&#34;fedora&#34;&gt;Fedora &lt;a class=&#34;anchor&#34; href=&#34;#fedora&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://liliputing.com/wp-content/uploads/2021/04/fedora-34_01.jpg&#34; alt=&#34;fedora desktop&#34;&gt;̀&lt;/p&gt;&#xA;&lt;p&gt;Fedora is another nice option if you want to try out something new that is not based on Ubuntu Or Arch Linux. Fedora is based on the Red Hat line of distros. Red Hat makes enterprise-level Linux for companies and is very stable. Fedora is the branch of Red Hat that is more focused on enthusiasts and home users.&lt;/p&gt;&#xA;&lt;p&gt;Fedora uses RPMs and the &lt;code&gt;DNF Package Manager&lt;/code&gt; to manage packages. You would maybe be used to the &lt;code&gt;apt&lt;/code&gt; package manager to install things. You might have run something like:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo apt install firefox&#xA; # or&#xA; $ sudo apt-get install firefox&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;These commands use the &lt;code&gt;apt&lt;/code&gt; and &lt;code&gt;apt-get&lt;/code&gt; package managers to install packages or apps, like firefox. These are used in Debian-based distributions like Pop!_OS, Ubuntu, Zorin OS, Linux Mint, etc. Fedora uses the &lt;code&gt;dnf&lt;/code&gt; package manager and a typical install command looks something like this:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; $ sudo dnf install firefox&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Fedora is a modern Linux distribution, so it mostly works well on modern computers. Fedora comes with the RPM Fusion repository, which is a community-maintained repository of applications for Fedora. It makes a huge amount of apps available to install to you, even if they are not in the official repositories of Fedora. Fedora is recommended as a second distro after you get a taste of what Linux is and how it works through the other distros. There are also different &lt;a href = &#34;https://spins.fedoraproject.org&#34; target = &#34;_blank&#34;&gt;spins&lt;/a&gt; of Fedora available that give you different Desktop environments. I recommend the KDE Plasma Desktop for high customizability and the default Gnome Desktop if you want something that looks nice out of the box.&lt;/p&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;https://i.imgur.com/OR6I9px.png&#34; alt=&#34;pros and cons fedora&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;h3 id=&#34;pop-os&#34;&gt;Pop!_OS &lt;a class=&#34;anchor&#34; href=&#34;#pop-os&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;https://149366088.v2.pressablecdn.com/wp-content/uploads/2022/04/pop-os-new-bits.jpg&#34; alt=&#34;Pop!_OS Desktop&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;Pop!_OS is the second most recommended distro according to me. You might recognise this as the distro that &lt;a href=&#34;https://youtu.be/0506yDSgU7M&#34; target = &#34;_blank&#34;&gt;broke Linus&#39;s computer&lt;/a&gt;. But don&#39;t worry, this has been fixed :) Anyway, coming back. Although Pop is based on Ubuntu, it does things differently. It uses a heavily modified version of the GNOME desktop environment called the COSMIC Desktop. The fun part about this is that it is GNOME-based now, but system76, the company that developed Pop!_OS is building the COSMIC desktop from the ground up using Rust - not relying on GNOME. This would put them fully in control of the desktop environment and I&#39;m sure the folks at system76 have ambitious plans to take advantage of this control.&lt;/p&gt;&#xA;&lt;p&gt;So what makes Pop!_OS great for beginners? like Zorin OS, it comes with exclusive support for NVIDIA drivers, It has disk encryption out of the box, It has a program installed called the Pop Shop that is fantastic and it has an excellent community. Since this is based on Ubuntu, you&#39;d find support easily if you run into something.&lt;/p&gt;&#xA;&lt;p&gt;A great thing about the Pop Desktop is that it brings in &lt;code&gt;Tiling Features&lt;/code&gt; by default. Tiling is a type of window manager behaviour. What most people are used to would be a Floating Window Manager. Whenever you open a window, it will just float around on the screen and it&#39;s your responsibility to move it around where you want, resize it and keep it organised. A tiling window manager takes over this job for you. It arranges all the windows in a beautiful way across your screen such that the most amount of screen real estate is used. It tiles the windows in the best way automatically and it is more keyboard-centric. This helps in productivity, especially for a programmer as you wouldn&#39;t have to constantly lift your hands off of the keyboard to the mouse to arrange windows.&lt;/p&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;https://i.imgur.com/ELFrj1k.png&#34; alt=&#34;pros and cons pop!_os&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;h3 id=&#34;elementary-os&#34;&gt;Elementary OS &lt;a class=&#34;anchor&#34; href=&#34;#elementary-os&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;https://www.debugpoint.com/wp-content/uploads/2021/08/elementary-OS-6-ODIN-Desktop.jpeg&#34; alt=&#34;Elementary OS Desktop&#34;&gt;&#xA;&lt;figcaption&gt;&lt;p&gt;The elementary OS is the most famous for its design and looks. It is the best distro for people who are migrating from Mac OS. The UI is heavily inspired by Mac OS. At its core, it is also Ubuntu based but it is powered by the Long Term Support (LTS) Editions - So you are guaranteed security updates and bug fixes for 5 years. It uses the Pantheon desktop environment(which has a very sophisticated, polished appearance). It also has a beautiful App Center for downloading the applications you need. Overall, it&#39;s one of the best distros to go to if you don&#39;t adapt to UI changes very well and are coming from MacOS. Otherwise, I&#39;d suggest the other distros.&lt;/p&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;https://i.imgur.com/0SGtfQB.png&#34; alt=&#34;pros and cons elementary os&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;h2 id=&#34;what-do-we-recommend&#34;&gt;What Do We Recommend? &lt;a class=&#34;anchor&#34; href=&#34;#what-do-we-recommend&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Our recommendation goes in this order:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;code&gt;Zorin OS&lt;/code&gt; - A well-rounded distro for beginners and advanced users alike&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Linux Mint&lt;/code&gt; - A go-to distro for a beginner&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Pop!_OS&lt;/code&gt; - A rock stable distro with a well-designed COSMIC Desktop&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Fedora&lt;/code&gt; - For intermediate users looking for a change&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Elementary OS&lt;/code&gt; - For Mac users who don&#39;t have time for UI tweaks&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;the-other-distros&#34;&gt;The other distros &lt;a class=&#34;anchor&#34; href=&#34;#the-other-distros&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;arch-linux&#34;&gt;Arch Linux &lt;a class=&#34;anchor&#34; href=&#34;#arch-linux&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRgPyPaqIjZeqbqqUmZr4L8kzILkKKIgg8jzUTCR6vS_-4f4uJMyDE3Ng4xHJWu3IBRVkA&amp;amp;usqp=CAU&#34; alt=&#34;God Himself&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;This is the distro most Linux users eventually end up on. It is a highly advanced rolling release distro that helps you build your dream Linux system. It does NOT come with any desktop environment out of the box. That means that all you get after installation is a terminal. That is it. You will need to install everything you need yourself, including drivers, desktop environments/window managers, browsers, and everything. Speaking of installation, Arch Linux has been historically known to have a very advanced installation process. You used to have to do the installation manually. Do the partitions manually through the terminal, install the Linux kernel manually, and so on. So every time you see someone using Arch, you would consider them highly knowledgeable. And people used to show that off too with the phrase &lt;code&gt;I use arch btw&lt;/code&gt; . &lt;em&gt;I use arch btw.&lt;/em&gt;&#xA;However, installation has become easier now since Arch Linux now comes with an &lt;em&gt;installer&lt;/em&gt;. It&#39;s just a script you can run, like a normal CLI program, that asks you a bunch of questions and does all the hard parts of installation for you. The people who use the installer script are however looked down upon. Only the hardcore bare bones advanced Linux users make it on to the Holy Arch Linux!&lt;/p&gt;&#xA;&lt;p&gt;Arch also comes with the &lt;code&gt;Arch Wiki&lt;/code&gt; - The best documentation I know out of all the projects I&#39;ve come across. The Arch Wiki is just a beautiful piece of literature. It helps you through everything arch. More often than not, you&#39;d find answers for problems with other distros as well on the Arch Wiki.&lt;/p&gt;&#xA;&lt;p&gt;Some users do not like to use the init system that Arch Linux uses - systemd. systemd is simple to use and easy for beginners but it&#39;s incredibly bloated. Don&#39;t worry if you&#39;re a beginner and do not understand this :) These users, choose to use an OS like &lt;a href=&#34;https://artixlinux.org&#34; target=&#34;_blank&#34;&gt;Artix Linux&lt;/a&gt;. It does not use systemd but instead uses an init system called &lt;code&gt;runit&lt;/code&gt;. runit is simpler, faster and better for daily use. It involves a lot more manual set up but it&#39;s much lighter than systemd.&lt;/p&gt;&#xA;&lt;h3 id=&#34;gentoo-linux&#34;&gt;Gentoo Linux &lt;a class=&#34;anchor&#34; href=&#34;#gentoo-linux&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;https://www.gentoo.org/assets/img/logo/gentoo-horizontal.png&#34; alt=&#34;Gentoo Linux&#34;&gt;&#xA;&lt;figcaption&gt;&lt;p&gt;Gentoo Linux is also similar to Arch - that is, you start with a terminal and install only the stuff you want. But it&#39;s harder. &lt;em&gt;How?&lt;/em&gt; You need to compile everything you need - and compilation takes time. However, once all the programs you need are compiled locally, it runs in a highly optimised way and is very fast. There are pre-compiled binaries available for some programs too but the gist of Gentoo is to compile everything locally. Like Arch, it&#39;s only for highly experienced and advanced Linux users. Beginners, don&#39;t mess with it, end up breaking your system and then hate on Linux :\&lt;/p&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;h3 id=&#34;the-joke-distros&#34;&gt;The Joke Distros &lt;a class=&#34;anchor&#34; href=&#34;#the-joke-distros&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;hannah-montana-linux&#34;&gt;Hannah Montana Linux &lt;a class=&#34;anchor&#34; href=&#34;#hannah-montana-linux&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;https://linuxreviews.org/images/7/74/XFCE4-Hannah-Montana-FC30.jpg&#34; alt=&#34;Hannah Montana Linux&#34;&gt;&#xA;&lt;figcaption&gt;&lt;p&gt;Remember when I said distros are a result of the freedom to do &lt;em&gt;whatever you want&lt;/em&gt;. Yes. This kind of stuff is also included in &lt;em&gt;&#39;whatever you want&#39;&lt;/em&gt;. Hannah Montana Linux is a distro based on the American TV Show, Hannah Montana. The GUI is based on KDE 4.2. &lt;a href=&#34;https://www.youtube.com/watch?v=tnkj4yS8Dcw&#34; target=&#34;_blank&#34;&gt;Here&lt;/a&gt; and &lt;a href=&#34;https://hannahmontana.sourceforge.net&#34; target=&#34;_blank&#34;&gt;Here&lt;/a&gt; for more info.&lt;/p&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;h4 id=&#34;amongos&#34;&gt;AmongOS &lt;a class=&#34;anchor&#34; href=&#34;#amongos&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;https://preview.redd.it/8pjmx01mmp271.png?auto=webp&amp;amp;s=45ee5c657b3d68965f74347382719d3ad7979451&#34; alt=&#34;AmongOS&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;AmongOS is a parody OS inspired by, no points for guessing, Among Us ඞ. It is a meme OS developed in the same vein as Hannah Montana Linux, but it&#39;s also developed and made to be a lightweight operating system. Among OS is less bloated than other mainstream distros (&lt;em&gt;cough cough Ubuntu&lt;/em&gt;). The AmongOS project has been shut down though :\ You can find info about it &lt;a href=&#34;https://amog-os.github.io&#34; target=&#34;_blank&#34;&gt;Here&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;faqs-and-wrapping-up&#34;&gt;FAQs and Wrapping Up &lt;a class=&#34;anchor&#34; href=&#34;#faqs-and-wrapping-up&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;h4 id=&#34;1-what-is-the-easiest-linux-distribution&#34;&gt;1. What is the easiest Linux distribution? &lt;a class=&#34;anchor&#34; href=&#34;#1-what-is-the-easiest-linux-distribution&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;p&gt;I&#39;d say Zorin OS and Linux Mint are the easiest to set up and get going as fast as possible. Pop!_OS is a great option too!&lt;/p&gt;&#xA;&lt;h4 id=&#34;2-what-is-the-fastestlightest-linux-distribution&#34;&gt;2. What is the fastest/lightest Linux Distribution? &lt;a class=&#34;anchor&#34; href=&#34;#2-what-is-the-fastestlightest-linux-distribution&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;p&gt;You can check out Linux Mint or Zorin OS Lite. They run great on the oldest and least powerful of machines. However, you can also explore &lt;a href=&#34;https://itsfoss.com/lightweight-linux-beginners/&#34; target=&#34;_blank&#34;&gt;other lightweight distros&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h4 id=&#34;3-can-i-run-windows-apps-on-linux&#34;&gt;3. Can I run Windows apps on Linux? &lt;a class=&#34;anchor&#34; href=&#34;#3-can-i-run-windows-apps-on-linux&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;p&gt;As I mentioned before, some windows apps &lt;em&gt;and games&lt;/em&gt; can be run on Linux through Wine and a software called &lt;code&gt;Lutris&lt;/code&gt;. However, only some apps written for Windows run flawlessly on Linux. More apps and games are being written and compiled for Linux too. Most programming tools usually run &lt;em&gt;better&lt;/em&gt; on a Linux system. The problem only lies with games and niche software. You can get more info &lt;a href=&#34;https://itsfoss.com/use-windows-applications-linux/&#34; target=&#34;_blank&#34;&gt;other lightweight distros&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h4 id=&#34;4-do-i-need-an-anti-virus-on-linux&#34;&gt;4. Do I need an anti-virus on Linux? &lt;a class=&#34;anchor&#34; href=&#34;#4-do-i-need-an-anti-virus-on-linux&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;p&gt;Nope. You have nothing to worry about as long as you download stuff from official sources and do not indulge in anything malicious. You might want to explore a firewall if you are planning to use this PC as a server. Also, keep in mind that since Linux is so open, anybody and everybody can advise you on forums. While these forums are moderated, you might get bad advice from a few bad apples. NEVER run &lt;code&gt;sudo rm -rf /*&lt;/code&gt; on any Linux distro. It is a one shot command to completely nuke your entire root directory - aka your entire system. It deletes everything. If you have done this, It is possible to recover everything with recovery software like photorec but it&#39;s still big pain. Be careful with the &lt;code&gt;rm&lt;/code&gt; command in general. It stands for &lt;code&gt;remove&lt;/code&gt; and it deletes items permanently and leads to situations like &lt;a href=&#34;https://unix.stackexchange.com/questions/640343/accidentally-ran-sudo-rm-on-my-arch-linux-installation&#34; target = _blank&gt;these&lt;/a&gt;&#xA;&lt;img src=&#34;https://i.imgur.com/knS1sNy.png&#34; alt=&#34;someone ran rm- rf /&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;And that is it, folks! Thanks for reading through this long post of mine. Reach out to any of the Homebrew or Hackerspace members for any help with Linux and we will get you the best quality of help there is!&lt;/p&gt;&#xA;</description>
    </item>
    <item>
      <title>Go 101 - HackerSpace PESUECC&#39;s Golang Workshop!</title>
      <link>https://hsp-test.netlify.app/homebrew/workshop_posts/go101.html/</link>
      <pubDate>Fri, 07 Oct 2022 05:30:00 +0530</pubDate>
      <author>HSP</author>
      <guid>https://hsp-test.netlify.app/homebrew/workshop_posts/go101.html</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;Note : Setup and Pre-requisites are a must, the mentors will NOT be helping you install go during workshop.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;pre-requisites--setup&#34;&gt;Pre-requisites | Setup&lt;/h2&gt;&#xA;&lt;p&gt;For linux :&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo rm -rf /usr/local/go &amp;amp;&amp;amp; tar -C /usr/local -xzf go1.19.1.linux-amd64.tar.gz&#xA;export PATH=$PATH:/usr/local/go/bin&#xA;go version&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;If after the 3 commands above, if you get the 1.19.1 version as output, you are good to go!&lt;/p&gt;&#xA;&lt;p&gt;If you are on Windows, download the &lt;a href=&#34;https://go.dev/dl/go1.19.1.windows-amd64.msi&#34;&gt;Go Installer&lt;/a&gt; and run it.&lt;/p&gt;&#xA;&lt;p&gt;If you are on macOS, download the &lt;a href=&#34;https://go.dev/dl/go1.19.1.darwin-amd64.pkg&#34;&gt;Go Installer&lt;/a&gt; and run it.&lt;/p&gt;&#xA;&lt;h3 id=&#34;prelude-whats-programming&#34;&gt;Prelude: What&#39;s Programming?&lt;/h3&gt;&#xA;&lt;p&gt;Hint: It&#39;s more than writing code. Let&#39;s go through a few bits I&#39;ve shamelessly copy-pasted from &amp;quot;The Structure and Interpretation of Computer Programs&amp;quot; -&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;An assault on large problems employs a succession of programs, most of which spring into existence en route.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;To appreciate programming as an intellectual activity in its own right you must turn to computer programming; you must read and write computer programs— many of them. It doesn’t matter much what the programs are about or what applications they serve. What does matter is how well they perform and how smoothly they fit with other programs in the creation of still greater programs.&#xA;We are about to study the idea of a computational process. Computational processes are abstract beings that inhabit computers. As they evolve, processes manipulate other abstract things called data. The evolution of a process is directed by a pattern of rules called a program. People create programs to direct processes. In effect, we conjure the spirits of the computer with our spells.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;That&#39;s it. A computer is basically magic that runs what are known as programs - basically, spells - that we use to manipulate the electrons to do our bidding.&lt;/p&gt;&#xA;&lt;p&gt;This happens through &amp;quot;programs&amp;quot;, which are nothing but text in a specific format - to make it easier for the computer to understand - and it&#39;s through these &amp;quot;Spells&amp;quot; that we can use the processor to manipulate the electrons to do our bidding.&lt;/p&gt;&#xA;&lt;p&gt;Programs to do the same thing can look as simple as this -&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&amp;quot;hello, world!&amp;quot;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;or as complicated as this -&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;class HelloWorld {&#xA;  public static void main(String[] args) {&#xA;    System.out.println(&amp;quot;Hello, World!&amp;quot;);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Both of these programs just write &amp;quot;Hello, world!&amp;quot; to the display!&lt;/p&gt;&#xA;&lt;p&gt;And here&#39;s &amp;quot;Hello, world&amp;quot; in Golang -&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import &amp;quot;fmt&amp;quot;&#xA;&#xA;func main() {&#xA;&#x9;fmt.Println(&amp;quot;Hello, world!&amp;quot;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;what-is-go&#34;&gt;What is Go?&lt;/h2&gt;&#xA;&lt;p&gt;Go is a programming language created at Google in 2009. It was created to address a crisis - it wasn&#39;t easy enough to write applications that were fast and ran at scale.&lt;/p&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;https://www.hardwinsoftware.com/blog/wp-content/uploads/2018/02/golang-gopher.png&#34; alt=&#34;Gopher, the official mascot of Go&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;The existing solutions to this problem - Java and C/C++ - are all languages that are relatively difficult to learn and write maintainable code in. These languages tend to be very verbose, and they&#39;re more often than not difficult to understand at a glance.&lt;/p&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;https://thumbs.dreamstime.com/b/frustrated-business-man-front-computer-elevated-view-frustrated-business-man-front-computer-office-124736727.jpg&#34; alt=&#34;Frustration that accompanies a Java Codebase&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;Legacy codebases, or old codebases written in these languages, tend to be extremely difficult to maintain.&lt;/p&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;https://thumbs.dreamstime.com/b/overworked-frustrated-young-woman-front-computer-office-business-172203384.jpg&#34; alt=&#34;Nobody is spared&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;In short, we can sum up the issues with these languages as follows -&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Lack of readability&lt;/li&gt;&#xA;&lt;li&gt;Lack of static typing, and&lt;/li&gt;&#xA;&lt;li&gt;Lack of easy high-performance networking and parallelism (taking advantage of all the power your computer has by doing more things at once).&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;The folks at Google, including Ken Thompson (one of the original contributors to the C Programming Language), decided that the best way to address this issue was not to monkey-patch an existing language, but instead to write a whole new language from scratch.&lt;/p&gt;&#xA;&lt;p&gt;Arguably, this wasn&#39;t a minor undertaking, but it&#39;s a decision that paid dividends multiple times over, as Go is arguably the standard for any modern-day backend application that needs to run at scale, and with low latency.&lt;/p&gt;&#xA;&lt;h2 id=&#34;why-golang&#34;&gt;Why Golang?&lt;/h2&gt;&#xA;&lt;p&gt;The reason people and programmers love Go, apart from the cute mascot (We love the Gopher), is that it&#39;s &lt;em&gt;extremely easy&lt;/em&gt; compared to other languages that offer the features that Go offers.&lt;/p&gt;&#xA;&lt;p&gt;The other reason, perhaps the more important one, is that Go makes it super easy to do things in Parallel. Perhaps it won&#39;t be apparent as to how easy it is right now, but doing things in Parallel is an endeavor that involves coordinating and working with the Hardware as well as the Operating System.&lt;/p&gt;&#xA;&lt;p&gt;Go&#39;s &lt;em&gt;concurrency model&lt;/em&gt;, or how it recommends you do things in parallel, makes it extremely easy for first-timers and experienced developers alike to write code that runs in parallel with ease.&lt;/p&gt;&#xA;&lt;p&gt;This is because Golang makes use of these nifty things called &lt;code&gt;goroutines&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;To put it in context, think about it this way - You have a cake that you need to get rid of. Now, you can either work through the entire cake on your own, or you can call a few friends, share the cake, and get to work in parallel on the same cake!&lt;/p&gt;&#xA;&lt;p&gt;The latter approach allows you to process the entire job in a lot less time.&lt;/p&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;/images/go101/cake_parallelization.png&#34; alt=&#34;Cake is faster consumed in parallel.&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;What do you think will happen when we get to a very large number of friends? Do you think it&#39;ll be over in zero time?&lt;/p&gt;&#xA;&lt;p&gt;Goroutines are your friends. They&#39;re lightweight abstractions over the fundamental unit of concurrency in your computer - Threads - that allow you to do things in Parallel a lot, lot, lot easier. Navin and Mukund will explain the fundamentals of Goroutines, and how to use them, a little later!&lt;/p&gt;&#xA;&lt;h3 id=&#34;similarity-to-c&#34;&gt;Similarity to C&lt;/h3&gt;&#xA;&lt;p&gt;Go is pretty similar to C, save for a few notable exceptions.&lt;/p&gt;&#xA;&lt;p&gt;Here&#39;s An Example of the code for the popular &amp;quot;FizzBuzz&amp;quot; Program in Go -&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func fizzbuzz_stdout_sequential(start, end int) {&#xA;&#x9;for i := start; i &amp;lt;= end; i++ {&#xA;&#x9;&#x9;if i%3 == 0 {&#xA;&#x9;&#x9;&#x9;fmt.Print(&amp;quot;fizz&amp;quot;)&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if i%5 == 0 {&#xA;&#x9;&#x9;&#x9;fmt.Print(&amp;quot;buzz&amp;quot;)&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if i%3 != 0 &amp;amp;&amp;amp; i%5 != 0 {&#xA;&#x9;&#x9;&#x9;fmt.Print(strconv.Itoa(i))&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;fmt.Println(&amp;quot;&amp;quot;)&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;And here it is in C -&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;int fizzbuzz(int start, int end) {&#xA;  for (int i = 0; i &amp;lt;= end; i++) {&#xA;    if (i %3 == 0) {&#xA;      printf(&amp;quot;fizz&amp;quot;);&#xA;    }&#xA;    if (i %5 == 0) {&#xA;      printf(&amp;quot;buzz&amp;quot;);&#xA;    }&#xA;    if (i % 3 != 0 &amp;amp;&amp;amp; i % 5 != 0) {&#xA;      printf(&amp;quot;%d&amp;quot;, i);&#xA;    }&#xA;    printf(&amp;quot;\n&amp;quot;);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Here, you can see how similar Go and C are.&lt;/p&gt;&#xA;&lt;h2 id=&#34;the-basic-syntax&#34;&gt;The basic syntax&lt;/h2&gt;&#xA;&lt;p&gt;Let&#39;s go back to the Hello World program that we have in Golang. Get out your laptops, bust open your IDE, and let&#39;s get programming!&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import &amp;quot;fmt&amp;quot;&#xA;&#xA;func main() {&#xA;&#xA;&#x9;// variable declaration with var&#xA;&#x9;var greet string&#xA;&#x9;greet = &amp;quot;Hello, world!&amp;quot;&#xA;&#xA;&#x9;// variable declaration with assignment&#xA;&#x9;greet_1 := &amp;quot;Hello, world! 1&amp;quot;&#xA;&#xA;&#x9;// what is the type of `answer`?&#xA;&#x9;answer := 1 + 2&#xA;&#xA;&#x9;// show both&#xA;&#x9;fmt.Println(greet)&#xA;&#x9;fmt.Println(greet_1)&#xA;&#x9;fmt.Println(answer)&#xA;&#xA;&#x9;for i := 5; i &amp;gt; -1; i-- {&#xA;&#x9;&#x9;fmt.Println(&amp;quot;Counting Down ..&amp;quot;, i)&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;A few things to note -&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Much like C, every variable in Go has a &lt;code&gt;type&lt;/code&gt;, which tells the computer how to store the variable internally. You can also use types to make sure your program is correct.&lt;br /&gt; &lt;br /&gt;&lt;/li&gt;&#xA;&lt;li&gt;Using the &lt;code&gt;:=&lt;/code&gt; allows the compiler to &amp;quot;infer&amp;quot;, or derive, the type of data that you&#39;re passing, so you don&#39;t need to explicitly specify it.&lt;br /&gt; &lt;br /&gt;&lt;/li&gt;&#xA;&lt;li&gt;Packages are bits of code written by other people so you can reuse them. &lt;code&gt;fmt&lt;/code&gt; is a package that comes built in with Golang, much like many others. &lt;code&gt;PrintLn&lt;/code&gt; is a function is the &lt;code&gt;fmt&lt;/code&gt; package. &lt;br /&gt; &lt;br /&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;understanding-what-go-can-do-with-fizzbuzz&#34;&gt;Understanding What go can do with FizzBuzz&lt;/h2&gt;&#xA;&lt;p&gt;Here&#39;s the same program written above, slightly modified to write to an array instead of the screen.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func fizzbuzz_sequential(start, end int) []string {&#xA;&#xA;&#x9;// declare the array we&#39;re using to keep the strings in&#xA;&#x9;var fb []string&#xA;&#xA;&#x9;for i := start; i &amp;lt;= end; i++ {&#xA;&#xA;&#x9;&#x9;// keep a variable to check if the number is divisible by 3 or 5&#xA;&#x9;&#x9;divisible := 0&#xA;&#xA;&#x9;&#x9;// no else used here to ensure numbers divisbile by 3 and 5 show up as &amp;quot;fizzbuzz&amp;quot;&#xA;&#x9;&#x9;if i%3 == 0 {&#xA;&#x9;&#x9;&#x9;fb = append(fb, &amp;quot;fizz&amp;quot;)&#xA;&#x9;&#x9;&#x9;divisible = 1&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if i%5 == 0 {&#xA;&#x9;&#x9;&#x9;fb = append(fb, &amp;quot;buzz&amp;quot;)&#xA;&#x9;&#x9;&#x9;divisible = 1&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;// if we haven&#39;t appended anything, push the number itself&#xA;&#x9;&#x9;if divisible == 0 {&#xA;&#x9;&#x9;&#x9;fb = append(fb, strconv.Itoa(i))&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;fb = append(fb, &amp;quot;\n&amp;quot;)&#xA;&#xA;&#x9;}&#xA;&#x9;return fb&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;But we can do better. After adding parallelization, there&#39;s a noticeable speedup. You can find this code here, at &lt;a href=&#34;https://github.com/anirudhRowjee/fizzbench&#34;&gt;https://github.com/anirudhRowjee/fizzbench&lt;/a&gt;&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;fizzbuzz-go on  main [!] via 🐹 v1.18.1 took 17s&#xA;λ go run main.go&#xA;2022/10/07 10:21:10 FIZZBUZZ BENCHMARK REPORT&#xA;2022/10/07 10:21:10 GOROUTINES: 100 | START: 0 | END: 10000000&#xA;2022/10/07 10:21:10 SEQUENTIAL  Execution took (AVG over 5 runs) 1.887160 sec&#xA;2022/10/07 10:21:10 PARALLEL    Execution took (AVG over 5 runs) 0.853446 sec&#xA;2022/10/07 10:21:10 WORKER POOL Execution took (AVG over 5 runs) 0.721665 sec&#xA;2022/10/07 10:21:10 Average Speedup (Parallel    vs Sequential) -&amp;gt; 2.211225x&#xA;2022/10/07 10:21:10 Average Speedup (Worker Pool vs Sequential) -&amp;gt; 2.615010x&#xA;2022/10/07 10:21:10 Average Speedup (Worker Pool vs Parallel  ) -&amp;gt; 1.182607x&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;And mind you, this isn&#39;t the best we can do! It&#39;s possible to achieve far greater speedups with better architecture and design decisions. For now, let&#39;s head on over to the syntax.&lt;/p&gt;&#xA;&lt;h2 id=&#34;03-more-about-syntax&#34;&gt;03-More about syntax&lt;/h2&gt;&#xA;&lt;h3 id=&#34;defer&#34;&gt;Defer:&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Defer is an keyword which pushes or executes an operation only at the end of that function block or module.&lt;/li&gt;&#xA;&lt;li&gt;The very best example is closing a file after certain file operations:&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;    &amp;quot;fmt&amp;quot;&#xA;    &amp;quot;os&amp;quot;&#xA;)&#xA;&#xA;func main() {&#xA;&#xA;    f := createFile(&amp;quot;/tmp/defer.txt&amp;quot;)&#xA;    defer closeFile(f)&#xA;    writeFile(f)&#xA;}&#xA;&#xA;func createFile(p string) *os.File {&#xA;    fmt.Println(&amp;quot;creating&amp;quot;)&#xA;    f, err := os.Create(p)&#xA;    if err != nil {&#xA;        panic(err)&#xA;    }&#xA;    return f&#xA;}&#xA;&#xA;func writeFile(f *os.File) {&#xA;    fmt.Println(&amp;quot;writing&amp;quot;)&#xA;    fmt.Fprintln(f, &amp;quot;data&amp;quot;)&#xA;&#xA;}&#xA;&#xA;func closeFile(f *os.File) {&#xA;    fmt.Println(&amp;quot;closing&amp;quot;)&#xA;    err := f.Close()&#xA;&#xA;    if err != nil {&#xA;        fmt.Fprintf(os.Stderr, &amp;quot;error: %v\n&amp;quot;, err)&#xA;        os.Exit(1)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;You can push any operation to the end of the execution cycle of a particular module using defer.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;struct&#34;&gt;Struct:&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;A structure or struct in Golang is a user-defined type that allows to group/combine items of possibly different types into a single type. &lt;br /&gt;&lt;br /&gt;&lt;/li&gt;&#xA;&lt;li&gt;Now for those with programming experience, this really looks similar to a Class in Object Oriented Programming however it is not.&lt;/li&gt;&#xA;&lt;li&gt;Classes enable inheritance however Struct enables composition.&lt;/li&gt;&#xA;&lt;li&gt;Let&#39;s now see an example,&lt;/li&gt;&#xA;&lt;li&gt;We have an operation which concerns with a student&#39;s univeristy record, we need to store 3 to 4 attributes and their respective values and access them in a uniform manner for further operations.&lt;/li&gt;&#xA;&lt;li&gt;Now, normally you would create a dictionary or if you are into &lt;strong&gt;OVERKILL&lt;/strong&gt;, 3 to 4 variables per students which seems wasteful and non-uniform. &lt;br /&gt; &lt;br /&gt;&lt;/li&gt;&#xA;&lt;li&gt;Here we can use structs to make our lives easier as it helps us store and access such records with such simplicity and ease!&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import(&#xA;    &amp;quot;fmt&amp;quot;&#xA;)&#xA;&#xA;type Student struct{&#xA;    firstName string&#xA;    lastName string&#xA;    age int&#xA;    USN string&#xA;}&#xA;func printRecords(s Student){&#xA;    fmt.Printf(&amp;quot;First Name: %s\n Last Name: %s\n Age: %d\n USN: %s\n&amp;quot;, s.firstName, s.lastName, s.age, s.USN)&#xA;}&#xA;&#xA;func main(){&#xA;    stud1 := Student{firstName: &amp;quot;Mukund&amp;quot;,lastName: &amp;quot;Deepak&amp;quot;,age: 20,USN: &amp;quot;PES2UG20CS989&amp;quot;}&#xA;    printRecords(stud1)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;04-concurrency&#34;&gt;04-Concurrency&lt;/h2&gt;&#xA;&lt;h3 id=&#34;what-are-threads-a-very-naive-explaination&#34;&gt;What are threads, a very naive explaination&lt;/h3&gt;&#xA;&lt;p&gt;Before we get started with concurrency, lets quickly skim through some basics. Try to answer the below questions on your own first.&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;What is a program?&lt;/li&gt;&#xA;&lt;li&gt;What is a process?&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;So, in layman terms&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Program&lt;/strong&gt; is a written set of instructions or syntax with some functionality which will be executed by the computer.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Process&lt;/strong&gt; is a program in execution.&lt;/li&gt;&#xA;&lt;li&gt;As seen in a computer, multiple processes can execute simultaneously and well that&#39;s multiprocessing.&lt;/li&gt;&#xA;&lt;li&gt;But the overhead and the work put on creating a process in any OS is quite heavy.&lt;/li&gt;&#xA;&lt;li&gt;We use &lt;strong&gt;Threads&lt;/strong&gt; and the concept of &lt;strong&gt;Multithreading&lt;/strong&gt; to achieve what processes and multiprocessing does but with lower overhead and much much more simplicity.&lt;/li&gt;&#xA;&lt;li&gt;So, What exactly is a thread?&lt;/li&gt;&#xA;&lt;li&gt;A &lt;strong&gt;Thread&lt;/strong&gt; is an independent sequence of execution within a process. &lt;br /&gt;&lt;br /&gt;&lt;/li&gt;&#xA;&lt;li&gt;Lets take an example to understand better :),&lt;/li&gt;&#xA;&lt;li&gt;Alice and Joe have the sunday to themselves without their chaotic kids ruining the weekend and they want to enjoy their weekend and go out on a date!&lt;/li&gt;&#xA;&lt;li&gt;Saturday afternoon, Alice sees that the house is a mess, so Alice needs to finish all her chores however it is not a task that can be done single-handedly. If done single-handedly, it would take her many hours. So, what can she do? She pulls up her husband and her 3 kids and divides all the chores between them to get them done parallely and well surprisingly gets them done faster and ahead of schedule and gets to enjoy a couple more hours than her Sunday. &lt;br /&gt;&lt;br /&gt;&lt;/li&gt;&#xA;&lt;li&gt;So now given this analogy, let us pick out certain instances and corelate them to concurrent execution and computing.&lt;/li&gt;&#xA;&lt;li&gt;Alice doing all the chores single-handedly - sequential execution within a single process.&lt;/li&gt;&#xA;&lt;li&gt;Alice dividing all the chores between her family and getting all chores done parallely faster - concurrent multithreaded execution&lt;/li&gt;&#xA;&lt;li&gt;Who are the key players a.k.a the threads - alice, joe and her three kids.&lt;/li&gt;&#xA;&lt;li&gt;And that&#39;s threads and concurrency simplified max folks!&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;go-routines&#34;&gt;Go routines&lt;/h3&gt;&#xA;&lt;!-- This has to end with the question, how will these routines work together?&#xA;// Answer is channels --&gt;&#xA;&lt;p&gt;&lt;strong&gt;What is a goroutine?&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Basically its a non-blocking asynchronous concurrent function call in its simplest definition.&lt;/li&gt;&#xA;&lt;li&gt;Confused? Let me clear it up with an example.&lt;/li&gt;&#xA;&lt;li&gt;We&#39;ll create a routine and we will execute some iterations of this routine as normal function call and as goroutine calls and we will analyse this as we go.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import(&#xA;    &amp;quot;fmt&amp;quot;&#xA;    &amp;quot;time&amp;quot;&#xA;)&#xA;&#xA;func f(word string){&#xA;    for i:=0;i&amp;lt;len(word);i++{&#xA;        fmt.Printf(&amp;quot;%c\n&amp;quot;, word[i])&#xA;    }&#xA;}&#xA;func main(){&#xA;    f(&amp;quot;hello&amp;quot;)&#xA;    go f(&amp;quot;navin&amp;quot;)&#xA;    go f(&amp;quot;anirudh&amp;quot;)&#xA;    time.Sleep(time.Second) //why are we doing this?&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;So we have created a function f that takes the string and prints all the letters of the said word when f is called along with a passed string argument.&lt;/li&gt;&#xA;&lt;li&gt;The first call is a blocking normal function call we made within our main function.&lt;/li&gt;&#xA;&lt;li&gt;The second and the third call are done sequentially but the function execution is happening parallely in their own consective threads!&lt;/li&gt;&#xA;&lt;li&gt;So what would be the output of the following program?&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;h&#xA;e&#xA;l&#xA;l&#xA;o&#xA;a&#xA;n&#xA;i&#xA;r&#xA;u&#xA;d&#xA;h&#xA;n&#xA;a&#xA;v&#xA;i&#xA;n&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;The reason why anirudh prints before navin is because the threaded executions are placed in a runqueue and since there is not much work for the scheduler to run the goroutines in the runqueue, it is executing it both parallely however the outputs are printed in fifo order of the queue. This is why the last goroutine call will be executed first and then the first goroutine call is executed!&lt;/li&gt;&#xA;&lt;li&gt;In the case of very large input strings, interleaving can be expected as the goroutines are concurrently executed by the go runtime.&lt;/li&gt;&#xA;&lt;li&gt;We use time.Sleep(time.Second) to wait for the goroutines to execute completely and not exit the main function before they finish execution.&lt;/li&gt;&#xA;&lt;li&gt;But is there a better way to do this? That&#39;s where WaitGroups come into picture!&lt;/li&gt;&#xA;&lt;li&gt;And how do these goroutines or threads to simplify communication or exchange of information with each other? That&#39;s where Channels come into picture!&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;wait-groups&#34;&gt;Wait Groups&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;We did find a temporary fix to get our go routines up and running i.e. the time.Sleep(time.Second) fix however as computer scientists, our instinct goes to speeding up the execution and 1 second to print two strings seems wasteful as these respective goroutines take barely a few milliseconds!&lt;/li&gt;&#xA;&lt;li&gt;So we use a primitive go library&#39;s (sync library) function called WaitGroups&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;&#xA;&lt;li&gt;How do WaitGroups work?&lt;/li&gt;&#xA;&lt;li&gt;WaitGroup is basically a type of counter that blocks the execution of the goroutine until &lt;strong&gt;its internal counter becomes zero&lt;/strong&gt;.&lt;/li&gt;&#xA;&lt;li&gt;Three important procedures to know in WaitGroups:&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Add(int) - It increases WaitGroup counter by given integer value.&lt;/li&gt;&#xA;&lt;li&gt;Done() - It decreases WaitGroup counter by 1, we use it to indicate the termination of a goroutine.&lt;/li&gt;&#xA;&lt;li&gt;Wait() - It blocks the execution until it&#39;s internal counter becomes 0.&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Let us take a code snippet example:&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;    &amp;quot;fmt&amp;quot;&#xA;    &amp;quot;sync&amp;quot;&#xA;    &amp;quot;time&amp;quot;&#xA;)&#xA;&#xA;func worker(id int) {&#xA;    fmt.Printf(&amp;quot;Worker %d starting\n&amp;quot;, id)&#xA;&#xA;    time.Sleep(time.Second)&#xA;    fmt.Printf(&amp;quot;Worker %d done\n&amp;quot;, id)&#xA;}&#xA;&#xA;func main() {&#xA;&#xA;    var wg sync.WaitGroup&#xA;&#xA;    for i := 1; i &amp;lt;= 5; i++ {&#xA;        wg.Add(1)&#xA;&#xA;        i := i&#xA;&#xA;        go func() {&#xA;            defer wg.Done()&#xA;            worker(i)&#xA;        }()&#xA;    }&#xA;&#xA;    wg.Wait()&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;In the above code snippet, we are executing the worker function in 5 different goroutine calls and its asynchronously running in 5 seperate threads until the end of their execution. At the end of the execution, the waitgroup counter decrements from 5 all the way down to 0 and the Wait() call breaks indicating the end of the threaded execution.&lt;/li&gt;&#xA;&lt;li&gt;See how simple WaitGroups make asynchronous goroutine execution without terminating due to the main function and without any time delay!&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;go-channels&#34;&gt;Go channels&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Let&#39;s first see why we need channels as supposed to just a single variables for communication between threads :&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Let&#39;s consider a like counter...a counter in which a person can either like(+1) or dislike (-1). But before I can explain race conditions. We need to understand the von neumann cycle.&lt;/p&gt;&#xA;&lt;p&gt;Von Neumann architechture is as so :&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;fetch-&amp;gt;decode-&amp;gt;execute-&amp;gt;write&#xA;&#xA;What&#39;s to note is the &amp;quot;fetch&amp;quot; of data that happens here before execution [that too, 2 steps before exec].&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Let&#39;s consider that one thread each handles the incoming likes and dislikes. And as we only know normal variables in Go for now, we have no other choice but to have all these threads update the value in this &amp;quot;integer&amp;quot; variables called &lt;code&gt;likes&lt;/code&gt;. Let&#39;s now consider 2 requests coming in, both likes at the EXACT SAME TIME. So two threads spawn at the same time and &amp;quot;fetch&amp;quot; the memory of variable &lt;code&gt;likes&lt;/code&gt;. Both do a +1 to &lt;code&gt;likes&lt;/code&gt; variable. and now store it back to the same memory.&lt;/p&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;https://i.imgur.com/uq883Tu.png&#34; alt=&#34;image&#34;&gt;&#xA;&lt;figcaption&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/homebrew-ec-foss/go101_codes/blob/main/example_modules/unsafe_likes_counter.go&#34;&gt;code executing this system&lt;/a&gt;&lt;/p&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;WAIIIIIIIITTTT, what just happened??? we got 2 like requests but our value only went up by 1??&lt;/p&gt;&#xA;&lt;p&gt;this is a very solid introduction to race conditions and we&#39;ll discuss in short how we can avoid this. In some cases (in fortunate cases) we will only get inconsistent values, In most unfortunate situations this leads to a runtime error. With this I hope you are sold on channels, now let&#39;s look into using them.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;The basic syntax of buffered channels :&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;  first_channel := make(chan string)&#xA;  first_channel &amp;lt;- &amp;quot;Hello, World!&amp;quot;&#xA;  our_message := &amp;lt;- first_channel&#xA;  //We have to use := for &amp;quot;our_message&amp;quot; as the variables needs to figure what it stored by itself, we can also declare its type manually&#xA;  fmt.Println(our_message)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;So in the above code block, we see a channel that is happy to store strings, this is the same for any data type channels. But if you really did run the above code, you&#39;ll see we will get a runtime error :(. This is because we told our channel should store strings but did not mention how many, that is we have an unbuffered memory [We&#39;ll look into these shortly] . Let&#39;s fix that and look into &lt;code&gt;len&lt;/code&gt; and &lt;code&gt;cap&lt;/code&gt; functions of channels.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Fixing channels :&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;  first_channel := make(chan string,1)&#xA;  fmt.Println(&amp;quot;Before queuing, len :&amp;quot;,len(first_channel)) //Shows number of queued messages in the buffer&#xA;  fmt.Println(&amp;quot;Before queuing, cap :&amp;quot;,cap(first_channel)) //Shows the total capacity of buffer&#xA;  first_channel &amp;lt;- &amp;quot;Hello, World!&amp;quot;&#xA;  fmt.Println(&amp;quot;After queuing one string, len :&amp;quot;,len(first_channel))&#xA;  fmt.Println(&amp;quot;After queuing one string, cap :&amp;quot;,cap(first_channel))&#xA;  // first_channel &amp;lt;- &amp;quot;Second message :(&amp;quot; //Will cause runtime, is explained in blog.&#xA;  our_message := &amp;lt;- first_channel&#xA;  fmt.Println(our_message)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;So in the above code, we see a lot going on. Let&#39;s break it down :&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;We now have a channel size of 1, implying we can store one string in channel.&lt;/li&gt;&#xA;&lt;li&gt;the &lt;code&gt;len()&lt;/code&gt; prints the number of &amp;quot;items&amp;quot; buffered.&lt;/li&gt;&#xA;&lt;li&gt;the &lt;code&gt;cap()&lt;/code&gt; prints the max numbers of &amp;quot;items&amp;quot; that can be buffered.&#xA;Do note, when ever the len() goes above cap() our code panic&#39;s in runtime.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Unbuffered channels basic syntax :&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func unbuf_sender(channel chan string, wg *sync.WaitGroup){&#xA;  defer wg.Done()&#xA;  defer close(channel)&#xA;  i := 0&#xA;  for i&amp;lt;5{&#xA;    channel &amp;lt;- &amp;quot;Hello World &amp;quot;+fmt.Sprint(i)&#xA;    i++&#xA;  }&#xA;}&#xA;&#xA;func unbuf_reader(channel chan string, wg *sync.WaitGroup){&#xA;  defer wg.Done()&#xA;  for{&#xA;    res, ok := &amp;lt;- channel&#xA;    if !ok{&#xA;      fmt.Println(&amp;quot;We done, adios&amp;quot;)&#xA;      return&#xA;    }&#xA;    fmt.Println(res)&#xA;  }&#xA;&#xA;}&#xA;&#xA;func simple_unbuf_channel(){&#xA;  unbuf_channels := make(chan string)&#xA;  wg := new(sync.WaitGroup)&#xA;  wg.Add(1)&#xA;  go unbuf_sender(unbuf_channels, wg)&#xA;  wg.Add(1)&#xA;  go unbuf_reader(unbuf_channels, wg) //Code will panic if this receiver isnt active&#xA;  wg.Wait()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;If you are sure if a channels always has an active recviever, we can let our channels be unbuffered! And the above example is accurate 100% of the time!! With that we come to an end of looking at channels and threads communication at quite the depth!&lt;/p&gt;&#xA;&lt;p&gt;For advanced readers, the race condition problem we discusses earlier has been fixed using channels, ones intrested can see it&#39;s code &lt;a href=&#34;https://github.com/homebrew-ec-foss/go101_codes/blob/main/example_modules/likes_unbuf_channel.go&#34;&gt;here!&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;the-same-examplejust-much-faster&#34;&gt;The same example...just much faster!&lt;/h3&gt;&#xA;&lt;p&gt;Here&#39;s the same example, Fizzbuzz, but parallelized -&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func worker_pool_fizzbuzz(start, end, worker_count int) [][]string {&#xA;&#xA;&#x9;// use a worker pool to orchestrate the parallelization of Fizzbuzz&#xA;&#xA;&#x9;jump_div_check := (end - start) % worker_count&#xA;&#x9;if jump_div_check != 0 {&#xA;&#x9;&#x9;log.Fatalln(&amp;quot;The degree must perfectly divide the number of entries&amp;quot;)&#xA;&#x9;}&#xA;&#xA;&#x9;jump := (end - start) / worker_count&#xA;&#x9;iter_start := start&#xA;&#xA;&#x9;job_channel := make(chan []int, worker_count)&#xA;&#x9;results_channel := make(chan []string, worker_count)&#xA;&#xA;&#x9;var results [][]string&#xA;&#xA;&#x9;for i := 0; i &amp;lt; worker_count; i++ {&#xA;&#xA;&#x9;&#x9;go func(job_chan &amp;lt;-chan []int, result_chan chan&amp;lt;- []string) {&#xA;&#x9;&#x9;&#x9;// Worker!&#xA;&#x9;&#x9;&#x9;for start_end_stats := range job_chan {&#xA;&#x9;&#x9;&#x9;&#x9;// Spawn the new job&#xA;&#x9;&#x9;&#x9;&#x9;start := start_end_stats[0]&#xA;&#x9;&#x9;&#x9;&#x9;end := start_end_stats[1]&#xA;&#x9;&#x9;&#x9;&#x9;// Send the results back to the&#xA;&#x9;&#x9;&#x9;&#x9;result_chan &amp;lt;- fizzbuzz_sequential(start, end)&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}(job_channel, results_channel)&#xA;&#xA;&#x9;}&#xA;&#xA;&#x9;for {&#xA;&#x9;&#x9;if iter_start &amp;lt; end {&#xA;&#x9;&#x9;&#x9;range_start := iter_start&#xA;&#x9;&#x9;&#x9;range_end := iter_start + jump&#xA;&#x9;&#x9;&#x9;// fmt.Println(&amp;quot;Dispatching Job (START, END)&amp;quot;, range_start+1, range_end)&#xA;&#x9;&#x9;&#x9;job_channel &amp;lt;- []int{range_start + 1, range_end}&#xA;&#x9;&#x9;&#x9;iter_start += jump&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;break&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;close(job_channel)&#xA;&#xA;&#x9;for i := 0; i &amp;lt; worker_count; i++ {&#xA;&#x9;&#x9;results = append(results, &amp;lt;-results_channel)&#xA;&#x9;}&#xA;&#x9;return results&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;what-can-you-build-with-go&#34;&gt;What can you build with Go?&lt;/h2&gt;&#xA;&lt;p&gt;There&#39;s plenty of production-grade software written in Go! Here are a few examples you&#39;re going to have heard of -&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Docker&lt;/li&gt;&#xA;&lt;li&gt;Kubernetes&lt;/li&gt;&#xA;&lt;li&gt;Prometheus&lt;/li&gt;&#xA;&lt;li&gt;ScyllaDB&lt;/li&gt;&#xA;&lt;li&gt;CockroachDB&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;But there are also easier-to-follow examples and sample projects that we&#39;ve got in-house. For example,&lt;/p&gt;&#xA;&lt;h3 id=&#34;grdns&#34;&gt;GRDNS&lt;/h3&gt;&#xA;&lt;p&gt;GRDNS is DNS server, namely : Go Redis Domain Name Server. It&#39;s entire point was to have insanely fast resolve times using in memory caches. Go helps with scaling and its very nice network libraries! The project can be found &lt;a href=&#34;https://github.com/NavinShrinivas/GRDNS&#34;&gt;here&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;uturn&#34;&gt;Uturn&lt;/h3&gt;&#xA;&lt;p&gt;Uturn is a simple URL shortener (much like bit.ly) written in Go. You can find the source code for the same &lt;a href=&#34;https://github.com/anirudhRowjee/uturn-go&#34;&gt;here&lt;/a&gt;&lt;/p&gt;&#xA;</description>
    </item>
    <item>
      <title>Golang 101</title>
      <link>https://hsp-test.netlify.app/homebrew/events/golang22.html/</link>
      <pubDate>Fri, 23 Sep 2022 05:30:00 +0530</pubDate>
      <author>HSP</author>
      <guid>https://hsp-test.netlify.app/homebrew/events/golang22.html</guid>
      <description>&lt;section class=&#34;p-index_links_link&#34;&gt;&#xA;    &lt;a href=&#34;https://forms.gle/ztVkaGFWnZd42qby8&#34; class=&#34;c-gradient-link&#34;&gt; 👉 Register Now! &lt;/a&gt;&#xA;&lt;/section&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://forms.gle/ztVkaGFWnZd42qby8&#34;&gt;registration form&lt;/a&gt;&lt;/p&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;/static/images/golang22/golang22_poster.png&#34; alt=&#34;&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;Are you going to GO???&#xA;Greetings from HackerSpace PESU ECC! ✨✨&lt;/p&gt;&#xA;&lt;p&gt;You guessed it right! We are back with an exciting workshop, this time on Golang, a language whose development is supported by Google and is syntactically similar to C.&lt;/p&gt;&#xA;&lt;p&gt;Date: 7th October&#xA;Time: 3:30PM-5:30PM&#xA;Venue: Seminar hall&lt;/p&gt;&#xA;&lt;p&gt;Why learn Go?🤔&lt;/p&gt;&#xA;&lt;p&gt;✅ Golang is the fastest growing language in terms of popularity&#xA;✅ Go is the language of choice for building enterprise-grade backend services, used by companies such as Google, Visa, Uber, Twitch, DropBox, and Soundcloud&#xA;✅ Google uses Go A LOT! So, in case you’re eyeing the jobs there…👀&#xA;✅ Amazing concurrency, It is just brilliant! Don’t take our word for it, see for yourselves and register😌&#xA;✅ Go is a great place to finally start learning coding&lt;/p&gt;&#xA;&lt;p&gt;Need more reasons?&#xA;Other than the fact that it&#39;s beginner friendly and has NO entry fee and you&#39;ll be provided with extensive mentor support.&lt;/p&gt;&#xA;&lt;p&gt;In this workshop, we&#39;ll be walking through the basics of Golang and its concurrency features. This will enable you to start writing your own programs by the end of this workshop!&lt;/p&gt;&#xA;&lt;p&gt;This is your chance to get a huge head-start over your peers and classmates 🤫&lt;/p&gt;&#xA;&lt;p&gt;Get, set, go GOLANG😆&#xA;Register here -&#xA;https://hsp-ec.xyz/events/golang22&lt;/p&gt;&#xA;</description>
    </item>
    <item>
      <title>How to get started with a pre-built 11ty theme</title>
      <link>https://hsp-test.netlify.app/homebrew/workshop_posts/11tyWorkshop.html/</link>
      <pubDate>Fri, 16 Sep 2022 05:30:00 +0530</pubDate>
      <author>HSP</author>
      <guid>https://hsp-test.netlify.app/homebrew/workshop_posts/11tyWorkshop.html</guid>
      <description>&lt;h1 id=&#34;eleventy-chirpy-blog-template&#34;&gt;eleventy-chirpy-blog-template&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.11ty.dev/&#34;&gt;11ty&lt;/a&gt; version of the popular &lt;a href=&#34;https://github.com/cotes2020/jekyll-theme-chirpy&#34;&gt;Chirpy Jekyll&lt;/a&gt; blog theme. Also powers this blog.&lt;/p&gt;&#xA;&lt;p&gt;You can check out the live version on &lt;a href=&#34;https://eleventy-chirpy-blog-template.netlify.app&#34;&gt;https://eleventy-chirpy-blog-template.netlify.app&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;!--&#xA;If you want to deploy, there&#39;s a button for it: [![Deploy to Netlify](https://www.netlify.com/img/deploy/button.svg)](https://app.netlify.com/start/deploy?repository=https://github.com/muenzpraeger/eleventy-chirpy-blog-template) --&gt;&#xA;&lt;h2 id=&#34;local-development&#34;&gt;Local Development&lt;/h2&gt;&#xA;&lt;h3 id=&#34;before-you-install-dependencies&#34;&gt;Before you install dependencies&lt;/h3&gt;&#xA;&lt;p&gt;This repo uses &lt;a href=&#34;https://volta.sh/&#34;&gt;Volta&lt;/a&gt;. Get it, and it&#39;ll make your node life so much easier.&#xA;Runt his command (for linux and windows user)&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;curl https://get.volta.sh | bash&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;instructions&#34;&gt;Instructions&lt;/h3&gt;&#xA;&lt;p&gt;Clone this repository.&#xA;Goto to this &lt;a href=&#34;https://github.com/muenzpraeger/eleventy-chirpy-blog-template&#34;&gt;template&lt;/a&gt; and click on &amp;quot;Use this Template&amp;quot; button.&lt;/p&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;/images/templatebutton.png&#34; alt=&#34;copy template&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;Put a repository name and Description , then click on &amp;quot;create repository &amp;quot; button.&lt;/p&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;/images/repo.png&#34; alt=&#34;copy template&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;Clone the recently made repository&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;git clone -https link here -&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Change into the cloned directory.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;cd -Directory Name-&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Install node&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;volta install node&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Install yarn&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;volta install yarn&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Install dependencies. Note, if you prefer &lt;code&gt;npm&lt;/code&gt; over &lt;code&gt;yarn&lt;/code&gt; make sure to first remove the &lt;code&gt;yarn.lock&lt;/code&gt; file, and then run &lt;code&gt;npm install&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;yarn install&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Start the local development process.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;yarn dev&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Open the page, usually on &lt;a href=&#34;http://localhost:8080&#34;&gt;http://localhost:8080&lt;/a&gt;, and dig around!&lt;/p&gt;&#xA;&lt;h2 id=&#34;configuration&#34;&gt;Configuration&lt;/h2&gt;&#xA;&lt;p&gt;All blog configuration is handled via &lt;a href=&#34;./content/_data/siteconfig.js&#34;&gt;&lt;code&gt;siteconfig.js&lt;/code&gt;&lt;/a&gt; (content/_data/siteconfig.js). Everything is inline documented.&lt;/p&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;/images/config.png&#34; alt=&#34;Config file&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;In the config file you can can change the name , the picture , links among other things, feel free to tinker and explore from here&lt;/p&gt;&#xA;&lt;!-- ## Features&#xA;&#xA;-   💯 on Lighthouse&#xA;-   🔆 and 🌛 mode&#xA;-   🎯 SEO and OpenGraph optimized&#xA;-   🌄 Responsive images optimization&#xA;-   👀 Accessible&#xA;-   🛠 JavaScript and CSS build optimization&#xA;-   👨‍💻 Prism-based syntax highlighting&#xA;-   📚 RSS (yup, still a thing), sitemap.xml, and JSON-LD&#xA;-   🔍 [Algolia Search](https://github.com/algolia/algoliasearch-netlify) enabled&#xA;-   and more --&gt;&#xA;&lt;p&gt;Opinionated setup with &lt;a href=&#34;https://prettier.io/&#34;&gt;Prettier&lt;/a&gt;, &lt;a href=&#34;https://eslint.org/&#34;&gt;ESlint&lt;/a&gt;, &lt;a href=&#34;https://github.com/DavidAnson/markdownlint&#34;&gt;markdownlint&lt;/a&gt; and others. UX build with &lt;a href=&#34;https://mozilla.github.io/nunjucks/templating.html&#34;&gt;Nunjucks&lt;/a&gt; and &lt;a href=&#34;https://tailwindcss.com/docs&#34;&gt;TailwindCSS&lt;/a&gt;. JavaScript bundled with &lt;a href=&#34;https://rollupjs.org/&#34;&gt;Rollup&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;deployment&#34;&gt;Deployment&lt;/h2&gt;&#xA;&lt;p&gt;All build processes rely on how &lt;code&gt;NODE_ENV&lt;/code&gt; is set. For production builds, which then also means minified CSS and JS you&#39;ve to set the value to &lt;code&gt;production&lt;/code&gt;. I mention this explicitly as this is for some vendors not the default.&lt;/p&gt;&#xA;&lt;p&gt;If you want to speed up your build times a bit you can add the generated images to your git repo. The &lt;code&gt;.gitignore&lt;/code&gt; already contains a commented section for that.&lt;/p&gt;&#xA;&lt;h2 id=&#34;credits&#34;&gt;Credits&lt;/h2&gt;&#xA;&lt;p&gt;The UX of this template is based on the popular Chirpy template, just with a different tech stack. If you prefer to run Jekyll and Bootstrap, checkout &lt;a href=&#34;https://github.com/cotes2020/jekyll-theme-chirpy&#34;&gt;Chirpy&lt;/a&gt; here. It&#39;s great.&lt;/p&gt;&#xA;&lt;p&gt;Also big thanks to the the authors of the &lt;a href=&#34;https://github.com/google/eleventy-high-performance-blog&#34;&gt;11ty High Performance Blog&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;some-extra-resources&#34;&gt;Some Extra Resources&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://rahuldkjain.github.io/gh-profile-readme-generator/&#34;&gt;Readme Generator&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://cssgrid-generator.netlify.app/&#34;&gt;Grid generator&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;</description>
    </item>
    <item>
      <title>Basic 11ty Tutorial</title>
      <link>https://hsp-test.netlify.app/homebrew/events/11tutorial.html/</link>
      <pubDate>Fri, 16 Sep 2022 05:30:00 +0530</pubDate>
      <author>HSP</author>
      <guid>https://hsp-test.netlify.app/homebrew/events/11tutorial.html</guid>
      <description>&lt;h1 id=&#34;table-of-contents&#34;&gt;Table of Contents &lt;a class=&#34;anchor&#34; href=&#34;#table-of-contents&#34;&gt;#&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#begin-the-project&#34;&gt;Begin the project&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#add-eleventy-config&#34;&gt;Add Eleventy Config&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#run-the-develop-server&#34;&gt;Run the develop Server&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#create-the-base-layout&#34;&gt;Create the base layout&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;begin-the-project&#34;&gt;Begin the project &lt;a class=&#34;anchor&#34; href=&#34;#begin-the-project&#34;&gt;#&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;install NPM&lt;/li&gt;&#xA;&lt;li&gt;initialising&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;pre&gt;&lt;code&gt;npm init -y&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;npm install @11ty/eleventy&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;ol start=&#34;3&#34;&gt;&#xA;&lt;li&gt;open package.json and update scripts section to&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;pre&gt;&lt;code&gt;&amp;quot;scripts&amp;quot;: {&#xA;    &amp;quot;start&amp;quot;: &amp;quot;npx @11ty/eleventy --serve&amp;quot;,&#xA;    &amp;quot;build&amp;quot;: &amp;quot;npx @11ty/eleventy&amp;quot;&#xA;  },&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;This enables a start command to run 11ty with hot-reload, which is provided by Browsersync that comes bundled as part of 11ty&#39;s --serve directive.&lt;/p&gt;&#xA;&lt;h1 id=&#34;add-eleventy-config&#34;&gt;Add Eleventy Config &lt;a class=&#34;anchor&#34; href=&#34;#add-eleventy-config&#34;&gt;#&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Create .eleventy.js at the root&lt;/li&gt;&#xA;&lt;li&gt;add&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;module.exports = function (eleventyConfig) {&#xA;  return {&#xA;    dir: {&#xA;      input: &amp;quot;src&amp;quot;,&#xA;      output: &amp;quot;public&amp;quot;,&#xA;    },&#xA;  };&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;The first change here is setting the input directory to src - as in, the directory 11ty will watch for changes and use to build for production. Then, we change the output directory to public which means that&#39;s where our production-ready files for use by localhost and a hosting server will be published.&lt;/p&gt;&#xA;&lt;h1 id=&#34;run-the-develop-server&#34;&gt;Run the develop Server &lt;a class=&#34;anchor&#34; href=&#34;#run-the-develop-server&#34;&gt;#&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;npm start&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;error message as no index file&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Create index file&lt;/p&gt;&#xA;&lt;p&gt;a. create src/&lt;/p&gt;&#xA;&lt;p&gt;b. create src/index.md&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h1 id=&#34;create-the-base-layout&#34;&gt;Create the base layout &lt;a class=&#34;anchor&#34; href=&#34;#create-the-base-layout&#34;&gt;#&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;create _includes/base.njk inside src.&lt;/li&gt;&#xA;&lt;li&gt;use the double-curly format to access the title Frontmatter variable, like so: {-{ title }} and in order to allow rendering of any HTML tags from the page content, we also use the built-in filter called safe which is added after placing a pipe - | - character.&lt;/li&gt;&#xA;&lt;li&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!doctype html&amp;gt;&#xA;&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;&#xA;  &amp;lt;head&amp;gt;&#xA;    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot; /&amp;gt;&#xA;    &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot; /&amp;gt;&#xA;    &amp;lt;title&amp;gt;{-{ title }}&amp;lt;/title&amp;gt;&#xA;  &amp;lt;/head&amp;gt;&#xA;  &amp;lt;body&amp;gt;&#xA;    &amp;lt;header&amp;gt;{-{ title }}&amp;lt;/header&amp;gt;&#xA;    &amp;lt;main&amp;gt;{-{ content | safe }}&amp;lt;/main&amp;gt;&#xA;  &amp;lt;/body&amp;gt;&#xA;&amp;lt;/html&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Ignore Hyphens(-).&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;ol start=&#34;3&#34;&gt;&#xA;&lt;li&gt;Manually refresh and let Browsersync do the rest.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;</description>
    </item>
    <item>
      <title>Prerequisite for the 11ty Workshop</title>
      <link>https://hsp-test.netlify.app/homebrew/events/prereqisite.html/</link>
      <pubDate>Wed, 14 Sep 2022 05:30:00 +0530</pubDate>
      <author>HSP</author>
      <guid>https://hsp-test.netlify.app/homebrew/events/prereqisite.html</guid>
      <description>&lt;h1 id=&#34;table-of-contents&#34;&gt;Table of Contents &lt;a class=&#34;anchor&#34; href=&#34;#table-of-contents&#34;&gt;#&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#git&#34;&gt;GIT&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#volta&#34;&gt;Volta&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#netlify&#34;&gt;Netlify&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;The Dependencies of the workshop are mentioned below&lt;/p&gt;&#xA;&lt;h2 id=&#34;git&#34;&gt;GIT &lt;a class=&#34;anchor&#34; href=&#34;#git&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/&#34;&gt;GitHub Account&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;Git CLI installation see &lt;a href=&#34;https://www.atlassian.com/git/tutorials/install-git&#34;&gt;here&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;Setting your Git username for every repository on your computer&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Open Terminal.&lt;/p&gt;&#xA;&lt;p&gt;Set a Git username:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ git config --global user.name &amp;quot;Mona Lisa&amp;quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Confirm that you have set the Git username correctly:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ git config --global user.name&#xA;&amp;gt; Mona Lisa&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Setting your email address for every repository on your computer&#xA;Open Terminal.&#xA;Set an email address in Git. You can use your GitHub-provided noreply email address or any email address.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ git config --global user.email &amp;quot;email@example.com&amp;quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Confirm that you have set the email address correctly in Git:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ git config --global user.email&#xA;&#xA;email@example.com&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Add the email address to your account on GitHub, so that your commits are attributed to you and appear in your contributions graph. For more information, see &lt;a href=&#34;https://docs.github.com/en/github/setting-up-and-managing-your-github-user-account/adding-an-email-address-to-your-github-account&#34;&gt;Adding an email address to your GitHub account&lt;/a&gt;.&amp;quot;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Authenticating with GitHub from Git:&#xA;see &lt;a href=&#34;https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token&#34;&gt;here&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;volta&#34;&gt;Volta &lt;a class=&#34;anchor&#34; href=&#34;#volta&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;This repo uses &lt;a href=&#34;https://volta.sh/&#34;&gt;Volta&lt;/a&gt;. Get it, and it&#39;ll make your node life so much easier.&#xA;Run this command (for linux and mac user)&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;curl https://get.volta.sh | bash&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;For windows user follow instructions &lt;a href=&#34;https://docs.volta.sh/guide/getting-started&#34;&gt;here&lt;/a&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;To install yarn&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre&gt;&lt;code&gt;volta install yarn&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;netlify&#34;&gt;Netlify &lt;a class=&#34;anchor&#34; href=&#34;#netlify&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Create an account on &lt;a href=&#34;https://www.netlify.com/&#34;&gt;Netlify&lt;/a&gt;&lt;/p&gt;&#xA;</description>
    </item>
    <item>
      <title>Build Your Own Website</title>
      <link>https://hsp-test.netlify.app/homebrew/events/byow.html/</link>
      <pubDate>Wed, 14 Sep 2022 05:30:00 +0530</pubDate>
      <author>HSP</author>
      <guid>https://hsp-test.netlify.app/homebrew/events/byow.html</guid>
      <description>&lt;section class=&#34;p-index_links_link&#34;&gt;&#xA;    &lt;a href=&#34;https://forms.gle/iPs8d3agf5i9H1LEA&#34; class=&#34;c-gradient-link&#34;&gt; 👉 Register Now! &lt;/a&gt;&#xA;&lt;/section&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;/static/images/byow/byow_poster_v5.png&#34; alt=&#34;&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;Do you want to build a website for yourself?&lt;/p&gt;&#xA;&lt;p&gt;On occasion of Engineer’s day, HackerSpace PESU-ECC is back with an interactive workshop on web development using Eleventy, a static site generator used by Google, CERN, and many others! ✨&lt;/p&gt;&#xA;&lt;p&gt;Date: 16th September, 2022&#xA;Venue: Seminar Hall&lt;/p&gt;&#xA;&lt;p&gt;Why should you join it?&#xA;👉 Beginner friendly&#xA;👉 Covers a wide range of topics throughout the workshop, including Eleventy, HTML+CSS, and Netlify&#xA;👉 Create your own website by the end of it!&#xA;👉 Don’t miss the chance to flex the awesome technical skills you&#39;ll acquire!&#xA;👉 If you’re in the 1st sem, gives a headstart on web development.&#xA;👉 No entry fee!&#xA;👉 Mentors will be present in case of any difficulty.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://saksham-11ty.netlify.app/posts/2022/prereqisite/&#34;&gt;Click here for the pre-requisities!&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Is it for you?&#xA;Ofcourse! Students from all years are welcome to join in and learn more, and make their own website!&lt;/p&gt;&#xA;&lt;p&gt;Don&#39;t forget to register! &lt;a href=&#34;https://tiy1l0l7c8l.typeform.com/to/ftfPjQbO&#34;&gt;Click here.&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;For any further questions contact: Anirudh Rowjee, +91 9980029716&lt;/p&gt;&#xA;</description>
    </item>
    <item>
      <title>Turing awards</title>
      <link>https://hsp-test.netlify.app/blog/turing-awards.html/</link>
      <pubDate>Mon, 05 Sep 2022 05:30:00 +0530</pubDate>
      <author>HSP</author>
      <guid>https://hsp-test.netlify.app/blog/turing-awards.html</guid>
      <description>&lt;p&gt;Have you ever wondered what the World Wide Web and Fortran have in common? Other than being pioneering innovations, they happen to stem from the cerebrums of tinkering individuals who also have the Turing Award in common. The ACM A. M. Turing Award is an annual prize given by the Association for Computing Machinery (ACM) for contributions of lasting and major technical importance to computer science. It is generally recognized as the highest distinction in computer science and is colloquially known as or often referred to as the &amp;quot;Nobel Prize of Computing&amp;quot;.&lt;/p&gt;&#xA;&lt;p&gt;The award is named after Alan Turing, who was a British mathematician and is often credited as being the key founder of theoretical computer science and artificial intelligence. The first recipient, in 1966, was Alan Perlis, of Carnegie Mellon University. The first female recipient was Frances E. Allen of IBM in 2006. The latest recipient, in 2021, is Jack Dongarra, of the University of Tennessee.&lt;/p&gt;&#xA;&lt;p&gt;Every Turing recipient is expected to present a Turing lecture on a topic of their choice at a forum of their choice. This highly anticipated lecture is often videotaped in its entirety and available for viewing in the ACM Digital Library. The lecture is often included in the Proceedings of the conference at which it was presented, also available in the ACM Digital Library. The video and lecture will also be uploaded to the Turing website (A.M. Turing Award), which presents a rich collection of Turing information, including citations, bibliographic material, videos, lectures, photos, and more.&lt;/p&gt;&#xA;&lt;p&gt;ACM is The Association for Computing Machinery is a US-based international learned society for computing. It was founded in 1947 and is the world&#39;s largest scientific and educational computing society. It is a non-profit professional membership group, and their aim is to highlight the significant impact of the contributions of the Turing Laureates on computing and society, to look ahead to the future of technology and innovation, and to help inspire the next generation of computer scientists to invent and dream.&lt;/p&gt;&#xA;&lt;p&gt;Let&#39;s look into the honorary awardees and their contributions to the field of Computer Science:&lt;/p&gt;&#xA;&lt;p&gt;Alan Perlis - 1966&lt;/p&gt;&#xA;&lt;p&gt;For his influence in the area of advanced computer programming techniques and compiler construction.&lt;/p&gt;&#xA;&lt;p&gt;Maurice Wilkes - 1967&lt;/p&gt;&#xA;&lt;p&gt;Wilkes is best known as the builder and designer of the EDSAC, the first computer with an internally stored program. Built in 1949, the EDSAC used a mercury delay line memory. He is also known as the author, with Wheeler and Gill, of a volume on &amp;quot;Preparation of Programs for Electronic Digital Computers&amp;quot; in 1951, in which program libraries were effectively introduced.&lt;/p&gt;&#xA;&lt;p&gt;Richard Hamming - 1968&lt;/p&gt;&#xA;&lt;p&gt;For his work on numerical methods, automatic coding systems, and error-detecting and error-correcting codes.&lt;/p&gt;&#xA;&lt;p&gt;Marvin Masky - 1969&lt;/p&gt;&#xA;&lt;p&gt;For his central role in creating, shaping, promoting, and advancing the field of artificial intelligence.&lt;/p&gt;&#xA;&lt;p&gt;James Hardy Wilkinson - 1970&lt;/p&gt;&#xA;&lt;p&gt;For his research in numerical analysis to facilitate the use of the high-speed digital computer, having received special recognition for his work in computations in linear algebra and &amp;quot;backward&amp;quot; error analysis.&lt;/p&gt;&#xA;&lt;p&gt;John McMarthy - 1971&lt;/p&gt;&#xA;&lt;p&gt;McCarthy&#39;s lecture &amp;quot;The Present State of Research on Artificial Intelligence&amp;quot; is a topic that covers the area in which he has achieved considerable recognition for his work.&lt;/p&gt;&#xA;&lt;p&gt;Edgser W Dijkstra - 1972&lt;/p&gt;&#xA;&lt;p&gt;Edsger Dijkstra was a principal contributor in the late 1950s to the development of the ALGOL, a high level programming language which has become a model of clarity and mathematical rigor. He is one of the principal proponents of the science and art of programming languages in general, and has greatly contributed to our understanding of their structure, representation, and implementation. His fifteen years of publications extend from theoretical articles on graph theory to basic manuals, expository texts, and philosophical contemplations in the field of programming languages.&lt;/p&gt;&#xA;&lt;p&gt;Charles Bachman - 1973&lt;/p&gt;&#xA;&lt;p&gt;For his outstanding contributions to database technology.&lt;/p&gt;&#xA;&lt;p&gt;Donald Knuth - 1974&lt;/p&gt;&#xA;&lt;p&gt;For his major contributions to the analysis of algorithms and the design of programming languages, and in particular for his contributions to &amp;quot;The Art of Computer Programming&amp;quot; through his well-known books in a continuous series by this title.&lt;/p&gt;&#xA;&lt;p&gt;Herbert A Simon - 1975&#xA;In joint scientific efforts extending over twenty years, initially in collaboration with J. C. Shaw at the RAND Corporation, and subsequently with numerous faculty and student colleagues at Carnegie Mellon University, they have made basic contributions to artificial intelligence, the psychology of human cognition, and list processing.&lt;/p&gt;&#xA;&lt;p&gt;Michael O Rabin &amp;amp; Dana Scott - 1976&#xA;For their joint paper &amp;quot;Finite Automata and Their Decision Problem&amp;quot;, which introduced the idea of nondeterministic machines, which has proved to be an enormously valuable concept. Their (Scott &amp;amp; Rabin) classic paper has been a continuous source of inspiration for subsequent work in this field.&lt;/p&gt;&#xA;&lt;p&gt;John Backus - 1977&#xA;For profound, influential, and lasting contributions to the design of practical high-level programming systems, notably through his work on FORTRAN, and for seminal publication of formal procedures for the specification of programming languages.&lt;/p&gt;&#xA;&lt;p&gt;Robert W Floyd - 1978&#xA;For having a clear influence on methodologies for the creation of efficient and reliable software, and for helping to found the following important subfields of computer science: the theory of parsing, the semantics of programming languages, automatic program verification, automatic program synthesis, and analysis of algorithms.&lt;/p&gt;&#xA;&lt;p&gt;Kenneth E Iverson - 1979&#xA;For his pioneering effort in programming languages and mathematical notation resulting in what the computing field now knows as APL, for his contributions to the implementation of interactive systems, to educational uses of APL, and to programming language theory and practice.&lt;/p&gt;&#xA;&lt;p&gt;Tony Hoarse - 1980&#xA;For his fundamental contributions to the definition and design of programming languages.&lt;/p&gt;&#xA;&lt;p&gt;Edgar F Codd - 1981&#xA;For his fundamental and continuing contributions to the theory and practice of database management systems, esp. relational databases.&lt;/p&gt;&#xA;&lt;p&gt;Stephen Cook - 1982&#xA;For his advancement of our understanding of the complexity of computation in a significant and profound way.&lt;/p&gt;&#xA;&lt;p&gt;Ken Thompson &amp;amp; Dennis Ritchie - 1983&#xA;For their development of generic operating systems theory and specifically for the implementation of the UNIX operating system.&lt;/p&gt;&#xA;&lt;p&gt;Niklaus Wirth - 1984&#xA;For developing a sequence of innovative computer languages, EULER, ALGOL-W, Pascal, MODULA and Oberon.&lt;/p&gt;&#xA;&lt;p&gt;Richard M Karp - 1985&#xA;For his continuing contributions to the theory of algorithms including the development of efficient algorithms for network flow and other combinatorial optimization problems, the identification of polynomial-time computability with the intuitive notion of algorithmic efficiency, and, most notably, contributions to the theory of NP-completeness.&lt;/p&gt;&#xA;&lt;p&gt;John Hopcroft &amp;amp; Robert Tarjan - 1986&#xA;For fundamental achievements in the design and analysis of algorithms and data structures&lt;/p&gt;&#xA;&lt;p&gt;John Cocke - 1987&#xA;For significant contributions in the design and theory of compilers, the architecture of large systems and the development of reduced instruction set computers (RISC)&lt;/p&gt;&#xA;&lt;p&gt;Ivan Sutherland - 1988&#xA;For his pioneering and visionary contributions to computer graphics, starting with Sketchpad, and continuing after.&lt;/p&gt;&#xA;&lt;p&gt;William Kahan - 1989&#xA;For his fundamental contributions to numerical analysis. One of the foremost experts on floating-point computations. Kahan has dedicated himself to &amp;quot;making the world safe for numerical computations.&lt;/p&gt;&#xA;&lt;p&gt;Fernando J Corbato - 1990&#xA;For his pioneering work organizing the concepts and leading the development of the general-purpose, large-scale, time-sharing and resource-sharing computer systems, CTSS and Multics.&lt;/p&gt;&#xA;&lt;p&gt;Robin Milner - 1991&#xA;For three distinct and complete achievements:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;LCF, the mechanization of Scott&#39;s Logic of Computable Functions, probably the first theoretically based yet practical tool for machine assisted proof construction;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;ML, the first language to include polymorphic type inference together with a type-safe exception-handling mechanism;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;CCS, a general theory of concurrency. In addition, he formulated and strongly advanced full abstraction, the study of the relationship between operational and denotational semantics.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;Butler Lampson - 1992&lt;/p&gt;&#xA;&lt;p&gt;For contributions to the development of distributed, personal computing environments and the technology for their implementation: workstations, networks, operating systems, programming systems, displays, security and document publishing.&lt;/p&gt;&#xA;&lt;p&gt;Juris Hartmanis &amp;amp; Richard E Stearns - 1993&lt;/p&gt;&#xA;&lt;p&gt;In recognition of their seminal paper which established the foundations for the field of computational complexity theory.&lt;/p&gt;&#xA;&lt;p&gt;Edward Feigenbaum &amp;amp; Raj Reddy - 1994&lt;/p&gt;&#xA;&lt;p&gt;For pioneering the design and construction of large scale artificial intelligence systems, demonstrating the practical importance and potential commercial impact of artificial intelligence technology.&lt;/p&gt;&#xA;&lt;p&gt;Manuel Blum - 1995&lt;/p&gt;&#xA;&lt;p&gt;In recognition of his contributions to the foundations of computational complexity theory and its application to cryptography and program checking.&lt;/p&gt;&#xA;&lt;p&gt;Amir Pneuli - 1996&lt;/p&gt;&#xA;&lt;p&gt;For seminal work introducing temporal logic into computing science and for outstanding contributions to program and systems verification.&lt;/p&gt;&#xA;&lt;p&gt;Douglas Engelbart - 1997&lt;/p&gt;&#xA;&lt;p&gt;For an inspiring vision of the future of interactive computing and the invention of key technologies to help realize this vision.&lt;/p&gt;&#xA;&lt;p&gt;Jim Gray - 1998&lt;/p&gt;&#xA;&lt;p&gt;For seminal contributions to database and transaction processing research and technical leadership in system implementation.&lt;/p&gt;&#xA;&lt;p&gt;Fred Brooks - 1999&lt;/p&gt;&#xA;&lt;p&gt;For landmark contributions to computer architecture, operating systems, and software engineering.&lt;/p&gt;&#xA;&lt;p&gt;Andrew Yao - 2000&lt;/p&gt;&#xA;&lt;p&gt;In recognition of his fundamental contributions to the theory of computation, including the complexity-based theory of pseudorandom number generation, cryptography, and communication complexity.&lt;/p&gt;&#xA;&lt;p&gt;Ole-Johan Dahl &amp;amp; Kristen Nygaard - 2001&lt;/p&gt;&#xA;&lt;p&gt;For ideas fundamental to the emergence of object-oriented programming, through their design of the programming languages Simula I and Simula 67.&lt;/p&gt;&#xA;&lt;p&gt;Ron Rivest &amp;amp; Adi Shamir &amp;amp; Leonard Adleman - 2002&lt;/p&gt;&#xA;&lt;p&gt;For their ingenious contribution for making public-key cryptography useful in practice.&lt;/p&gt;&#xA;&lt;p&gt;Alan Kay 2003&lt;/p&gt;&#xA;&lt;p&gt;For pioneering many of the ideas at the root of contemporary object-oriented programming languages, leading the team that developed Smalltalk, and for fundamental contributions to personal computing.&lt;/p&gt;&#xA;&lt;p&gt;Vint Cerf &amp;amp; Bob Kahn - 2004&lt;/p&gt;&#xA;&lt;p&gt;For pioneering work on internetworking, including the design and implementation of the Internet&#39;s basic communications protocols, TCP/IP, and for inspired leadership in networking.&lt;/p&gt;&#xA;&lt;p&gt;Peter Naur - 2005&lt;/p&gt;&#xA;&lt;p&gt;For fundamental contributions to programming language design and the definition of&#xA;ALGOL 60, to compiler design, and to the art and practice of computer programming.&lt;/p&gt;&#xA;&lt;p&gt;Frances Allen - 2006&lt;/p&gt;&#xA;&lt;p&gt;For pioneering contributions to the theory and practice of optimizing compiler techniques that laid the foundation for modern optimizing compilers and automatic parallel execution.&lt;/p&gt;&#xA;&lt;p&gt;Edmund M Clarke &amp;amp; Allen Emerson &amp;amp; Joseph Sifakis - 2007&lt;/p&gt;&#xA;&lt;p&gt;For their roles in developing model checking into a highly effective verification technology, widely adopted in the hardware and software industries.&lt;/p&gt;&#xA;&lt;p&gt;Barbara Liskov - 2008&lt;/p&gt;&#xA;&lt;p&gt;For contributions to practical and theoretical foundations of programming language and system design, especially related to data abstraction, fault tolerance, and distributed computing.&lt;/p&gt;&#xA;&lt;p&gt;Charles P Thacker - 2009&#xA;For his pioneering design and realization of the Xerox Alto, the first modern personal computer, and in addition for his contributions to the Ethernet and the Tablet&#xA;PC.&lt;/p&gt;&#xA;&lt;p&gt;Leslie Valiant - 2010&lt;/p&gt;&#xA;&lt;p&gt;For transformative contributions to the theory of computation, including the theory of probably approximately correct (PAC) learning, the complexity of enumeration and of algebraic computation, and the theory of parallel and distributed computing.&lt;/p&gt;&#xA;&lt;p&gt;Judea Pearl - 2011&lt;/p&gt;&#xA;&lt;p&gt;For fundamental contributions to artificial intelligence through the development of a calculus for probabilistic and causal reasoning.&lt;/p&gt;&#xA;&lt;p&gt;Silvio Micali &amp;amp; Shafi Goldwasser - 2012&lt;/p&gt;&#xA;&lt;p&gt;For transformative work that laid the complexity-theoretic foundations for the science of cryptography and in the process pioneered new methods for efficient verification of mathematical proofs in complexity theory.&lt;/p&gt;&#xA;&lt;p&gt;Leslie Lamport - 2013&lt;/p&gt;&#xA;&lt;p&gt;For fundamental contributions to the theory and practice of distributed and concurrent systems, notably the invention of concepts such as causality and logical clocks, safety and liveness, replicated state machines, and sequential consistency.&lt;/p&gt;&#xA;&lt;p&gt;Micheal Stonebraker - 2014&lt;/p&gt;&#xA;&lt;p&gt;For fundamental contributions to the concepts and practices underlying modern database systems.&lt;/p&gt;&#xA;&lt;p&gt;Whitfield Diffie &amp;amp; Martin Hellman - 2015&lt;/p&gt;&#xA;&lt;p&gt;For fundamental contributions to modern cryptography. Diffie and Hellman&#39;s groundbreaking 1976 paper, &amp;quot;New Directions in Cryptography&amp;quot;, introduced the ideas of public-key cryptography and digital signatures, which are the foundation for most regularly-used security protocols on the Internet today.&lt;/p&gt;&#xA;&lt;p&gt;Tim Berners-Lee - 2016&lt;/p&gt;&#xA;&lt;p&gt;For inventing the World Wide Web, the first web browser, and the fundamental protocols and algorithms allowing the Web to scale.&lt;/p&gt;&#xA;&lt;p&gt;John Leroy Hennessy &amp;amp; David Patterson - 2017&lt;/p&gt;&#xA;&lt;p&gt;For pioneering a systematic, quantitative approach to the design and evaluation of computer architectures with enduring impact on the microprocessor industry.&lt;/p&gt;&#xA;&lt;p&gt;Yoshua Bengio &amp;amp; Geoffrey Hinton &amp;amp; Yann LeCun - 2018&lt;/p&gt;&#xA;&lt;p&gt;For conceptual and engineering breakthroughs that have made deep neural networks a critical component of computing.&lt;/p&gt;&#xA;&lt;p&gt;Edwin Catmull &amp;amp; Pat Hanrahan - 2019&lt;/p&gt;&#xA;&lt;p&gt;For fundamental contributions to 3-D computer graphics, and the revolutionary impact of these techniques on computer-generated imagery (CGI) in filmmaking and other applications.&lt;/p&gt;&#xA;&lt;p&gt;Alfred Aho &amp;amp; Jeffrey Ullman - 2020&lt;/p&gt;&#xA;&lt;p&gt;For fundamental algorithms and theory underlying programming language implementation and for synthesizing these results and those of others in their highly influential books, which educated generations of computer scientists.&lt;/p&gt;&#xA;&lt;p&gt;Jack Dongarra - 2021&lt;/p&gt;&#xA;&lt;p&gt;For pioneering contributions to numerical algorithms and libraries that enabled high performance computational software to keep pace with exponential hardware improvements for over four decades&lt;/p&gt;&#xA;</description>
    </item>
    <item>
      <title>The 2022 Manifesto</title>
      <link>https://hsp-test.netlify.app/blog/manifesto-2022.html/</link>
      <pubDate>Mon, 08 Aug 2022 05:30:00 +0530</pubDate>
      <author>HSP</author>
      <guid>https://hsp-test.netlify.app/blog/manifesto-2022.html</guid>
      <description>&lt;h1 id=&#34;table-of-contents&#34;&gt;Table of Contents &lt;a class=&#34;anchor&#34; href=&#34;#table-of-contents&#34;&gt;#&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#hackerspace-manifesto-2022&#34;&gt;Hackerspace manifesto 2022&lt;/a&gt;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#tilde&#34;&gt;Tilde&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#homebrew&#34;&gt;Homebrew&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#closing-note&#34;&gt;Closing Note&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;hackerspace-manifesto-2022&#34;&gt;Hackerspace manifesto 2022 &lt;a class=&#34;anchor&#34; href=&#34;#hackerspace-manifesto-2022&#34;&gt;#&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;p&gt;Hi there! I&#39;m Anirudh. I&#39;m the core team lead of Hackerspace PESUECC.&lt;/p&gt;&#xA;&lt;p&gt;It&#39;s said that writing is far more preferable compared to all other forms of expression, as good writing requires clear thinking. It&#39;s in this spirit that this blog post is ending up here, on the Hackerspace Website, and not on the usual channels of communication.&lt;/p&gt;&#xA;&lt;p&gt;I see this post having two main reasons to exist - firstly, to highlight how we&#39;ve grown not just as a student-run development club but also as a community. Secondly, and perhaps, most importantly, It&#39;s an attempt to establish the shared vision that I desparately hope will drive the further growth and development of this community.&lt;/p&gt;&#xA;&lt;p&gt;When Hackerspace PESUECC started off as a whatsapp group back in April of 2021, the vision was a singular one - Establish HackerSpace as a club that functions at the same level in both campuses.&lt;/p&gt;&#xA;&lt;p&gt;Now, When I look at where we are today - having gone from a whatsapp group of five people and nothing else, to a thriving community of thirty-six student developers, designers, marketers, and operators, who are, and have been, the backbone of our three events, multiple projects, and our open-source community - I can&#39;t help but feel a deep sense of pride.&lt;/p&gt;&#xA;&lt;p&gt;We have come far, and there is, without a doubt, much to be appreciated.&lt;/p&gt;&#xA;&lt;p&gt;At this juncture, I&#39;m reminded of Robert Frost&#39;s &amp;quot;Stopping by Woods on a Snowy Evening&amp;quot;.&lt;/p&gt;&#xA;&lt;p&gt;In the Poem so mentioned, Frost undertakes a wintertime journey through a lush, beautiful countryside, and happens to encounter some woody, forest-like land. Snow cascading down around him, he notices the inherent beauty in the silence, and stops to soak in this oasis in time.&lt;/p&gt;&#xA;&lt;p&gt;His horse, confused, makes a sound that snaps Frost out of his reverie. He realizes he must move on; for while the beautiful woods may well be a worthwhile halt, it isn&#39;t his destination. Frost puts it best -&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;The woods are lovely, dark and deep.&#xA;But I have promises to keep,&#xA;And miles to go before I sleep,&#xA;And miles to go before I sleep.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;This leads to the question we, as members of HackerSpace PESUECC, need to ask ourselves - Is this really our destination?&lt;/p&gt;&#xA;&lt;p&gt;Throughout my time as the core team lead, I&#39;ve had the wonderful privilege of being a part of communities such as PES Open Source (now UniFOSS) and FOSS United.&lt;/p&gt;&#xA;&lt;p&gt;In these communities, I understood that these two principles lie at the core of every functioning community.&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;There exists a cause that brings like-minded folks together, and&lt;/li&gt;&#xA;&lt;li&gt;There exists a framework for them to communicate, discuss, and collaborate, to work towards that cause.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;The way I see it, there&#39;s a dire need for every student-run community to aggressively focus on two principal tenets.&lt;/p&gt;&#xA;&lt;p&gt;Firstly, We must ensure that we keep the spirit of building alive. It&#39;s what has driven change and innovation since time immemorial, and it&#39;s critical to not only encourage, but in fact, celebrate the act of creation and invention.&lt;/p&gt;&#xA;&lt;p&gt;Irrespective of which hat you choose to wear - be it that of an engineer, a designer, an operator, a marketer, or a mentor, The act of building and creating in a tight feedback loop is foundational to the progress of one&#39;s skill and learning.&lt;/p&gt;&#xA;&lt;p&gt;Secondly, We must ensure that the spirit of Free and Open-Source Software (FOSS) isn&#39;t just maintained, but rather, is actively evangelized.&lt;/p&gt;&#xA;&lt;p&gt;FOSS Runs the world, and this isn&#39;t an exaggeration by any means. These programs and libraries are the reason that Computers, Computer Science and Software Engineering is inexpensive and accessible to common people like you and me.&lt;/p&gt;&#xA;&lt;p&gt;As students, the largest beneficiaries of the FOSS Ecosystem, it&#39;s our responsibility to ensure that we carry on the tradition of free and open sharing of knowledge and software.&lt;/p&gt;&#xA;&lt;p&gt;At the core of both these principles lie two extremely important factors - Community, and Knowledge Sharing.&lt;/p&gt;&#xA;&lt;p&gt;Builders and Creators cannot be the sole judges of their work - A feedback mechanism is necessary to help them become better. Knowledge must be shared for those listening to understand what&#39;s happening, and those building to know what they can do better.&lt;/p&gt;&#xA;&lt;p&gt;Furthermore, FOSS, by its nature, depends on community. Knowledge-sharing is built into the concept, for one can only learn more when their work is used in different ways by the community that exists.&lt;/p&gt;&#xA;&lt;p&gt;Keeping these concepts, ideas, and principles in mind, I intend to ensure that HackerSpace PESUECC establishes a legacy of maintaining and growing the student FOSS Community, and of providing builders and creators a space to build and have their work bettered by feedback.&lt;/p&gt;&#xA;&lt;p&gt;We intend to launch two major initiatives this year.&lt;/p&gt;&#xA;&lt;h2 id=&#34;tilde&#34;&gt;Tilde &lt;a class=&#34;anchor&#34; href=&#34;#tilde&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;To ensure that builders and creators have a like-minded community of other builders and creators to help them become better, we intend to launch Tilde, a project development team initiative.&lt;/p&gt;&#xA;&lt;p&gt;Students can volunteer to start projects or take over existing projects, working on them in two-week cycles in groups of four or five, driving them toward completion. We won&#39;t impose any limit on what the projects are, so long as there&#39;s a learning outcome from building it.&lt;/p&gt;&#xA;&lt;p&gt;Teams meet at the end of the two weeks to discuss progress, take feedback, and if necessary, re-evaluate the direction chosen. Builders and Creators who volunteer will be provided with a profile page to show off their work.&lt;/p&gt;&#xA;&lt;h2 id=&#34;homebrew&#34;&gt;Homebrew &lt;a class=&#34;anchor&#34; href=&#34;#homebrew&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;To carry on the tradition of Free and Open-Source Software communities, Homebrew is the FOSS wing of HackerSpace PESUECC. Homebrew will conduct regular talks and workshops to spread the message of FOSS, share knowledge about new tools, and at times, explore new projects.&lt;/p&gt;&#xA;&lt;p&gt;Homebrew will also meet once a week to show off and discuss projects that members of the community have been working that use FOSS Technologies. These meetings will be open, and anyone can attend - even those outside the community. These meetings can also be used to discuss new and interesting FOSS projects.&lt;/p&gt;&#xA;&lt;p&gt;With this, we intend to build a strong open-source community here, and carry on the legacy of those communities that came before us.&lt;/p&gt;&#xA;&lt;h2 id=&#34;closing-note&#34;&gt;Closing Note &lt;a class=&#34;anchor&#34; href=&#34;#closing-note&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;In conclusion, I believe the year ahead can be one of immense challenges - starting communities from scratch is no joke, and it&#39;s foolish to believe it&#39;ll be easy - but we&#39;re doing it because of the long-term gains, and not the short-term ones.&lt;/p&gt;&#xA;&lt;p&gt;If you&#39;re someone who isn&#39;t a part of HackerSpace PESUECC, but you resonate with the goals and purposes of this message, please reach out.&lt;/p&gt;&#xA;&lt;p&gt;I look forward to seeing all of you joining us this year. Thank you for taking the time to read this.&lt;/p&gt;&#xA;&lt;p&gt;Anirudh Rowjee&#xA;Core Team Lead, HackerSpace PESUECC&lt;/p&gt;&#xA;&lt;p&gt;Monday 08 August 2022&lt;/p&gt;&#xA;</description>
    </item>
    <item>
      <title>systemctl start linux</title>
      <link>https://hsp-test.netlify.app/homebrew/workshop_posts/systemctl start linux.html/</link>
      <pubDate>Fri, 15 Apr 2022 05:30:00 +0530</pubDate>
      <author>HSP</author>
      <guid>https://hsp-test.netlify.app/homebrew/workshop_posts/systemctl start linux.html</guid>
      <description>&lt;h2 id=&#34;readme&#34;&gt;README!&lt;/h2&gt;&#xA;&lt;p&gt;Welcome to &lt;code&gt;systemctl start linux&lt;/code&gt;! This is our very first workshop on the wonderful, enchanting world of Linux, and we&#39;re here to hold your hand through the process of exploring this world yourself.&lt;/p&gt;&#xA;&lt;p&gt;This post serves as a standing reference for the workshop (and later)! Feel free to come back here and refer to the content as you please.&lt;/p&gt;&#xA;&lt;p&gt;If you&#39;ve got more doubts, or if you&#39;d like to just nerd out about how cool this stuff is, Make sure you join the &lt;a href=&#34;&#34;&gt;Homebrew By Hackerspace PESUECC Discord&lt;/a&gt;!&lt;/p&gt;&#xA;&lt;p&gt;Ready? Here we go!&lt;/p&gt;&#xA;&lt;p&gt;I&#39;d like to welcome you to the Linux Operating System! Every single line of code you use here has been contributed as an effort by people around the globe, working for the public good. Then again, Linux isn&#39;t the power user&#39;s choice for no reason - we&#39;re here to show you why it&#39;s a favorite.&lt;/p&gt;&#xA;&lt;p&gt;So, you wake up, and you&#39;re in a strange place. All you have with you is a computer, with a single character on it -&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Say Hi to Shelly, your friendly neighborhood UNIX Shell!&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;What the hell is a shell?&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;A shell is nothing but a text-based interface for you to use your beloved computer. Think of the shell as your really smart friend who prefers texting over anything else, and thus, wants only to speak via text. This seems silly at the moment, but trust me, you&#39;ll see why this is an advantage at times!&lt;/p&gt;&#xA;&lt;p&gt;The Shell works as a REPL - a Read, Edit, Print Loop - where you&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Read what the shell says&lt;/li&gt;&#xA;&lt;li&gt;Edit or write a command or collection of commands to the shell&lt;/li&gt;&#xA;&lt;li&gt;read the output Printed by the shell&lt;/li&gt;&#xA;&lt;li&gt;Loop until you&#39;re done&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;The shell works on a collection (and combination) of commands, some of which you will explore today.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Remember! If you&#39;re ever confused about a command, simply type into your shell -&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;code&gt;$ man &amp;lt;command&amp;gt;&lt;/code&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;This opens up the in-built help system, known as Manual Pages!&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;0---what-is-this-place&#34;&gt;0 - What is this place?&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Covered - &lt;code&gt;clear&lt;/code&gt;, &lt;code&gt;pwd&lt;/code&gt;, &lt;code&gt;whoami&lt;/code&gt;, Directories, and Expansion&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;whoami&#34;&gt;whoami&lt;/h3&gt;&#xA;&lt;p&gt;What is this place? &lt;em&gt;Who am I&lt;/em&gt;, you wonder? Out of &lt;strong&gt;instinct&lt;/strong&gt;, you type that into your computer..&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ whoami&#xA;someone_really_cool&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;The &lt;code&gt;whoami&lt;/code&gt; command tells you, simply put, who you are on the computer! Think of this is the way you ask if Shelly knows you. For more information, refer to &lt;code&gt;man whoami&lt;/code&gt;!&lt;/p&gt;&#xA;&lt;h3 id=&#34;pwd&#34;&gt;pwd&lt;/h3&gt;&#xA;&lt;p&gt;Good! Now that we know where we are, it&#39;s time to find out where in the computer we are!&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;But Why?&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;That&#39;s an excellent question! In Linux, &lt;a href=&#34;https://en.wikipedia.org/wiki/Everything_is_a_file#:~:text=Everything%20is%20a%20file%20describes,bytes%20exposed%20through%20the%20filesystem&#34;&gt;everything is a file&lt;/a&gt;. Given this, it&#39;s essential to know where you are so you don&#39;t modify the wrong file by mistake, and say, accidentally get rid of the computer&#39;s ability to adjust brightness (not kidding, see &lt;code&gt;/sys/class/backlight/&lt;/code&gt;).&lt;/p&gt;&#xA;&lt;p&gt;How this actually works isn&#39;t something we&#39;ll cover in this workshop, but in essence, everything - network interfaces, displays, mice, keyboards, WiFi Adapters, Gaming Controllers, Processes, Hard Drives - to Linux, they&#39;re all files! You can read more about this &lt;a href=&#34;https://www.linux.com/training-tutorials/linux-filesystem-explained/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;A &lt;em&gt;collection of files&lt;/em&gt; is known, as you know, as a &lt;em&gt;folder&lt;/em&gt;. The formal term for the same is &lt;em&gt;directory&lt;/em&gt;.&lt;/p&gt;&#xA;&lt;p&gt;The place you&#39;re currently located in Linux is always known as the &lt;em&gt;working directory&lt;/em&gt;. To find out where we are, we can use the &lt;code&gt;pwd&lt;/code&gt; (&lt;code&gt;p&lt;/code&gt;rint &lt;code&gt;w&lt;/code&gt;orking &lt;code&gt;d&lt;/code&gt;irectory) command.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ pwd&#xA;/home/anirudh&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;clear&#34;&gt;clear&lt;/h3&gt;&#xA;&lt;p&gt;Lastly, before you start the next module, we&#39;ll show you how to make sure you don&#39;t get lost in the text on the terminal! Key in -&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ clear&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;And the screen should be empty, save for out friendly neighbourhood prompt &lt;code&gt;$&lt;/code&gt;!&lt;/p&gt;&#xA;&lt;h2 id=&#34;1---ls-cd-mkdir&#34;&gt;1 - &lt;code&gt;ls&lt;/code&gt;, &lt;code&gt;cd&lt;/code&gt;, &lt;code&gt;mkdir&lt;/code&gt;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;pwd-1&#34;&gt;pwd&lt;/h3&gt;&#xA;&lt;p&gt;Basic PWD : prints current working directory&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ pwd # shows you the current working directory&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;ls&#34;&gt;ls&lt;/h3&gt;&#xA;&lt;p&gt;Basic usage of ls :&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ls&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Lists all files, hidden files and folder too&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ls -a&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Lists contents of directory given an &amp;quot;absolute&amp;quot; path&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ls /path/to/some/folder/from/root&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Lists contents of directory given an &amp;quot;relative&amp;quot; path originating from PWD&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ls ./path/to/some/folder/from/pwd&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Gives permissions and last modified of all normal contents of the directory&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ls -l&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Any of these can be combined with each other with some obviously logic, like :&#xA;List permissions and last modified for all contents including hidden&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ls -a -l OR la -l&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;cd&#34;&gt;cd&lt;/h3&gt;&#xA;&lt;p&gt;Basic use :&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;cd to current users home directory&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd ~/&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;cd to move one directory up&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd ..&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Change directory to root directory :&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd /&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Change directory using absolute paths&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd /path/to/some/folder/from/root&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Change directory using relative paths&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd ./path/to/some/folder/from/pwd&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Installing FZF&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone https://github.com/junegunn/fzf.git ~/.fzf&#xA;$ cd ~/.fzf&#xA;$ ./install&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;mkdir&#34;&gt;mkdir&lt;/h3&gt;&#xA;&lt;p&gt;basic use :&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mkdir &amp;lt;folder name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Creating multiple folder&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mkdir dir_1 dir_2&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Creating directories withing directories&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mkdir -p dir_1/sub_dir_1&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;2---touch-and-permissions&#34;&gt;2 - touch and permissions&lt;/h2&gt;&#xA;&lt;h4 id=&#34;touch&#34;&gt;Touch&lt;/h4&gt;&#xA;&lt;p&gt;So what exactly is the touch command? If we ask the man pages, we get &amp;quot;changes file stamps&amp;quot;. This is something where even seasoned linux user go wrong.Touch DOES not create files for you, it modifies the time stamp on those files.&lt;/p&gt;&#xA;&lt;p&gt;These time stamps should have been observed in the previous module in the command &lt;code&gt;ls -a -l&lt;/code&gt;. Even though touch is to modify time stamps it is rarely used so.&lt;/p&gt;&#xA;&lt;p&gt;Basic use :&#xA;changes time stamp is file exists, else creates new file&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ touch &amp;lt;file_name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;what if you don&#39;t want it creating new files?&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ touch -c &amp;lt;file_name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;what if you want to only change the access time stamp?&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ touch -a &amp;lt;file_name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;and if you want to modify only modification time stamp&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ touch -m &amp;lt;file_name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Soooo, how do u see those time stamps?&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ stat &amp;lt;file_name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h4 id=&#34;permissions&#34;&gt;Permissions&lt;/h4&gt;&#xA;&lt;p&gt;The permission system in linux is quite a beautiful thing. But before we can learn that, we need to learn a bit about the user system in linux.&lt;/p&gt;&#xA;&lt;p&gt;There can be many users accessing a single computer and its files. These users can be part of &lt;code&gt;groups&lt;/code&gt;. &lt;code&gt;superuser&lt;/code&gt; is another user in every system that has no restriction to any file.&lt;/p&gt;&#xA;&lt;p&gt;Whenever one uses &lt;code&gt;sudo&lt;/code&gt;, they are doing the commands as if they are the &lt;code&gt;superuser&lt;/code&gt; and begin able to do commands as super users naturally needs a password. &lt;code&gt;sudo&lt;/code&gt; is analogous to administrator in windows but much more secure and useful.&lt;/p&gt;&#xA;&lt;p&gt;To ones using our repl session, all commands are executed superuser without any password.&lt;/p&gt;&#xA;&lt;p&gt;Now we are prime to learn permissions, get those binary thinking hats on!&lt;/p&gt;&#xA;&lt;p&gt;For any given folder or file we have three types of access:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;read write execute  (rwx, remember the order its important)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;for any given access types, 1 is used if allowed, 0 if not&lt;/p&gt;&#xA;&lt;p&gt;So if user has read and execute permissions :&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;&#xA; rwx&#xA; 111 =&amp;gt; 7&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Now, of course we gotta give permissions for owner, groups and other.Groups being the group that current owner is part of and others well being everyone except the owner and his group.&lt;/p&gt;&#xA;&lt;p&gt;Once again the order matter so remember it :&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;   owner group others (ugo)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;and now finally, say the current owner get all permission, other in his group also get all and others get none.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;&#xA;   user group other&#xA;   rwx   rwx   ---&#xA;   7     7     0   =&amp;gt; 770&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;You now know how to calculate linux permissions! Congratulations.&#xA;So how do we set these permissions?&lt;/p&gt;&#xA;&lt;p&gt;we use : &lt;code&gt;chmod&lt;/code&gt;&lt;/p&gt;&#xA;&lt;h4 id=&#34;chmod&#34;&gt;chmod&lt;/h4&gt;&#xA;&lt;p&gt;Basic usage :&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo chmod 770 /absolute/path/to/some/folder/or/file&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;We can also use relative path, no restrictions.&lt;/p&gt;&#xA;&lt;p&gt;It is always advised to execute chmod as &lt;code&gt;superuser&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;We can also change the owner of the file using &lt;code&gt;chown&lt;/code&gt;, which I wont be covering in this module!&#xA;There is quite a bit more to the linux permissions system, but that all for now. Onto the next module.&lt;/p&gt;&#xA;&lt;h2 id=&#34;3---pipes-and-redirection&#34;&gt;3 - pipes and Redirection&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;A normal logic of any computer program is a set of instructions which manipulates given &lt;strong&gt;inputs&lt;/strong&gt; to give a specific &lt;strong&gt;output&lt;/strong&gt; and give any &lt;strong&gt;errors&lt;/strong&gt; if any&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;So every computer science student should know that three data streams come into play and &lt;strong&gt;STDIN&lt;/strong&gt; a.k.a Standard Input (data fed into your program), &lt;strong&gt;STDOUT&lt;/strong&gt; a.k.a Standard Output (data printed by the program, defaults to terminal) and &lt;strong&gt;STDERR&lt;/strong&gt; a.k.a Standard Error (for error messages, defaults to terminal)&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Now we are going to delve into two topics in detail which is &lt;strong&gt;Pipes&lt;/strong&gt; and &lt;strong&gt;Redirection&lt;/strong&gt; where we manipulate the flow of said above data streams&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;And buckle up! Cause this is an important topic!&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;redirection&#34;&gt;Redirection&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;the action of assigning or directing something to a new or different place or purpose.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;and well, that is exactly what we are doing! We are going to redirect the data coming from our data streams i.e STDIN, STDOUT and STDERR using certain operators in the command line and use it somewhere else for some other purpose&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Demonstrate usage of &amp;lt;, &amp;gt;&amp;gt;, &amp;gt;, 2&amp;gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;Usage of &amp;lt; :&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cowsay &amp;lt; message.txt  //Input Redirection&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;&lt;strong&gt;Usage of &amp;gt; :&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ls &amp;gt; output.dat //Output redirection&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;&lt;strong&gt;Usage of &amp;gt;&amp;gt; :&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cowsay moo &amp;gt;&amp;gt; output.dat  //Output redirection (append)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;&lt;strong&gt;Usage of 2&amp;gt; :&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ g++ 1.cpp &amp;gt;&amp;gt; output.dat 2&amp;gt; error.dat  //Error Redirection&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Demonstrate the usage of cat as a barebones text editor&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;redirection-exercises&#34;&gt;Redirection Exercises&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Using cat as an editor, write the following message&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;pre&gt;&lt;code&gt;hello im under the water here too much raining&#xA;uwuwuwuwuwuwuw&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;ol start=&#34;2&#34;&gt;&#xA;&lt;li&gt;Now using the operators you learnt, redirect the message to cowsay and get the whole output in a file output.dat&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;piping&#34;&gt;Piping&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;So far we have seen redirection to and from files, now we are going to learn a new mechanism for sending the data recieved by execution of one program or command or script to another program or command or script and this mechanism is called &lt;b&gt;Pipes.&lt;/b&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Two important features is data forwarding and pipelined simultaneous execution!&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;   $ ls -la | head -3  //Executes the command ls and forwards the data to the head command which prints the first three lines of recieved data&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;piping-exercises&#34;&gt;Piping Exercises&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Let&#39;s play with the lolcat utility a bit shall we? (first install it with apt)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;   $ ls -la | lolcat //try it out!&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;4---jobs&#34;&gt;4 - Jobs&lt;/h2&gt;&#xA;&lt;h3 id=&#34;what-is-job-control&#34;&gt;What is Job control?&lt;/h3&gt;&#xA;&lt;p&gt;Job control is nothing but the ability to stop/suspend the execution of&#xA;processes (command) and continue/resume their execution as per your&#xA;requirements.&lt;/p&gt;&#xA;&lt;h3 id=&#34;what-is-the-purpose-of-job-command-in-unix&#34;&gt;What is the purpose of Job command in UNIX?&lt;/h3&gt;&#xA;&lt;h3 id=&#34;jobs-commands&#34;&gt;Jobs Commands:&lt;/h3&gt;&#xA;&lt;p&gt;Basic usage :&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ jobs&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;To display the process ID or jobs for the job whose name begins with “p,”Alternatively, we can use &lt;strong&gt;jobs %p&lt;/strong&gt; !!&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ jobs -p %p&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Information about each job&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ jobs -l&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Display jobs with PID&#39;s only&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ jobs -p&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Currently running jobs&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ jobs -r&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Jobs that have stopped&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ jobs -s&#xA;type -a jobs OR command -V jobs&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;&lt;strong&gt;How do I list only processes that have changed status since the&#xA;last notification?&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Start new job&#xA;$ sleep 100 &amp;amp;&#xA;# Show jobs that have stopped or exited since last notified.&#xA;$ jobs -n**&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;5---fg-bg-ps--kill&#34;&gt;5 - fg, bg, ps &amp;amp; kill&lt;/h2&gt;&#xA;&lt;h5 id=&#34;-why-do-we-need-fg-and-bg-processes--&#34;&gt;&lt;em&gt;Why do we need fg and bg processes ?&lt;/em&gt;&lt;/h5&gt;&#xA;&lt;h3 id=&#34;bg&#34;&gt;bg&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;help bg&lt;/code&gt; - Introduction to bg&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;bg [ job_spec ]&lt;/code&gt; - Create a Simple Job and run command&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;[ job_spec ]&lt;/strong&gt; - Explain different types of job_spec with examples&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Current Job&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ bg %+&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Previous Job&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ bg %-&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Job Number&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ bg %1&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Job Initiation Command (Starts with)&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ bg %s&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Job Initiation Command (Contains)&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ bg %?s&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;fg&#34;&gt;fg&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;help fg&lt;/code&gt; - Introduction to fg&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;fg [ job_spec]&lt;/code&gt; - Create a Simple Job and run command&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;[ job_spec ]&lt;/strong&gt; - Explain different types of job_spec with examples&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Current Job&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ fg %+&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Previous Job&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ fg %-&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Job Number&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ fg %1&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Job Initiation Command (Starts with)&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ fg %s&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Job Initiation Command (Contains)&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ fg %?s&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h5 id=&#34;-jobs-processes---differentiate-&#34;&gt;&lt;em&gt;Jobs? Processes? - Differentiate&lt;/em&gt;&lt;/h5&gt;&#xA;&lt;h3 id=&#34;ps&#34;&gt;ps&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Introduction&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;ps [ options ]&lt;/code&gt; - Run command &amp;amp; Explain various fields&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;PID&lt;/strong&gt; - Process ID&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;TTY&lt;/strong&gt; - Terminal Type&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;TIME&lt;/strong&gt; - Process run time on CPU&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;CMD&lt;/strong&gt; - Command name which initiated the process&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;ps --help a&lt;/code&gt; - Summarize all options.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;kill&#34;&gt;kill&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;help kill&lt;/code&gt; - Introduction&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;kill pid&lt;/code&gt; - Run command after creating a process/job&lt;/li&gt;&#xA;&lt;li&gt;Explain various options observed in help kill.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;List of Kill Signals&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ kill -l&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Specify a signal name to be sent to kill a process&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ kill -s &amp;lt;pid&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;specify a signal number to be sent to kill a process&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ kill -n &amp;lt;pid&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;6---grepwgetzipunziptar&#34;&gt;6 - grep,wget,zip,unzip,tar&lt;/h2&gt;&#xA;&lt;h3 id=&#34;grep&#34;&gt;grep&lt;/h3&gt;&#xA;&lt;p&gt;basic&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cat &amp;lt;file&amp;gt; | grep &amp;lt;something&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;number of instances&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cat &amp;lt;file&amp;gt; | grep -c &amp;lt;something&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;case intensive&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cat &amp;lt;file&amp;gt; | grep -i &amp;lt;something&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;wgetcurl&#34;&gt;wget/curl&lt;/h3&gt;&#xA;&lt;p&gt;wget basic&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ wget &amp;lt;website-name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;recursive download&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ wget --recursive &amp;lt;website-name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Store a file&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ wget &amp;lt;image-url&amp;gt; &amp;gt;&amp;gt; &amp;lt;image-name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;tar-zip--unzip&#34;&gt;tar, zip , unzip&lt;/h3&gt;&#xA;&lt;h4 id=&#34;tar&#34;&gt;tar&lt;/h4&gt;&#xA;&lt;p&gt;Create tar Archive File in Linux&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ tar -cvf &amp;lt;tar-file&amp;gt;.tar &amp;lt;tar-dir&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Create gzip Archive File in Linux&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ tar cvzf &amp;lt;gzip-file&amp;gt;.tar.gz &amp;lt;gzip-dir&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Untar tar files in Current Directory&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ tar -xvf &amp;lt;tar-file&amp;gt;.tar&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Unzip gzip files in Current Directory&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ tar -xvf &amp;lt;gzip-file&amp;gt;.tar.gz&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h4 id=&#34;zip&#34;&gt;zip&lt;/h4&gt;&#xA;&lt;p&gt;Basic&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ zip &amp;lt;myfile&amp;gt;.zip &amp;lt;filename&amp;gt;.txt&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Remove the file from archive&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ zip –d &amp;lt;filename&amp;gt;.zip &amp;lt;file&amp;gt;.txt&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Update the file from archive&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ zip –u &amp;lt;filename&amp;gt;.zip &amp;lt;new-file&amp;gt;.txt&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Delete orginal files after zipping&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ zip –m &amp;lt;filename&amp;gt;.zip &amp;lt;file&amp;gt;.txt&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h4 id=&#34;unzip&#34;&gt;unzip&lt;/h4&gt;&#xA;&lt;p&gt;Basic&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ unzip &amp;lt;file&amp;gt;.zip&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Unzip to a different directory&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ unzip &amp;lt;filename&amp;gt;.zip -d &amp;lt;/path/to/directory&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Use password to unzip&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ unzip -P &amp;lt;password&amp;gt; &amp;lt;filename&amp;gt;.zip&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Exclude some files&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ unzip &amp;lt;filename&amp;gt;.zip -x &amp;lt;file1-to-exclude&amp;gt; &amp;lt;file2-to-exclude&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;</description>
    </item>
    <item>
      <title>systemctl start linux</title>
      <link>https://hsp-test.netlify.app/homebrew/events/systemctl-start-linux.html/</link>
      <pubDate>Thu, 07 Apr 2022 05:30:00 +0530</pubDate>
      <author>HSP</author>
      <guid>https://hsp-test.netlify.app/homebrew/events/systemctl-start-linux.html</guid>
      <description>&lt;figure&gt;&#xA;&lt;img src=&#34;/static/images/systemctl-start-linux/post-preview.png&#34; alt=&#34;&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;Why do those who use Linux swear by it so much?&#xA;What&#39;s so special about Linux that enables it to power most of the world&#39;s servers?&#xA;What does infinite customizability really mean?&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;systemctl start linux&lt;/code&gt; is a beginner-oriented, hands-on workshop by Hackerspace PESUECC that aims to answer these questions for you. Join us, as we guide you on your Linux journey.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;This workshop will be held on the 18th of April, 2022 from 4:00 to 6:00 PM at the Seminar Hall, PESU EC Campus.&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;section class=&#34;p-index_links_link&#34;&gt;&#xA;    &lt;a href=&#34;https://forms.gle/PFmC8MZAB6uMArUW9&#34; class=&#34;c-gradient-link&#34;&gt;  Register Now! &lt;/a&gt;&#xA;&lt;/section&gt;&#xA;&lt;p&gt;We&#39;ll talk about, and have you experience -&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;An Introduction to the Linux OS and bash commands to demonstrate its flexibility&lt;/li&gt;&#xA;&lt;li&gt;How is Linux beneficial from a FOSS Perspective?&lt;/li&gt;&#xA;&lt;li&gt;Hands-on session with bash, shell scripting and common command-line tools&lt;/li&gt;&#xA;&lt;li&gt;A brief Introduction to Vim&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;In addition to this, the Mentor Team at Hackerspace PESUECC, many of whom use Linux as their primary operating system, will exhibit their configurations and setups, and are available to answer your questions!&lt;/p&gt;&#xA;&lt;p&gt;You can read more about the event here - &lt;a href=&#34;https://hsp-ec.xyz/events/systemctl-start-linux&#34;&gt;https://hsp-ec.xyz/events/systemctl-start-linux&lt;/a&gt;&#xA;Register here directly - &lt;a href=&#34;https://forms.gle/PFmC8MZAB6uMArUW9&#34;&gt;https://forms.gle/PFmC8MZAB6uMArUW9&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;See you there!&lt;/p&gt;&#xA;</description>
    </item>
    <item>
      <title>Kotlin ?</title>
      <link>https://hsp-test.netlify.app/homebrew/workshop_posts/Kotlin.html/</link>
      <pubDate>Sat, 26 Mar 2022 05:30:00 +0530</pubDate>
      <author>HSP</author>
      <guid>https://hsp-test.netlify.app/homebrew/workshop_posts/Kotlin.html</guid>
      <description>&lt;p&gt;&lt;strong&gt;Java&lt;/strong&gt;, alongside a few other frameworks has been the industry standard for building applications that run on multiple platforms - Mobile, PC&#39;s, Web Applications and loads more. But, something changed at &lt;a href=&#34;https://www.google.com/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=&amp;amp;cad=rja&amp;amp;uact=8&amp;amp;ved=2ahUKEwjo2abj8eL2AhVPldgFHRJfAmYQwqsBegQIFRAB&amp;amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DCNLVZjBE08g&amp;amp;usg=AOvVaw15-zzYHlOWBwEM2BexVhTH&#34;&gt;&lt;strong&gt;Google I/O 2017&lt;/strong&gt;&lt;/a&gt;; &lt;strong&gt;Kotlin&lt;/strong&gt; was made the officially supported language for Android App Dev.&lt;/p&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;/images/KotlinvsJava.png&#34; alt=&#34;Kotlin vs Java&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;Put on your reading glasses, as we take a deep dive into why Kotlin makes your &lt;em&gt;App Dev&lt;/em&gt; experience smooooooth.&lt;/p&gt;&#xA;&lt;h2 id=&#34;-null-safety-&#34;&gt;&lt;em&gt;Null Safety&lt;/em&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Let&#39;s start off by talking about one of the most infuriated issues Java developers were concerned with : &lt;strong&gt;&lt;em&gt;Null Pointer Exceptions&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;- Referencing an object with a null value results in a Null Pointer Exception&lt;/em&gt;. All types are &lt;em&gt;Nullable&lt;/em&gt; in Kotlin by default, which translates to no &lt;em&gt;Null Pointer Exceptions&lt;/em&gt; !&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;Tip: In order to assign a null value to a variable in Kotlin, add a &#39;?&#39; after the data type.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;val a: Int? = null&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;-concise-code-&#34;&gt;&lt;em&gt;Concise Code&lt;/em&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Kotlin drastically reduces the need for &lt;strong&gt;&lt;em&gt;Boilerplate Code&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;- Sections of code that are repeated in multiple places with little/no variation.&lt;/em&gt; This makes your experience a lot less tedious. The best example of code conciseness in Kotlin can be observed in &lt;strong&gt;Classes&lt;/strong&gt;.&#xA;&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;-inline-and-extension-functions-&#34;&gt;&lt;em&gt;Inline and Extension Functions&lt;/em&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Java does provide support for &lt;strong&gt;&lt;em&gt;Inline Functions&lt;/em&gt;&lt;/strong&gt; - &lt;em&gt;Functions which are expanded in line, when the function is called&lt;/em&gt; (compiler expands using the &lt;em&gt;final&lt;/em&gt; method). On the other hand, Kotlin provides in-built support for Inline functions.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Extension Functions&lt;/em&gt;&lt;/strong&gt; - &lt;em&gt;The ability to extend classes with new functions without inheritance or decorators&lt;/em&gt;. These are a tad bit more important and usable, especially when you come from languages such as C#. Sadly, these aren&#39;t available in Java.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;Tip: To create an extension function for a previously created class, do the following:&lt;/em&gt;&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;class homeBrew(){&#xA;&#xA;&#x9;fun fOSS(){&#xA;&#x9;&#x9;println(&amp;quot;Welcome to your FOSS Home Ground&amp;quot;)&#xA;&#x9;}&#xA;&#xA;}&#xA;&#xA;fun homeBrew.entryChallenge(){&#xA;&#xA;&#x9;println(&amp;quot;Complete the entry challenge to join us!&amp;quot;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;-coroutines-&#34;&gt;&lt;em&gt;Coroutines&lt;/em&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Android is &lt;strong&gt;&lt;em&gt;Single Threaded&lt;/em&gt;&lt;/strong&gt; by default &lt;em&gt;- The calling thread is blocked until the operation is complete - the App&#39;s UI is completely frozen during this period&lt;/em&gt; and we definitely don&#39;t want that happening do we ?&#xA;The traditional solution to this in Java would be to create &lt;em&gt;Background Threads&lt;/em&gt; for intensive work. But, creating multiple threads increases the complexity as well as chances of encountering errors in the code.&lt;/p&gt;&#xA;&lt;p&gt;Don&#39;t you worry, Kotlin has got you covered.&lt;/p&gt;&#xA;&lt;p&gt;Kotlin uses &lt;strong&gt;&lt;em&gt;&lt;a href=&#34;https://developer.android.com/kotlin/coroutines?gclid=EAIaIQobChMIuZamgZPj9gIVz5lmAh19yguWEAAYASAAEgIZA_D_BwE&amp;amp;gclsrc=aw.ds&#34;&gt;Coroutines&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt; to manage intensive operations. The major advantage compared to Java threads is it&#39;s &lt;strong&gt;&lt;em&gt;Stackless Architecture&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;- They demand lower memory usage compared to threads&lt;/em&gt;. It also provides for the creation of &lt;em&gt;Non Blocking Asynchronous Code&lt;/em&gt; which appears to be synchronous.&#xA;&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;-100-interoperability-with-java-&#34;&gt;&lt;em&gt;100% Interoperability with Java&lt;/em&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Kotlin provides for complete interoperability with Java, which means you can use both Kotlin and Java code in the same project and they will compile perfectly. This also gives you the ability to move from Java to Kotlin on a project which you were previously working on.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;Tip: &lt;a href=&#34;https://developer.android.com/studio&#34;&gt;Android Studio&lt;/a&gt; gives you the ability to convert Java Code to Kotlin or vice versa ! Simply paste Java/Kotlin code onto the IDE and click on the prompt to see the magic happen !!&lt;/em&gt;&lt;/p&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;/images/JavaKotlinInteroperability.png&#34; alt=&#34;Java Kotlin Interoperability&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;&lt;em&gt;Pro Tip: Android Studio also gives you the ability to decompile Kotlin Code into Java. On the Menu Bar, navigate to &lt;strong&gt;Tools-&amp;gt;Kotlin-&amp;gt;Decompile Kotlin to Java&lt;/strong&gt; and see the magic happen !&lt;/em&gt;&lt;/p&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;/images/DecompileToJava.png&#34; alt=&#34;Decompile To Java&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;Well, there are tons of other reasons as to why Kotlin should make it to your &lt;em&gt;Most Used Languages List&lt;/em&gt;, but we&#39;d like to call it an end here. &lt;strong&gt;&lt;em&gt;Happy reading!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;Posted by &lt;a href=&#34;https://github.com/Manab784&#34;&gt;Manab Kumar Biswas&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;&#xA;</description>
    </item>
    <item>
      <title>For Concurrency at its best, It&#39;s Go time!</title>
      <link>https://hsp-test.netlify.app/blog/Concurrency_In_Go.html/</link>
      <pubDate>Thu, 17 Mar 2022 05:30:00 +0530</pubDate>
      <author>HSP</author>
      <guid>https://hsp-test.netlify.app/blog/Concurrency_In_Go.html</guid>
      <description>&lt;h1 id=&#34;table-of-contents&#34;&gt;Table of Contents &lt;a class=&#34;anchor&#34; href=&#34;#table-of-contents&#34;&gt;#&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#goroutines&#34;&gt;Goroutines&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#channels&#34;&gt;Channels&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Well, I came across golang just recently as i needed the socket programming capabilities for my Networks Project. Curious to learn the langauge, I sat and grinded the fundamentals of Golang for two days which was very similar to that of C and Python and Java, until i saw the concurrency capabilities of this amazing langauge.&lt;/p&gt;&#xA;&lt;p&gt;Before we move further, lets understand what Concurrency is, both in Layman&#39;s terms and in definition form.&lt;/p&gt;&#xA;&lt;p&gt;Suppose Alice and Joe have the Sunday to themselves without their chaotic kids ruining the weekend and they want to enjoy their weekend and go out on a date!&#xA;But the house is a mess, so Alice decides to finish her numerous chores and then enjoy the rest of the evening with her husband but unfortunately she cannot single-handedly finish all the chores by the evening, so Joe also starts helping her out and finish all the chores together one-by-one.&lt;/p&gt;&#xA;&lt;p&gt;What Joe and Alice decided to do to finish their chores before the evening, is exactly what &lt;strong&gt;Concurrency&lt;/strong&gt; is!&lt;/p&gt;&#xA;&lt;p&gt;Now in a basic computer, procedural instruction execution occurs i.e one after another. For example, lets say that there are 5 instructions. Instead of executing one-by-one and wasting time, don&#39;t you think it would be better to execute all of the instructions at once?&lt;/p&gt;&#xA;&lt;p&gt;Well, what we can do is allot each of the five instructions to five processes and execute all processes in your computer at once. However, even process creation and execution is time consuming. And that my friends, is where &lt;em&gt;threads&lt;/em&gt; come into the picture!&lt;/p&gt;&#xA;&lt;p&gt;Threads are smaller units in a process that inherit all the resources and features of a process and can execute said instructions in a more clean, fast and efficient way.&lt;/p&gt;&#xA;&lt;p&gt;So to sum it up, let&#39;s come up with definitions for threads and concurrency!&#xA;&lt;strong&gt;Threads&lt;/strong&gt;: Subunits of process which can handle individual sequential execution of a set of instructions concurrently with other threads within the same process.&#xA;&lt;strong&gt;Concurrency&lt;/strong&gt;: Out of order or partial inorder execution of multiple instruction sequences at the same time.&lt;/p&gt;&#xA;&lt;p&gt;Wokay! Now that we closed the basic, it time to move to concurrency with respect to golang!&lt;/p&gt;&#xA;&lt;h1 id=&#34;goroutines&#34;&gt;Goroutines &lt;a class=&#34;anchor&#34; href=&#34;#goroutines&#34;&gt;#&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;p&gt;Well so goroutines are basically the component of concurrent execution or the subfunctions executing concurrently in golang is called goroutines.&lt;/p&gt;&#xA;&lt;p&gt;Well, if you think about it goroutines it is nothing but normal functions, what makes it goroutines are the aspect of concurrent execution which can be achieved by appending the go keyword before the function call to execute it in a seperate thread along with other goroutines if any.&lt;/p&gt;&#xA;&lt;p&gt;Here is a code snippet for you to understand go routines better :-&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;func fn(a int, b int){&#xA;    fmt.Println(a+b)&#xA;}&#xA;func main(){&#xA;    go fn(4,5)&#xA;    fmt.Println(&amp;quot;Hello&amp;quot;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;In the above example, without the concurrency aspect, fn function would be called and executed first and then the &amp;quot;Hello&amp;quot; message would have popped up sequentially.&lt;/p&gt;&#xA;&lt;p&gt;However due to the go keyword and respective goroutines, fn function and the &lt;code&gt;fmt.Println(&amp;quot;Hello&amp;quot;)&lt;/code&gt; command would execute simulatenously.&lt;/p&gt;&#xA;&lt;p&gt;Now you must be thinking.... Wait wha? I thought only goroutines execute concurrently. Well, the main function of your go program is itself a go routine hence supporting simulatenous execution.&lt;/p&gt;&#xA;&lt;h1 id=&#34;channels&#34;&gt;Channels &lt;a class=&#34;anchor&#34; href=&#34;#channels&#34;&gt;#&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;p&gt;Channels are a method of communication between two goroutines in a totally dumbed down form. To be specific, it is a pipe between two goroutines which acts like an interface for interprocess or inter-thread communication. It is a datatype as per go which is simplified to an extent that any developer can exploit the beauty of concurrency in golang!&lt;/p&gt;&#xA;&lt;p&gt;Here&#39;s an code snippet for y&#39;all to relate better :-&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import &amp;quot;fmt&amp;quot;&#xA;&#xA;func main() {&#xA;&#xA;    messages := make(chan int) //Creation of pipe or channel which helps in inter-goroutine communication but only data of int type.&#xA;&#xA;    go func(a int, b int) { messages &amp;lt;- (a+b) }(4,5)&#xA;&#xA;    msg := &amp;lt;-messages&#xA;    fmt.Println(msg)&#xA;    fmt.Println(&amp;quot;Hello&amp;quot;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Well, it might be pretty evident that the above example prints the exact same output as the code snippet i showed for goroutines, the only difference here is that i&#39;m not printing the sum of the two numbers in the function block itself, i am sending the data to the channel specified for inter-goroutine communication between the two goroutines in action here i.e. fn() and main function which we discussed is itself a goroutine. We send the data &lt;code&gt;a+b&lt;/code&gt; to the channel &lt;code&gt;messages&lt;/code&gt; and recieve the message from the fn() subroutine in the main function using the statement &lt;code&gt;msg:=&amp;lt;-messages&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;With this I hope you get a gist of what channels are in golang!&lt;/p&gt;&#xA;&lt;p&gt;Here&#39;s a bit more flexibility that channels provide:&#xA;Channels can be restricted to two ways of data flow i.e. sending or recieving, and here are some code snippets to depict this feature!&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;func fn(messages chan&amp;lt;- int) //Recieving Only&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;This above snippet implies that messages can only recieve data to it but not send data to any other goroutine.&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;func fn(messages chan-&amp;gt; int) //Sending Only&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;This above snippet implies that messages can only send data but not recieve data from any other goroutine.&lt;/p&gt;&#xA;&lt;p&gt;And with that, I hope that i have convinced you on what wonders go can do with concurrency if the above two fundamental concepts are applied appropriately!&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;Written by &lt;a href=&#34;https://www.github.com/mukunddeepak&#34;&gt;Mukund Deepak&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;&#xA;</description>
    </item>
    <item>
      <title>Pacman vs Other package managers</title>
      <link>https://hsp-test.netlify.app/blog/pacman.html/</link>
      <pubDate>Wed, 16 Mar 2022 05:30:00 +0530</pubDate>
      <author>HSP</author>
      <guid>https://hsp-test.netlify.app/blog/pacman.html</guid>
      <description>&lt;h1 id=&#34;table-of-contents&#34;&gt;Table of Contents &lt;a class=&#34;anchor&#34; href=&#34;#table-of-contents&#34;&gt;#&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#how-its-better-than-other-package-managers&#34;&gt;How its better than other package managers&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#usage&#34;&gt;Usage&lt;/a&gt;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#installing-a-single-package-or-a-list-of-packages&#34;&gt;Installing a single package or a list of packages&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#install-using-regex&#34;&gt;Install using regex&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#remove-a-package&#34;&gt;Remove a package&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#updating-all-packages-in-system&#34;&gt;Updating all packages in system&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#so-how-is-pacman-60-better-than-the-previous-versions&#34;&gt;So how is pacman 6.0 better than the previous versions?&lt;/a&gt;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#paralleldownloads&#34;&gt;ParallelDownloads&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#comparison&#34;&gt;Comparison&lt;/a&gt;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#with-parallel-downloads&#34;&gt;With Parallel Downloads&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#without-parallel-downloads&#34;&gt;Without Parallel Downloads&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#bibliography&#34;&gt;Bibliography&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;introduction&#34;&gt;Introduction &lt;a class=&#34;anchor&#34; href=&#34;#introduction&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;The pacman package manager is one of the major distinguishing features of Arch Linux. It combines a simple binary package format with an easy-to-use build system. The goal of pacman is to make it possible to easily manage packages, whether they are from the official repositories or the user’s own builds.&lt;/p&gt;&#xA;&lt;h2 id=&#34;how-its-better-than-other-package-managers&#34;&gt;How its better than other package managers &lt;a class=&#34;anchor&#34; href=&#34;#how-its-better-than-other-package-managers&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;It installs all dependencies of a particular program or software.This is convenient to users. The user need not seperately install all the other dependencies or waste time in searching them.&lt;/li&gt;&#xA;&lt;li&gt;It searches in a wide list of repos and looks for different versions of that particular software.&lt;/li&gt;&#xA;&lt;li&gt;It supports regex and patter descriptions that help in downloading specific versions.&lt;/li&gt;&#xA;&lt;li&gt;The latest version of pacman , &lt;strong&gt;pacman 6.0&lt;/strong&gt; supports &lt;code&gt;ParallelDownloads&lt;/code&gt; which helps in downloading and building packages very fast.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;usage&#34;&gt;Usage &lt;a class=&#34;anchor&#34; href=&#34;#usage&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;installing-a-single-package-or-a-list-of-packages&#34;&gt;Installing a single package or a list of packages &lt;a class=&#34;anchor&#34; href=&#34;#installing-a-single-package-or-a-list-of-packages&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo pacman -S package_name1 package_name2 ...&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;install-using-regex&#34;&gt;Install using regex &lt;a class=&#34;anchor&#34; href=&#34;#install-using-regex&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo pacman -S $(pacman -Ssq package_regex)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;remove-a-package&#34;&gt;Remove a package &lt;a class=&#34;anchor&#34; href=&#34;#remove-a-package&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo pacman -R package_name&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;updating-all-packages-in-system&#34;&gt;Updating all packages in system &lt;a class=&#34;anchor&#34; href=&#34;#updating-all-packages-in-system&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo pacman -Syu&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;so-how-is-pacman-60-better-than-the-previous-versions&#34;&gt;So how is pacman 6.0 better than the previous versions? &lt;a class=&#34;anchor&#34; href=&#34;#so-how-is-pacman-60-better-than-the-previous-versions&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;paralleldownloads&#34;&gt;ParallelDownloads &lt;a class=&#34;anchor&#34; href=&#34;#paralleldownloads&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;p&gt;The latest pacman version is 6.0. The major change for this release is the implementation of parallel downloads. Yes, this feature downloads multiple files at the same time.&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Open &lt;code&gt;/etc/pacman.conf&lt;/code&gt; in your preferred editor&lt;br&gt;&#xA;Example:&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo vim /etc/pacman.conf&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;ol start=&#34;2&#34;&gt;&#xA;&lt;li&gt;Find the following line and uncomment it:&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;ParallelDownloads = 5&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;ol start=&#34;3&#34;&gt;&#xA;&lt;li&gt;Save the file and try downloading some package. From now on, you will notice that the file download happens in parallel when you perform any pacman transaction.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;comparison&#34;&gt;Comparison &lt;a class=&#34;anchor&#34; href=&#34;#comparison&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Please note:&lt;br&gt;&#xA;For this comparison, after each test all required files are purged so as to abide by the integrity of the comparison.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;I am using simple packages &lt;code&gt;gcc&lt;/code&gt; and &lt;code&gt;make&lt;/code&gt; for this comparison.The speed is measured using &lt;code&gt;time&lt;/code&gt; command in Linux.&lt;/p&gt;&#xA;&lt;h4 id=&#34;with-parallel-downloads&#34;&gt;With Parallel Downloads &lt;a class=&#34;anchor&#34; href=&#34;#with-parallel-downloads&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;/images/WithParallelDownloads.png&#34; alt=&#34;With Parallel Downloads&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;h4 id=&#34;without-parallel-downloads&#34;&gt;Without Parallel Downloads &lt;a class=&#34;anchor&#34; href=&#34;#without-parallel-downloads&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;/images/WithParallelDownloads.png&#34; alt=&#34;With Parallel Downloads&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;It can be seen that ParallelDownloads take less time to download the packages.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;This is greatly helpful for downloading multiple packages.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;bibliography&#34;&gt;Bibliography &lt;a class=&#34;anchor&#34; href=&#34;#bibliography&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://wiki.archlinux.org/title/pacman&#34;&gt;Pacman-Arch Wiki&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Arch_Linux#Pacman&#34;&gt;Pacman-Wikipedia&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://ostechnix.com/enable-parallel-downloading-in-pacman-in-arch-linux/&#34;&gt;Parallel Downloads in Pacman&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;em&gt;Posted by &lt;a href=&#34;https://github.com/Adarsh-Liju&#34;&gt;Adarsh Liju Abraham&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;&#xA;</description>
    </item>
    <item>
      <title>The World of Open Source!</title>
      <link>https://hsp-test.netlify.app/blog/world_of_opensource.html/</link>
      <pubDate>Thu, 03 Mar 2022 05:30:00 +0530</pubDate>
      <author>HSP</author>
      <guid>https://hsp-test.netlify.app/blog/world_of_opensource.html</guid>
      <description>&lt;h1 id=&#34;table-of-contents&#34;&gt;Table of Contents &lt;a class=&#34;anchor&#34; href=&#34;#table-of-contents&#34;&gt;#&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#what-is-open-source&#34;&gt;What is open source?&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#why-open-source&#34;&gt;Why open source?&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;#what-can-you-do-to-contribute&#34;&gt;What can you do to contribute?&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;If you are a tech enthusiast, you must&#39;ve come across this common term, &amp;quot;open source&amp;quot;. Most usually, open source software are alternatives to paid software to most students and thrifty enthusiasts. But what actually is open source and why is it important to understand it? Let&#39;s find out!&lt;/p&gt;&#xA;&lt;h2 id=&#34;what-is-open-source&#34;&gt;What is open source? &lt;a class=&#34;anchor&#34; href=&#34;#what-is-open-source&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Imagine a world where you could have endless number of contributors to work on your application and improve it, quite the world, right!? You do not need to imagine it since that is what open source is, simply put. Open source is a form of development of any tool and/or service, while sharing the complete source code and legal rights to access and use your work for free. This gives the users a chance to see the transparency of the tool or service that they use and more importantly, it gives other developers enough information to potentially improve upon the application.&lt;/p&gt;&#xA;&lt;p&gt;As you might already know, Linux, one of the most popular operating systems, is open source. This means that anyone with the knowledge of C programming can contribute to Linux!&lt;/p&gt;&#xA;&lt;h2 id=&#34;why-open-source&#34;&gt;Why open source? &lt;a class=&#34;anchor&#34; href=&#34;#why-open-source&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Open source software has one of, if not, the biggest communities when compared to proprietary software. This ensures that a user or a developer can get support and have a place to discuss the issues that they encounter with several other users and developers. This feedback helps to improve the software even more since the developers and the users are so closely linked.&lt;/p&gt;&#xA;&lt;p&gt;We all know how expensive proprietary software can be. Yes, they should be bought by people who know how to use them and can get the most out of them. But, what about people who are trying to learn a certain skill like photo editing, music production, coding etc. without spending a lot of money on software? Open source software is the solution to that answer! For every proprietary software out there, there is a free and open source software present. They are by no means inferior to the proprietary counterparts but are even better in most scenarios.&lt;/p&gt;&#xA;&lt;p&gt;Here is a small list of open source alternatives to popular proprietary software:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.gimp.org/&#34;&gt;GIMP&lt;/a&gt; - an alternative to Photoshop.&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.gnu.org/software/octave/index&#34;&gt;Octave&lt;/a&gt; - an alternative to MATLAB.&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.libreoffice.org/discover/libreoffice/&#34;&gt;LibreOffice&lt;/a&gt; - an alternative to MS Office tools.&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.7-zip.org/&#34;&gt;7-Zip&lt;/a&gt; - an alternative to WinRAR.&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.audacityteam.org/&#34;&gt;Audacity&lt;/a&gt; - a FOS audio editing tool.&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://pop.system76.com/&#34;&gt;Pop!_OS&lt;/a&gt; - a Debian-based Linux distribution alternative to Windows.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;what-can-you-do-to-contribute&#34;&gt;What can you do to contribute? &lt;a class=&#34;anchor&#34; href=&#34;#what-can-you-do-to-contribute&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;If all the above information has impressed you, take a step forward and contribute to open source! Homebrew&#39;s main objective is to nurture FOSS development in budding developers. If you are interested to join our community and learn more about open source contributions check out the links provided below!&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://sharp-wright-d62960.netlify.app/getstarted/&#34;&gt;Join Homebrew!&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.rowjee.com/blog/git_up_and_running&#34;&gt;How to use Git&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/&#34;&gt;FOSS development courses&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;</description>
    </item>
    <item>
      <title>about</title>
      <link>https://hsp-test.netlify.app/about.html/</link>
      <pubDate>Thu, 01 Jan 1970 05:30:00 +0530</pubDate>
      <author>HSP</author>
      <guid>https://hsp-test.netlify.app/about.html</guid>
      <description>&lt;p&gt;About&lt;/p&gt;&#xA;</description>
    </item>
    <item>
      <title>Zig Workshop</title>
      <link>https://hsp-test.netlify.app/homebrew/workshop_posts/zig_workshop.html/</link>
      <pubDate>Thu, 01 Jan 1970 05:30:00 +0530</pubDate>
      <author>HSP</author>
      <guid>https://hsp-test.netlify.app/homebrew/workshop_posts/zig_workshop.html</guid>
      <description>&lt;h2 id=&#34;what-is-zig&#34;&gt;What is Zig?&lt;/h2&gt;&#xA;&lt;p&gt;Zig is a simple systems programming launguage. It allows you to directly access the memory and the hardware (much like C does).&lt;/p&gt;&#xA;&lt;p&gt;In fact, Zig aims to be a &amp;quot;better C&amp;quot; by fixing many of the problems it has. We will be exploring these problems and how Zig fixes them.&lt;/p&gt;&#xA;&lt;p&gt;Zig is still in its early stages despite being in development since 2016. It is yet to have its 1.0 release, which is expected to come out some time around 2025-2026.&#xA;This just goes to show the amount of effort it takes to create something beautiful, like Zig.&lt;/p&gt;&#xA;&lt;h2 id=&#34;who-uses-it&#34;&gt;Who uses it?&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Uber&#39;s Go services have a little bit of Zig in them. And they heavily use toolchain written in Zig to compile the Go services.&lt;/li&gt;&#xA;&lt;li&gt;Bun is a javascript runtime that is blazingly fast. It is written entirely in Zig!&lt;/li&gt;&#xA;&lt;li&gt;Tigerbeetle is a database written in Zig. It is ridiculously fast and has an incredible storage fault model.&lt;/li&gt;&#xA;&lt;li&gt;Mach is a game engine and graphics toolkit written in Zig.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;what-well-do-in-this-workshop&#34;&gt;What we&#39;ll do in this workshop&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Learn how to read / write basic Zig programs&lt;/li&gt;&#xA;&lt;li&gt;Learn about some pitfalls of C, and how Zig fixes them&lt;/li&gt;&#xA;&lt;li&gt;Develop an appreciation for modern programming (as opposed to C)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://ziglang.org/documentation/master/&#34;&gt;Official documentation&lt;/a&gt;: Great and concise documentation. You might want to ctrl+f through it for quick reference.&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://ziglearn.org/&#34;&gt;ziglearn&lt;/a&gt;: Unofficial, but great introduction to the language for people who already know the basics of programming.&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/ratfactor/ziglings/&#34;&gt;ziglings&lt;/a&gt;: Super fun exercises to learn zig practically, one smol step at a time.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;&#xA;&lt;p&gt;The Zig toolchain allows you to compile / test / run Zig programs.&lt;/p&gt;&#xA;&lt;p&gt;If you&#39;re on Linux (or *nix), you could install &lt;code&gt;zig&lt;/code&gt; via your package manager. This will not give you the latest version of Zig, but is perfect for our purposes.&lt;/p&gt;&#xA;&lt;p&gt;If you&#39;re on Windows or if you want the latest version of Zig (regardless of your platform), you can download it from &lt;a href=&#34;https://ziglang.org/download/&#34;&gt;here&lt;/a&gt;. Simply click on the link appropriate for your platform. Extract the downloaded archive, and add the extracted folder to PATH.&lt;/p&gt;&#xA;&lt;p&gt;If you&#39;re unsure about how to add a folder to PATH, you can look up how to do so for your platform (ie Windows, Linux etc)&lt;/p&gt;&#xA;&lt;p&gt;Once this is done, run &lt;code&gt;zig version&lt;/code&gt; in a terminal. If you&#39;re greeted with a version number, Zig has successfully been installed on your system. If not, feel free to reach out to us, and we&#39;ll help fix your issues.&lt;/p&gt;&#xA;&lt;h2 id=&#34;hello-world&#34;&gt;Hello World!&lt;/h2&gt;&#xA;&lt;p&gt;Hello World in Zig:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-zig&#34;&gt;// This is a comment!&#xA;&#xA;// import the standard library, which contains functions&#xA;// that will let us print to the screen, among many other things.&#xA;const std = @import(&amp;quot;std&amp;quot;);&#xA;&#xA;// main function of our program. Every program needs one.&#xA;pub fn main() void {&#xA;    // print Hello World!&#xA;    std.debug.print(&amp;quot;Hello world!\n&amp;quot;, .{});&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Explanation:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;std&lt;/code&gt; is a variable that refers to the standard library. All the functions present in the standard library can be accessed via &lt;code&gt;std&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;pub&lt;/code&gt; stands for &amp;quot;public.&amp;quot; This makes the function visible outside of the current file. It is necessary for the main function because your system needs to call it.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;fn&lt;/code&gt; is the keyword used to create functions. &lt;code&gt;pub fn&lt;/code&gt; is used to create a public function.&lt;/li&gt;&#xA;&lt;li&gt;The name of our function is &lt;code&gt;main&lt;/code&gt;, and it takes no arguments (as indicated by the empty &lt;code&gt;()&lt;/code&gt;). This is very similar to most programming languages.&lt;/li&gt;&#xA;&lt;li&gt;In Zig, the return type of the function is written &lt;em&gt;after&lt;/em&gt; the name of the function. In this case, our &lt;code&gt;main&lt;/code&gt; function doesn&#39;t return anything, so we use &lt;code&gt;void&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;std.debug.print()&lt;/code&gt; is just one of the many ways in which you can print text to the screen. We use it here because it is the simplest.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;features-of-zig&#34;&gt;Features of Zig&lt;/h2&gt;&#xA;&lt;p&gt;In Zig, many of the basic programming constructs like if statements, loops, function calls etc are written almost exactly in the same way as in languages like C.&lt;/p&gt;&#xA;&lt;p&gt;This is where the resources we mentioned earlier help out. Need to write a for loop? Open up the official documentation and ctrl+f for &amp;quot;for loop.&amp;quot; It&#39;s that easy :D&lt;/p&gt;&#xA;&lt;p&gt;You will be made familiar with many such constructs today, but the main aim is to introduce concepts that are not typically seen in other languages.&lt;/p&gt;&#xA;&lt;h3 id=&#34;dividing-two-numbers&#34;&gt;Dividing two numbers&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-zig&#34;&gt;const std = @import(&amp;quot;std&amp;quot;);&#xA;&#xA;// div takes two arguments.&#xA;// x, which is an unsigned 8 bit integer.&#xA;// y, which is an unsigned 8 bit integer.&#xA;// it returns a single unsigned 8 bit integer value.&#xA;fn div(x: u8, y: u8) u8 {&#xA;    return x / y;&#xA;}&#xA;&#xA;pub fn main() void {&#xA;    // the var keyword is used to declare variables.&#xA;    // const can also be used (like with const std) but&#xA;    // variables created with const cannot be modified once created.&#xA;    var q = div(15, 5);&#xA;    std.debug.print(&amp;quot;{d}\n&amp;quot;, .{q});&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;This seems pretty straightforward, right? Trust me, you&#39;ll get used to the syntax soon enough :D&lt;/p&gt;&#xA;&lt;h4 id=&#34;errors&#34;&gt;Errors&lt;/h4&gt;&#xA;&lt;p&gt;What happens when you try to divide by 0? Let&#39;s find out!&#xA;Replace the call to div with the divisor set to 0, and run the program. Your program will crash! To prevent this, let&#39;s generate a custom error in the div function that is returned when the divisor is 0.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-zig&#34;&gt;// !u8 is an &amp;quot;error union&amp;quot; type. It indicates that the&#xA;// return value could either be an error, or a u8 value.&#xA;fn div(x: u8, y: u8) !u8 {&#xA;    if (y == 0) {&#xA;        return error.MyError; // you can create your own errors by using error.YourErrorName&#xA;    } else {&#xA;        return x / y;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;This error must be caught in the main function! In order to do so, we use the &lt;code&gt;catch&lt;/code&gt; keyword.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-zig&#34;&gt;// q will be equal to the result of the div function if there are no errors.&#xA;// If the div function returns an error, then the value of q will be the value&#xA;// succeeding the catch keyword. 0 in this case.&#xA;var q = div(15, 0) catch 0;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Let&#39;s take this one step further!&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-zig&#34;&gt;const std = @import(&amp;quot;std&amp;quot;);&#xA;&#xA;// div function definition here&#xA;&#xA;// a + (b / c)&#xA;fn func(a: u8, b: u8, c: u8) !u8 {&#xA;    // The &amp;quot;try&amp;quot; keyword propagates the error so that&#xA;    // you won&#39;t have to deal with it everywhere.&#xA;    return a + try div(b, c);&#xA;}&#xA;&#xA;pub fn main() void {&#xA;    var q = func(5, 15, 3) catch 0;&#xA;    std.debug.print(&amp;quot;{d}\n&amp;quot;, .{q});&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h4 id=&#34;defer&#34;&gt;Defer&lt;/h4&gt;&#xA;&lt;p&gt;The defer keyword allows you to execute code at the &lt;em&gt;end&lt;/em&gt; of the current scope.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-zig&#34;&gt;const std = @import(&amp;quot;std&amp;quot;);&#xA;&#xA;pub fn main() void {&#xA;    std.debug.print(&amp;quot;Start of main function!\n&amp;quot;, .{});&#xA;    defer std.debug.print(&amp;quot;End of main function!\n&amp;quot;, .{});&#xA;&#xA;    // lots of code here&#xA;    var x: u8 = 5;&#xA;    std.debug.print(&amp;quot;The value of x is {d}\n&amp;quot;, .{x});&#xA;    // lots of code here&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;This is particularly useful for keeping the allocation and deallocation of memory in two consecutive lines, which leads to a lesser chance of forgetting to deallocate.&lt;/p&gt;&#xA;&lt;h2 id=&#34;generics-in-zig&#34;&gt;Generics in Zig&lt;/h2&gt;&#xA;&lt;p&gt;Generics in programming is when you reuse the same code for values of different types. Let&#39;s explore generics in Zig with the example of vectors.&lt;/p&gt;&#xA;&lt;p&gt;For the sake of this example, let&#39;s use 2D vectors with an &lt;code&gt;x&lt;/code&gt; and a &lt;code&gt;y&lt;/code&gt; component. We first create a Vector struct with two &lt;code&gt;f32&lt;/code&gt; members (&lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;). &lt;code&gt;f32&lt;/code&gt; is the 32 bit (4 byte) floating point type in Zig. Note that unlike the integer types, floating point types can&#39;t have arbitrary bit width in Zig. They must either be &lt;code&gt;f32&lt;/code&gt; or &lt;code&gt;f64&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-zig&#34;&gt;const std = @import(&amp;quot;std&amp;quot;);&#xA;&#xA;// Vector is a struct with 2 members.&#xA;// &amp;quot;x&amp;quot;, which is a 32 bit float and &amp;quot;y&amp;quot;, which is also a 32 bit float.&#xA;const Vector = struct {&#xA;    x: f32,&#xA;    y: f32,&#xA;};&#xA;&#xA;pub fn main() void {&#xA;    // Initializing the Vector struct.&#xA;    var v = Vector{ .x = 5.5, .y = 6.6 };&#xA;&#xA;    // Print the vector&#xA;    std.debug.print(&amp;quot;{}, {}\n&amp;quot;, .{ v.x, v.y });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;This code works great! We can create multiple vectors easily by using the Vector struct. But... what if you want a vector with &lt;code&gt;f64&lt;/code&gt;&#39;s instead of &lt;code&gt;f32&lt;/code&gt;&#39;s? What if you want a vector of integers? Will you rewrite your Vector class for every such scenario?&lt;/p&gt;&#xA;&lt;h3 id=&#34;functions-accepting-and-returning-types&#34;&gt;Functions accepting and returning types&lt;/h3&gt;&#xA;&lt;p&gt;In Zig, types are first class values during compile time! What this means is that while your code is being compiled, you can execute certain functions that accept types as a parameter, and return types as the return value. Just as if they were regular values. This is what that looks like:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-zig&#34;&gt;// A function that returns an integer type of&#xA;// twice the bit width of the given integer type.&#xA;fn DoubleBitInt(comptime T: type) type {&#xA;    if (T == u8) return u16;&#xA;    if (T == u16) return u32;&#xA;    if (T == u32) return u64;&#xA;    if (T == u64) return u128;&#xA;}&#xA;&#xA;pub fn main() void {&#xA;    // x is a u16 variable with the value 5.&#xA;    var x: DoubleBitInt(u8) = 5;&#xA;&#xA;    // In Zig, all variables must be used. If&#xA;    // a variable is not used, it must be assigned&#xA;    // to &amp;quot;_&amp;quot;, which gets rid of the compiler error.&#xA;    _ = x;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;If we can return primitive types such as integers, then what stops us from returning entire structs? Nothing!&lt;/p&gt;&#xA;&lt;p&gt;The way in which generics work in Zig is, we create a function that accepts some information about the required type. The function then creates a struct according to the requirement and returns it. Of course, all of this happens during the compilation of your program itself&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-zig&#34;&gt;const std = @import(&amp;quot;std&amp;quot;);&#xA;&#xA;// &amp;quot;Vector&amp;quot; is now a function that returns the required vector type.&#xA;// The return type is &amp;quot;type&amp;quot;, which indicates that the value returned&#xA;// by this function is a type (such as u8, f32, a struct etc)&#xA;fn Vector() type {&#xA;    const V = struct {&#xA;        x: f32,&#xA;        y: f32,&#xA;    };&#xA;    return V;&#xA;}&#xA;&#xA;pub fn main() void {&#xA;    // Call the Vector function this time&#xA;    var v = Vector(){ .x = 5.5, .y = 6.6 };&#xA;    std.debug.print(&amp;quot;{}, {}\n&amp;quot;, .{ v.x, v.y });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Cool! But where are my generics? Our &lt;code&gt;Vector()&lt;/code&gt; function still returns a vector type that can only hold &lt;code&gt;f32&lt;/code&gt;&#39;s. This is where the beauty of Zig kicks in :D&lt;/p&gt;&#xA;&lt;p&gt;Now that Vector is a function, we can simply pass the type of the elements that we want into it, and have it construct the required vector struct like so:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-zig&#34;&gt;const std = @import(&amp;quot;std&amp;quot;);&#xA;&#xA;// The comptime keyword is used to indicate that this argument is passed to&#xA;// this function durint compile time, and not during run time as is usually the case.&#xA;// This is necessary because types are not recognized as values which you can pass to functions during run time.&#xA;fn Vector(comptime T: type) type {&#xA;    // Directly return a struct instead of creating&#xA;    // a variable and returning the variable.&#xA;    return struct {&#xA;        x: T, // This is the type passed in to the function by the user&#xA;        y: T, // Same here&#xA;    };&#xA;}&#xA;&#xA;pub fn main() void {&#xA;    // A vector of f32s&#xA;    var v = Vector(f32){ .x = 5.5, .y = 6.6 };&#xA;    std.debug.print(&amp;quot;{}, {}\n&amp;quot;, .{ v.x, v.y });&#xA;&#xA;    // A vector of u8s&#xA;    var w = Vector(u8){ .x = 5, .y = 6 };&#xA;    std.debug.print(&amp;quot;{}, {}\n&amp;quot;, .{ w.x, w.y });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;This is a very, &lt;em&gt;very&lt;/em&gt; powerful feature that enables you to write very reusable code.&lt;/p&gt;&#xA;&lt;h2 id=&#34;zig-as-a-cc-compiler&#34;&gt;Zig as a C/C++ compiler&lt;/h2&gt;&#xA;&lt;p&gt;Have some C/C++ code lying around? Try compiling it with &lt;code&gt;zig cc file_name.c&lt;/code&gt; or &lt;code&gt;zig c++ file_name.cpp&lt;/code&gt;. &lt;code&gt;zig cc&lt;/code&gt; and &lt;code&gt;zig c++&lt;/code&gt; are drop in replacements for &lt;code&gt;gcc&lt;/code&gt; and &lt;code&gt;g++&lt;/code&gt; respectively, and take almost identical arguments.&lt;/p&gt;&#xA;&lt;p&gt;They produce much smaller binaries in most cases, and are compiled with lots of safety checking enabled by default. What&#39;s more, they are also cross compilers by default!&#xA;This means that you can run the compiler on Linux, but build a binary for Windows (for example), by using the &lt;code&gt;-target&lt;/code&gt; command line argument: &lt;code&gt;zig cc file_name.c -target x86_64-windows-gnu&lt;/code&gt;. It&#39;s just that simple!&lt;/p&gt;&#xA;&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;&#xA;&lt;p&gt;Zig brings some very profound ideas together into one language. Ideas like comptime, treating errors and types as first class values etc are precisely the features of modern programming that help write safer, and easy to understand code with little to no runtime overhead.&lt;/p&gt;&#xA;&lt;p&gt;There are SO many more awesome Zig features that we couldn&#39;t cover today because of time constraints. Look Zig up! (Re)write some programs in Zig! It&#39;s a very fun language to code in and is becoming my favorite very fast.&lt;/p&gt;&#xA;&lt;p&gt;Hope you learnt something new today!&lt;/p&gt;&#xA;</description>
    </item>
    <item>
      <title>home</title>
      <link>https://hsp-test.netlify.app/members.html/</link>
      <pubDate>Thu, 01 Jan 1970 05:30:00 +0530</pubDate>
      <author>HSP</author>
      <guid>https://hsp-test.netlify.app/members.html</guid>
      <description>&lt;h1 id=&#34;members&#34;&gt;Members&lt;/h1&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;...&lt;/li&gt;&#xA;&lt;li&gt;...&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;</description>
    </item>
    <item>
      <title>home</title>
      <link>https://hsp-test.netlify.app/index.html/</link>
      <pubDate>Thu, 01 Jan 1970 05:30:00 +0530</pubDate>
      <author>HSP</author>
      <guid>https://hsp-test.netlify.app/index.html</guid>
      <description>&lt;p&gt;Hackerspace PESUECC is a Student-Powered Developer Community located at PES University, Electronic City Campus.&lt;/p&gt;&#xA;&lt;p&gt;The club was started in 2021, with a founding team of five people. Presently, the club has more than 36 Staff, and remains an open, student-run and student-directed community.&lt;/p&gt;&#xA;</description>
    </item>
  </channel>
</rss>
